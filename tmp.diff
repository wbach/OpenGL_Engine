diff --git a/Sources/Common/Controllers/IController.h b/Sources/Common/Controllers/IController.h
index 7761be39..3532b8dd 100644
--- a/Sources/Common/Controllers/IController.h
+++ b/Sources/Common/Controllers/IController.h
@@ -1,48 +1,56 @@
 #pragma once
+#include <memory>
+
 #include "ControllersTypes.h"
 #include "Logger/Log.h"
-#include <memory>
+#include <magic_enum/magic_enum.hpp>
 
 namespace common
 {
-	namespace Controllers
-	{
-		class IController
-		{
-		public:
-			IController(Controllers::Types type)
-				: type_(type)
-			{}
-			virtual ~IController() {}
-			virtual void Update(float dt) = 0;
-			Controllers::Types GetType() { return type_; }
+namespace Controllers
+{
+class IController
+{
+public:
+    IController(Controllers::Types type)
+        : type_(type)
+    {
+    }
+    virtual ~IController()
+    {
+    }
+    virtual void Update(float dt) = 0;
+    Controllers::Types GetType()
+    {
+        return type_;
+    }
 
-		private:
-			Controllers::Types type_;
-		};
+private:
+    Controllers::Types type_;
+};
 
-		typedef std::shared_ptr<IController> IControllerPtr;
-		template<class T>
-		std::shared_ptr<T> castControllerAs(IControllerPtr ptr)
-		{
-			auto msg = std::static_pointer_cast<T>(ptr);
-			if (msg == nullptr)
-			{
-				ERROR_LOG("Cant cast type : " + std::to_string(ptr->GetType()));
-				return nullptr;
-			}
-			return msg;
-		}
-		template<class T>
-		T* castControllerAs(IController* ptr)
-		{
-			auto msg = static_cast<T*>(ptr);
-			if (msg == nullptr)
-			{
-				ERROR_LOG("Cant cast type : " + std::to_string(ptr->GetType()));
-				return nullptr;
-			}
-			return msg;
-		}
-	} // Controllers
-} // common
\ No newline at end of file
+typedef std::shared_ptr<IController> IControllerPtr;
+template <class T>
+std::shared_ptr<T> castControllerAs(IControllerPtr ptr)
+{
+    auto msg = std::static_pointer_cast<T>(ptr);
+    if (msg == nullptr)
+    {
+        LOG_ERROR << "Cant cast type : " << magic_enum::enum_name(ptr->GetType());
+        return nullptr;
+    }
+    return msg;
+}
+template <class T>
+T* castControllerAs(IController* ptr)
+{
+    auto msg = static_cast<T*>(ptr);
+    if (msg == nullptr)
+    {
+        LOG_ERROR << "Cant cast type : " << magic_enum::enum_name(ptr->GetType());
+        return nullptr;
+    }
+    return msg;
+}
+}  // namespace Controllers
+}  // namespace common
\ No newline at end of file
diff --git a/Sources/Common/MessageHandling/AbstractHandler.h b/Sources/Common/MessageHandling/AbstractHandler.h
index 7b132a7d..27b34a3b 100644
--- a/Sources/Common/MessageHandling/AbstractHandler.h
+++ b/Sources/Common/MessageHandling/AbstractHandler.h
@@ -2,6 +2,7 @@
 #include "Logger/Log.h"
 #include <UtilsNetwork/NetworkTypes.h>
 #include "Common/Messages/MessageTypes.h"
+#include <magic_enum/magic_enum.hpp>
 
 namespace common
 {
@@ -33,7 +34,7 @@ public:
 
         ProcessMessage(userId, message);
 
-        DEBUG_LOG(std::to_string(message.GetType()));
+        LOG_DEBUG << "Handle type: " << message.GetType();
 
         return true;
     }
@@ -45,7 +46,7 @@ public:
 
         if (msg == nullptr)
         {
-            DEBUG_LOG("[Error] CastToMsgType: cannot cast " + std::to_string(message->GetType()) + ".");
+            LOG_DEBUG << "[Error] CastToMsgType: cannot cast " << message->GetType() << ".";
             return nullptr;
         }
 
diff --git a/Sources/Common/MessageHandling/Dispatcher.cpp b/Sources/Common/MessageHandling/Dispatcher.cpp
index b191cc82..39de91ca 100644
--- a/Sources/Common/MessageHandling/Dispatcher.cpp
+++ b/Sources/Common/MessageHandling/Dispatcher.cpp
@@ -16,7 +16,7 @@ void Dispacher::AddHandlers(Handlers handlers)
         }
         else
         {
-            DEBUG_LOG("Handler already exist.");
+            LOG_DEBUG << "Handler already exist.";
         }
     }
 }
@@ -35,7 +35,7 @@ void Dispacher::Dispatch(uint32 userId, const Network::IMessage& message)
 
     if (not result)
     {
-        DEBUG_LOG("Handler not found. Dispacher::Dispatch message missed.");
+        LOG_DEBUG << "Handler not found. Dispacher::Dispatch message missed.";
     }
 }
 void Dispacher::RemoveHandler(const std::string& label)
diff --git a/Sources/Common/Messages/BinaryMessageConverter.cpp b/Sources/Common/Messages/BinaryMessageConverter.cpp
index abf45fbf..03e0420b 100644
--- a/Sources/Common/Messages/BinaryMessageConverter.cpp
+++ b/Sources/Common/Messages/BinaryMessageConverter.cpp
@@ -1,4 +1,5 @@
 #include "BinaryMessageConverter.h"
+
 #include <Common/Messages/CreateCharacter/CreateCharacterMsgReq.h>
 #include <Common/Messages/CreateCharacter/CreateCharacterMsgResp.h>
 #include <Common/Messages/GetCharacterData/GetCharacterDataMsgReq.h>
@@ -23,10 +24,12 @@ BinaryMessageConverter::BinaryMessageConverter()
 
 bool BinaryMessageConverter::IsValid(Network::IMessageFormat format, Network::IMessageType type) const
 {
-    return format == Network::ConvertFormat(Network::MessageFormat::Binary) and type >= COMMON_MESSAGE_TYPE_RANGE_LOW and type <= COMMON_MESSAGE_TYPE_RANGE_HIGH;
+    return format == Network::ConvertFormat(Network::MessageFormat::Binary) and type >= COMMON_MESSAGE_TYPE_RANGE_LOW and
+           type <= COMMON_MESSAGE_TYPE_RANGE_HIGH;
 }
 
-std::unique_ptr<Network::IMessage> BinaryMessageConverter::Convert(Network::IMessageType type, const Network::IMessageData& message)
+std::unique_ptr<Network::IMessage> BinaryMessageConverter::Convert(Network::IMessageType type,
+                                                                   const Network::IMessageData& message)
 {
     switch (type)
     {
@@ -55,7 +58,7 @@ std::unique_ptr<Network::IMessage> BinaryMessageConverter::Convert(Network::IMes
         case MessageTypes::GetCharactersDataReq:
             return Network::ConvertMessage<GetCharactersDataMsgReq>(message);
         default:
-            DEBUG_LOG("Convert to IMessage. Unsuporrted message.");
+            LOG_DEBUG << "Convert to IMessage. Unsuporrted message.";
     }
 
     return nullptr;
@@ -90,10 +93,10 @@ Network::IMessageData BinaryMessageConverter::Convert(const Network::IMessage& m
         case MessageTypes::GetCharactersDataReq:
             return Network::ConvertMessage<GetCharactersDataMsgReq>(message);
         default:
-            DEBUG_LOG("Convert to IMessage. Unsuporrted message.");
+            LOG_DEBUG << "Convert to IMessage. Unsuporrted message.";
     }
 
-    DEBUG_LOG("Convert to binary. Unsuporrted message.");
+    LOG_DEBUG << "Convert to binary. Unsuporrted message.";
     return {};
 }
 }  // namespace common
diff --git a/Sources/Common/Messages/XmlMessageConverter.cpp b/Sources/Common/Messages/XmlMessageConverter.cpp
index c4df842b..f3529208 100644
--- a/Sources/Common/Messages/XmlMessageConverter.cpp
+++ b/Sources/Common/Messages/XmlMessageConverter.cpp
@@ -43,11 +43,10 @@ bool XmlMessageConverter::IsValid(Network::IMessageFormat format, Network::IMess
     case common::MessageTypes::GetCharactersDataReq
     */
 
-std::unique_ptr<Network::IMessage> XmlMessageConverter::Convert(Network::IMessageType type,
-                                                                const Network::IMessageData &message)
+std::unique_ptr<Network::IMessage> XmlMessageConverter::Convert(Network::IMessageType type, const Network::IMessageData &message)
 {
     std::string a = common::Convert(message);
-    DEBUG_LOG(a);
+    LOG_DEBUG << "Message: " << a;
 
     Utils::XmlReader reader;
     reader.ReadXml(a);
@@ -103,7 +102,7 @@ std::unique_ptr<Network::IMessage> XmlMessageConverter::Convert(Network::IMessag
         }
         break;
         default:
-            DEBUG_LOG("Convert to IMessage. Unsuporrted message.");
+            LOG_DEBUG << "Convert to IMessage. Unsuporrted message.";
     }
 
     return nullptr;
@@ -113,5 +112,4 @@ Network::IMessageData XmlMessageConverter::Convert(const Network::IMessage &mess
 {
     return {};
 }
-
 }  // namespace common
diff --git a/Sources/Common/Transform.cpp b/Sources/Common/Transform.cpp
index ca0877c1..21ff9b30 100644
--- a/Sources/Common/Transform.cpp
+++ b/Sources/Common/Transform.cpp
@@ -64,12 +64,12 @@ void Transform::UnsubscribeOnChange(uint32 id)
         }
         else
         {
-            DEBUG_LOG("Subsribtion not found");
+            LOG_DEBUG << "Subsribtion not found";
         }
     }
     else
     {
-        DEBUG_LOG("Subsribtion not found");
+        LOG_DEBUG << "Subsribtion not found";
     }
 }
 
diff --git a/Sources/DirectXApi/DirectXApi.cpp b/Sources/DirectXApi/DirectXApi.cpp
index d2873b2e..5f1f1f6e 100644
--- a/Sources/DirectXApi/DirectXApi.cpp
+++ b/Sources/DirectXApi/DirectXApi.cpp
@@ -7,6 +7,7 @@
 #include <xnamath.h>
 #undef CreateFont
 #undef CreateWindow
+#include <Utils/Container.h>
 #include <Utils/Variant.h>
 
 #include <algorithm>
@@ -26,7 +27,6 @@
 #include "Vao.h"
 #include "Vertex.h"
 #include "WinApi/WinApi.h"
-#include <Utils/Container.h>
 
 namespace DirectX
 {
@@ -54,8 +54,7 @@ struct Triangle : public Vao
 {
     Triangle()
     {
-        vertexes_ = {
-            {vec3(0.0, 0.5, 0.5), vec2(0, 0)}, {vec3(0.5, -0.5, 0.5), vec2(0, 1)}, {vec3(-0.5, -0.5, 0.5), vec2(1, 1)}};
+        vertexes_ = {{vec3(0.0, 0.5, 0.5), vec2(0, 0)}, {vec3(0.5, -0.5, 0.5), vec2(0, 1)}, {vec3(-0.5, -0.5, 0.5), vec2(1, 1)}};
     }
 };
 
@@ -129,17 +128,17 @@ HRESULT InitDevice(DirectXContext &directXContext)
 
         if (SUCCEEDED(hr))
         {
-            DEBUG_LOG("Use driver : " + driverTypesStr[driverTypeIndex]);
+            LOG_DEBUG << "Use driver : " + driverTypesStr[driverTypeIndex];
             break;
         }
         else
         {
-            ERROR_LOG("Can not use driver : " + driverTypesStr[driverTypeIndex]);
+            LOG_ERROR << "Can not use driver : " + driverTypesStr[driverTypeIndex];
         }
     }
     if (FAILED(hr))
     {
-        ERROR_LOG("Init device error.");
+        LOG_ERROR << "Init device error.";
         return hr;
     }
 
@@ -323,8 +322,8 @@ void DirectXApi::Init()
 
     D3D11_BLEND_DESC dsc = {false,
                             false,
-                            {true, D3D11_BLEND_SRC_ALPHA, D3D11_BLEND_INV_SRC_ALPHA, D3D11_BLEND_OP_ADD,
-                             D3D11_BLEND_ZERO, D3D11_BLEND_ZERO, D3D11_BLEND_OP_ADD, D3D11_COLOR_WRITE_ENABLE_ALL}};
+                            {true, D3D11_BLEND_SRC_ALPHA, D3D11_BLEND_INV_SRC_ALPHA, D3D11_BLEND_OP_ADD, D3D11_BLEND_ZERO,
+                             D3D11_BLEND_ZERO, D3D11_BLEND_OP_ADD, D3D11_COLOR_WRITE_ENABLE_ALL}};
 
     auto hr = impl_->dxCondext_.dev->CreateBlendState(&dsc, &impl_->alphaBlendState);
 
@@ -379,7 +378,7 @@ void DirectXApi::InitDepthSetncilView()
     descDepth.BindFlags          = D3D11_BIND_DEPTH_STENCIL;
     descDepth.CPUAccessFlags     = 0;
     descDepth.MiscFlags          = 0;
-    auto hr = impl_->dxCondext_.dev->CreateTexture2D(&descDepth, NULL, &impl_->dxCondext_.depthStencil);
+    auto hr                      = impl_->dxCondext_.dev->CreateTexture2D(&descDepth, NULL, &impl_->dxCondext_.depthStencil);
 
     if (FAILED(hr))
     {
@@ -393,7 +392,7 @@ void DirectXApi::InitDepthSetncilView()
     descDSV.ViewDimension      = D3D11_DSV_DIMENSION_TEXTURE2D;
     descDSV.Texture2D.MipSlice = 0;
     hr                         = impl_->dxCondext_.dev->CreateDepthStencilView(impl_->dxCondext_.depthStencil, &descDSV,
-                                                       &impl_->dxCondext_.depthStencilView);
+                                                                               &impl_->dxCondext_.depthStencilView);
     if (FAILED(hr))
     {
         MessageBox(NULL, "CreateDepthStencilView error.", __FUNCTION__, MB_OK);
@@ -422,8 +421,7 @@ void DirectXApi::SetRasterState()
 
 void DirectXApi::SetRenderTargets()
 {
-    impl_->dxCondext_.devcon->OMSetRenderTargets(1, &impl_->dxCondext_.renderTargetView,
-                                                 impl_->dxCondext_.depthStencilView);
+    impl_->dxCondext_.devcon->OMSetRenderTargets(1, &impl_->dxCondext_.renderTargetView, impl_->dxCondext_.depthStencilView);
 }
 
 void DirectXApi::SetShadersFilesLocations(const std::string &path)
@@ -458,8 +456,8 @@ GraphicsApi::IWindowApi &DirectXApi::GetWindowApi()
 void DirectXApi::PrepareFrame()
 {
     impl_->dxCondext_.devcon->ClearRenderTargetView(impl_->dxCondext_.renderTargetView, bgColor_);
-    impl_->dxCondext_.devcon->ClearDepthStencilView(impl_->dxCondext_.depthStencilView,
-                                                    D3D11_CLEAR_DEPTH | D3D11_CLEAR_STENCIL, 1.0f, 0);
+    impl_->dxCondext_.devcon->ClearDepthStencilView(impl_->dxCondext_.depthStencilView, D3D11_CLEAR_DEPTH | D3D11_CLEAR_STENCIL,
+                                                    1.0f, 0);
 }
 void DirectXApi::SetDefaultTarget()
 {
@@ -479,8 +477,7 @@ const Color &DirectXApi::GetBackgroundColor() const
 }
 void DirectXApi::EnableDepthTest()
 {
-    impl_->dxCondext_.devcon->OMSetRenderTargets(1, &impl_->dxCondext_.renderTargetView,
-                                                 impl_->dxCondext_.depthStencilView);
+    impl_->dxCondext_.devcon->OMSetRenderTargets(1, &impl_->dxCondext_.renderTargetView, impl_->dxCondext_.depthStencilView);
 }
 void DirectXApi::DisableDepthTest()
 {
@@ -498,7 +495,7 @@ GraphicsApi::ID DirectXApi::CreateShader(GraphicsApi::ShaderProgramType shaderTy
     DxShader shader;
 
     auto vsShaderFileName = shadersFileLocation_ + filenames.at(GraphicsApi::ShaderType::VERTEX_SHADER);
-    DEBUG_LOG("Compiling " + vsShaderFileName + "...");
+    LOG_DEBUG << "Compiling " << vsShaderFileName << "...";
     auto hr = CompileShaderFromFile(vsShaderFileName, "VS", "vs_4_0", &shader.blob_.vertex_);
 
     if (FAILED(hr))
@@ -542,7 +539,7 @@ GraphicsApi::ID DirectXApi::CreateShader(GraphicsApi::ShaderProgramType shaderTy
     impl_->dxCondext_.devcon->IASetInputLayout(shader.vertexLayout_);
 
     auto fragmentShaderFile = shadersFileLocation_ + filenames.at(GraphicsApi::ShaderType::FRAGMENT_SHADER);
-    DEBUG_LOG("Compiling " + fragmentShaderFile + "...");
+    LOG_DEBUG << "Compiling " << fragmentShaderFile << "...";
     hr = CompileShaderFromFile(fragmentShaderFile, "PS", "ps_4_0", &shader.blob_.pixel_);
 
     if (FAILED(hr))
@@ -553,8 +550,8 @@ GraphicsApi::ID DirectXApi::CreateShader(GraphicsApi::ShaderProgramType shaderTy
     }
 
     // Create the pixel shader
-    hr = impl_->dxCondext_.dev->CreatePixelShader(shader.blob_.pixel_->GetBufferPointer(),
-                                                  shader.blob_.pixel_->GetBufferSize(), NULL, &shader.pixel_);
+    hr = impl_->dxCondext_.dev->CreatePixelShader(shader.blob_.pixel_->GetBufferPointer(), shader.blob_.pixel_->GetBufferSize(),
+                                                  NULL, &shader.pixel_);
     shader.blob_.Release();
 
     if (FAILED(hr))
@@ -564,7 +561,7 @@ GraphicsApi::ID DirectXApi::CreateShader(GraphicsApi::ShaderProgramType shaderTy
     }
 
     impl_->shaders_.push_back(shader);
-    DEBUG_LOG("Shader created : " + vsShaderFileName);
+    LOG_DEBUG << "Shader created : " << vsShaderFileName;
     return impl_->shaders_.size();
 }
 void DirectXApi::UseShader(uint32 id)
@@ -654,7 +651,7 @@ ID3D11ShaderResourceView *CreateTexture2DDesc(DirectXContext &context, const vec
 
     if (FAILED(result))
     {
-        ERROR_LOG("Create CreateTexture2D failed.");
+        LOG_ERROR << "Create CreateTexture2D failed.";
         return nullptr;
     }
 
@@ -669,7 +666,7 @@ ID3D11ShaderResourceView *CreateTexture2DDesc(DirectXContext &context, const vec
     texture2d->Release();
     if (FAILED(result))
     {
-        ERROR_LOG("Create shaderResourceView failed.");
+        LOG_ERROR << "Create shaderResourceView failed.";
         return nullptr;
     }
     context.devcon->GenerateMips(rv);
@@ -683,17 +680,19 @@ GraphicsApi::ID DirectXApi::CreateTexture(const Utils::Image &image, GraphicsApi
     auto channels = image.getChannelsCount();
     std::visit(
         visitor{
-            [&](const std::vector<uint8> &data) {
+            [&](const std::vector<uint8> &data)
+            {
                 switch (channels)
                 {
                     case 4:
                         type = GraphicsApi::TextureType::U8_RGBA;
                         break;
                     default:
-                        DEBUG_LOG("Not implmented.");
+                        LOG_ERROR << "Not implmented.";
                 }
             },
-            [&](const std::vector<float> &data) {
+            [&](const std::vector<float> &data)
+            {
                 switch (channels)
                 {
                     case 1:
@@ -709,16 +708,16 @@ GraphicsApi::ID DirectXApi::CreateTexture(const Utils::Image &image, GraphicsApi
                         type = GraphicsApi::TextureType::FLOAT_TEXTURE_4D;
                         break;
                     default:
-                        DEBUG_LOG("Not implmented.");
+                        LOG_ERROR << "Not implmented.";
                 }
             },
-            [](std::monostate) { ERROR_LOG("Image data not set!"); },
+            [](std::monostate) { LOG_ERROR << "Image data not set!"; },
         },
         image.getImageData());
 
     if (type != GraphicsApi::TextureType::U8_RGBA)
     {
-        DEBUG_LOG("Not implmented.");
+        LOG_ERROR << "Not implmented.";
         return {};
     }
 
@@ -779,7 +778,7 @@ GraphicsApi::ID DirectXApi::CreateCubMapTexture(const std::array<Utils::Image, 6
     HRESULT hr = impl_->dxCondext_.dev->CreateTexture2D(&texDesc, &pData[0], &cubeTexture);
     if (hr != S_OK)
     {
-        ERROR_LOG("CreateTexture2D for cube map error.");
+        LOG_ERROR << "CreateTexture2D for cube map error.";
         return std::nullopt;
     }
 
@@ -788,7 +787,7 @@ GraphicsApi::ID DirectXApi::CreateCubMapTexture(const std::array<Utils::Image, 6
     hr = impl_->dxCondext_.dev->CreateShaderResourceView(cubeTexture, &SMViewDesc, &shaderResourceView);
     if (hr != S_OK)
     {
-        ERROR_LOG("CreateShaderResourceView for cube map error.");
+        LOG_ERROR << "CreateShaderResourceView for cube map error.";
         return std::nullopt;
     }
 
@@ -927,8 +926,8 @@ GraphicsApi::ID DirectXApi::CreateMesh(const GraphicsApi::MeshRawData &meshData,
     i = 0;
     for (size_t x = 0; x < meshData.bonesWeights_.size(); x += 4)
     {
-        vao.vertexes_[i].weights = vec4(meshData.bonesWeights_[x], meshData.bonesWeights_[x + 1],
-                                        meshData.bonesWeights_[x + 2], meshData.bonesWeights_[x + 3]);
+        vao.vertexes_[i].weights = vec4(meshData.bonesWeights_[x], meshData.bonesWeights_[x + 1], meshData.bonesWeights_[x + 2],
+                                        meshData.bonesWeights_[x + 3]);
         vao.vertexes_[i++].bonesIds =
             vec4i(meshData.joinIds_[x], meshData.joinIds_[x + 1], meshData.joinIds_[x + 2], meshData.joinIds_[x + 3]);
     }
@@ -1046,19 +1045,19 @@ void DirectXApi::SetBlendFunction(GraphicsApi::BlendFunctionType)
 }
 void DirectXApi::UpdateMatrixes(uint32, const std::vector<mat4> &)
 {
-    DEBUG_LOG("Not implmented.");
+    LOG_ERROR << "Not implmented.";
 }
 void DirectXApi::UpdateMesh(uint32, const GraphicsApi::MeshRawData &, const std::set<VertexBufferObjects> &)
 {
-    DEBUG_LOG("Not implmented.");
+    LOG_ERROR << "Not implmented.";
 }
 void DirectXApi::UpdateLineMesh(uint32, const GraphicsApi::LineMesh &)
 {
-    DEBUG_LOG("Not implmented.");
+    LOG_ERROR << "Not implmented.";
 }
 void DirectXApi::UpdateOffset(uint32, const std::vector<vec4> &)
 {
-    DEBUG_LOG("Not implmented.");
+    LOG_ERROR << "Not implmented.";
 }
 void DirectXApi::UpdateBlend(uint32, const std::vector<float> &)
 {
diff --git a/Sources/DirectXApi/DirectXTools.cpp b/Sources/DirectXApi/DirectXTools.cpp
index 36b76ac8..a9752e9b 100644
--- a/Sources/DirectXApi/DirectXTools.cpp
+++ b/Sources/DirectXApi/DirectXTools.cpp
@@ -1,11 +1,12 @@
 #include "DirectXTools.h"
-#include "Logger/Log.h"
+
 #include <d3dx11.h>
 
+#include "Logger/Log.h"
+
 namespace DirectX
 {
-HRESULT CompileShaderFromFile(const std::string& filename, LPCSTR szEntryPoint, LPCSTR szShaderModel,
-                              ID3DBlob** ppBlobOut)
+HRESULT CompileShaderFromFile(const std::string& filename, LPCSTR szEntryPoint, LPCSTR szShaderModel, ID3DBlob** ppBlobOut)
 {
     HRESULT hr = S_OK;
 
@@ -19,12 +20,12 @@ HRESULT CompileShaderFromFile(const std::string& filename, LPCSTR szEntryPoint,
 #endif
 
     ID3DBlob* pErrorBlob;
-    hr = D3DX11CompileFromFile(filename.c_str(), NULL, NULL, szEntryPoint, szShaderModel, dwShaderFlags, 0, NULL,
-                               ppBlobOut, &pErrorBlob, NULL);
+    hr = D3DX11CompileFromFile(filename.c_str(), NULL, NULL, szEntryPoint, szShaderModel, dwShaderFlags, 0, NULL, ppBlobOut,
+                               &pErrorBlob, NULL);
     if (FAILED(hr))
     {
         if (pErrorBlob != NULL)
-            ERROR_LOG((char*)pErrorBlob->GetBufferPointer());
+            LOG_ERROR << (char*)pErrorBlob->GetBufferPointer();
         if (pErrorBlob)
             pErrorBlob->Release();
         return hr;
@@ -34,4 +35,4 @@ HRESULT CompileShaderFromFile(const std::string& filename, LPCSTR szEntryPoint,
 
     return S_OK;
 }
-}
+}  // namespace DirectX
diff --git a/Sources/DirectXApi/WinApi/WinApi.cpp b/Sources/DirectXApi/WinApi/WinApi.cpp
index d72f0f05..d5c9e07a 100644
--- a/Sources/DirectXApi/WinApi/WinApi.cpp
+++ b/Sources/DirectXApi/WinApi/WinApi.cpp
@@ -49,7 +49,7 @@ LRESULT CALLBACK WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
                     fileName              = (wchar_t*)realloc(fileName, longestFileNameLength * sizeof(*fileName));
                 }
                 DragQueryFileW(drop, i, fileName, fileNameLength);
-                DEBUG_LOG("fileName : " + reinterpret_cast<char*>(fileName));
+                LOG_ERROR << "fileName : " + reinterpret_cast<char*>(fileName);
             }
 
             std::lock_guard<std::mutex> lk(eventSubscribersMutex_);
@@ -130,7 +130,7 @@ WinApi::WinApi(DirectXContext& directXContext)
 }
 WinApi::~WinApi()
 {
-    DEBUG_LOG("destructor");
+    LOG_DEBUG << "destructor";
 }
 void WinApi::Init()
 {
diff --git a/Sources/DirectXApi/WinApi/XInput/XInputManager.cpp b/Sources/DirectXApi/WinApi/XInput/XInputManager.cpp
index 87e76f6c..e8503287 100644
--- a/Sources/DirectXApi/WinApi/XInput/XInputManager.cpp
+++ b/Sources/DirectXApi/WinApi/XInput/XInputManager.cpp
@@ -22,7 +22,6 @@ XInputManager::XInputManager(HWND windowHwnd, const vec2ui& windowSize)
 }
 XInputManager::~XInputManager()
 {
-    DEBUG_LOG("");
 }
 bool XInputManager::GetKey(KeyCodes::Type key)
 {
diff --git a/Sources/Game/main.cpp b/Sources/Game/main.cpp
index 91e3b2da..4202ff03 100755
--- a/Sources/Game/main.cpp
+++ b/Sources/Game/main.cpp
@@ -29,7 +29,7 @@ const std::string CSTR_SCENES_NODE{"scenes"};
 void Start()
 {
     CLogger::Instance().EnableLogs();
-    CLogger::Instance().ImmeditalyLog();
+    CLogger::Instance().UseAsyncLogging(false);
 
     Utils::JsonReader jsonReader;
     const auto& inputFile = EngineConf.files.data + "Projects/avatar.json";
diff --git a/Sources/GameEngine/Animations/AnimationUtils.cpp b/Sources/GameEngine/Animations/AnimationUtils.cpp
index 118a078d..53095e20 100644
--- a/Sources/GameEngine/Animations/AnimationUtils.cpp
+++ b/Sources/GameEngine/Animations/AnimationUtils.cpp
@@ -84,7 +84,7 @@ std::optional<AnimationClip> ReadAnimationClip(const File& file, Joint& rootJoin
                 auto jointName = transformNode->getAttributeValue("jointName");
                 if (jointName.empty())
                 {
-                    ERROR_LOG("Joint name empty");
+                    LOG_ERROR << "Joint name empty";
                     continue;
                 }
 
@@ -98,7 +98,7 @@ std::optional<AnimationClip> ReadAnimationClip(const File& file, Joint& rootJoin
                 }
                 else
                 {
-                    ERROR_LOG("Joint \"" + jointName + "\" not found in skeleton. Skeleton root joint name : " + rootJoint.name);
+                    LOG_ERROR << "Joint \"" << jointName << "\" not found in skeleton. Skeleton root joint name : " << rootJoint.name;
                 }
             }
             animationClip.AddFrame(keyFrame);
diff --git a/Sources/GameEngine/Components/Animation/AnimationTransition.cpp b/Sources/GameEngine/Components/Animation/AnimationTransition.cpp
index 489ce020..e2eb4d06 100644
--- a/Sources/GameEngine/Components/Animation/AnimationTransition.cpp
+++ b/Sources/GameEngine/Components/Animation/AnimationTransition.cpp
@@ -55,7 +55,7 @@ void AnimationTransition::handle(const ChangeAnimationEvent& event)
         }
         else
         {
-            WARNING_LOG("Try change animation for non exisitng group: " + *event.jointGroupName);
+            LOG_WARN << "Try change animation for non exisitng group: " << *event.jointGroupName;
         }
     }
     else
diff --git a/Sources/GameEngine/Components/Animation/AnimationTransitionMixedToSingle.cpp b/Sources/GameEngine/Components/Animation/AnimationTransitionMixedToSingle.cpp
index bf3f85e8..046096b3 100644
--- a/Sources/GameEngine/Components/Animation/AnimationTransitionMixedToSingle.cpp
+++ b/Sources/GameEngine/Components/Animation/AnimationTransitionMixedToSingle.cpp
@@ -19,8 +19,8 @@ const std::vector<uint32> *findJointGroup(Context &context, const CurrentGroupsP
 {
     if (info.jointGroupNames.size() != 1)
     {
-        WARNING_LOG("Wrong group size! Note: multiple joint groups to single anim not implemented. Size=" +
-                    std::to_string(info.jointGroupNames.size()));
+        LOG_WARN << "Wrong group size! Note: multiple joint groups to single anim not implemented. Size="
+                 << info.jointGroupNames.size();
         return nullptr;
     }
 
@@ -32,7 +32,7 @@ const std::vector<uint32> *findJointGroup(Context &context, const CurrentGroupsP
         return &iter->second;
     }
 
-    WARNING_LOG("Joint group not found! Group name :" + groupName);
+    LOG_WARN << "Joint group not found! Group name :" << groupName;
     return nullptr;
 }
 }  // namespace
diff --git a/Sources/GameEngine/Components/Animation/Animator.cpp b/Sources/GameEngine/Components/Animation/Animator.cpp
index a20df3f8..8019fd04 100644
--- a/Sources/GameEngine/Components/Animation/Animator.cpp
+++ b/Sources/GameEngine/Components/Animation/Animator.cpp
@@ -70,7 +70,6 @@ Animator& Animator::SetAnimation(const std::string& name)
 }
 void Animator::StopAnimation(std::optional<std::string> maybeJoingGroupName)
 {
-    DEBUG_LOG("StopAnimationEvent " + std::to_string(maybeJoingGroupName));
     machine_.handle(StopAnimationEvent{maybeJoingGroupName});
 }
 GraphicsApi::ID Animator::getPerPoseBufferId() const
@@ -103,12 +102,12 @@ IdType Animator::SubscribeForAnimationFrame(const std::string& animName, std::fu
             subscribers.push_back({id, function, frameTimeStamp});
             animationClipInfoSubscriptions_.insert({id, &subscribers});
 
-            DEBUG_LOG("SubscribeForAnimationFrame " + animName + " id : " + std::to_string(id));
+            LOG_DEBUG << "SubscribeForAnimationFrame " << animName << " id : " << id;
             return id;
         }
     }
 
-    WARNING_LOG("SubscribeForAnimationFrame, animation " + animName + " not found or frames are empty!");
+    LOG_WARN << "SubscribeForAnimationFrame, animation " << animName << " not found or frames are empty!";
     return 0;
 }
 IdType Animator::SubscribeForAnimationFrame(const std::string& animName, std::function<void()> function, float frameTimeStamp)
@@ -127,16 +126,16 @@ IdType Animator::SubscribeForAnimationFrame(const std::string& animName, std::fu
         subscribers.push_back({id, function, frameTimeStamp});
         animationClipInfoSubscriptions_.insert({id, &subscribers});
 
-        DEBUG_LOG("SubscribeForAnimationFrame " + animName + " id : " + std::to_string(id));
+        LOG_DEBUG << "SubscribeForAnimationFrame " << animName << " id : " << id;
         return id;
     }
 
-    WARNING_LOG("SubscribeForAnimationFrame, animation " + animName + " not found or frames are empty!");
+    LOG_WARN << "SubscribeForAnimationFrame, animation " << animName << " not found or frames are empty!";
     return 0;
 }
 void Animator::UnSubscribeForAnimationFrame(IdType id)
 {
-    DEBUG_LOG("Try UnSubscribeForAnimationFrame " + std::to_string(id));
+    LOG_DEBUG << "Try UnSubscribeForAnimationFrame " << id;
     auto iter = animationClipInfoSubscriptions_.find(id);
     if (iter != animationClipInfoSubscriptions_.end())
     {
@@ -144,7 +143,7 @@ void Animator::UnSubscribeForAnimationFrame(IdType id)
         auto subIter      = std::find_if(subscribers.begin(), subscribers.end(),
                                          [id](const auto& sub)
                                          {
-                                        DEBUG_LOG("UnSubscribeForAnimationFrame " + std::to_string(id));
+                                        LOG_DEBUG << "UnSubscribeForAnimationFrame " << id;
                                         return sub.id == id;
                                     });
 
@@ -200,7 +199,7 @@ void Animator::alignAnimations(const std::string& animName1, const std::string&
 
     if (clipIter1 == animationClipInfo_.end() or clipIter2 == animationClipInfo_.end())
     {
-        WARNING_LOG("Align not found animation!  : " + animName1 + " or " + animName2);
+        LOG_WARN << "Align not found animation!  : " << animName1 << " or " << animName2;
         return;
     }
     auto& clip1       = clipIter1->second.clip;
@@ -211,7 +210,7 @@ void Animator::alignAnimations(const std::string& animName1, const std::string&
 
     if (clip1Frames.empty() or clip2Frames.empty())
     {
-        WARNING_LOG("Align empty frames!  : " + animName1 + " or " + animName2);
+        LOG_WARN << "Align empty frames!  : " << animName1 << " or " << animName2;
         return;
     }
 
@@ -223,9 +222,9 @@ void Animator::alignAnimations(const std::string& animName1, const std::string&
     }
     else
     {
-        WARNING_LOG("Last frame not found!");
+        LOG_WARN << "Last frame not found!";
     }
-    DEBUG_LOG("Aligned animations: " + animName1 + " and " + animName2);
+    LOG_DEBUG << "Aligned animations: " << animName1 << " and " << animName2;
 }
 
 bool Animator::isAnimationPlaying(const std::string& name) const
@@ -251,13 +250,13 @@ void Animator::ChangeAnimation(const std::string& name, AnimationChangeType chan
 
     if (clipIter == animationClipInfo_.end())
     {
-        DEBUG_LOG("Not found!  : " + name);
+        LOG_WARN << "Not found!  : " << name;
         return;
     }
 
     if (changeType == AnimationChangeType::direct)
     {
-        DEBUG_LOG(" AnimationChangeType::direct not implemnted go to smooth");
+        LOG_DEBUG << " AnimationChangeType::direct not implemnted go to smooth";
     }
 
     jointData_.rootMontion = clipIter->second.rootMontion;
@@ -270,13 +269,13 @@ void Animator::ChangeAnimation(const IdType& id, AnimationChangeType changeType,
 
     if (clipIter == animationClipInfoById_.end())
     {
-        DEBUG_LOG("ChangeAnimation not found animation with id  : " + std::to_string(id));
+        LOG_DEBUG << "ChangeAnimation not found animation with id  : " << id;
         return;
     }
 
     if (changeType == AnimationChangeType::direct)
     {
-        DEBUG_LOG(" AnimationChangeType::direct not implemnted go to smooth");
+        LOG_DEBUG << " AnimationChangeType::direct not implemnted go to smooth";
     }
 
     jointData_.rootMontion = clipIter->second->rootMontion;
@@ -312,7 +311,7 @@ void Animator::GetSkeletonAndAnimations()
 
             if (jointGroups_.empty())
             {
-                DEBUG_LOG("create default joint group");
+                LOG_DEBUG << "create default joint group";
                 createDefaultJointGroup(jointGroups_["deafult"], jointData_.rootJoint);
             }
 
@@ -329,18 +328,18 @@ void Animator::GetSkeletonAndAnimations()
                     }
                 }
             }
-            DEBUG_LOG("Skeleton of: " + model->GetFile().GetBaseName());
+            LOG_DEBUG << "Skeleton of: " << model->GetFile().GetBaseName();
             printSkeleton(jointData_.rootJoint);
 
             montionJoint_ = GetJoint(montionJointName);
             if (montionJoint_)
             {
-                DEBUG_LOG("Montion joint found : " + montionJointName);
+                LOG_DEBUG << "Montion joint found : " << montionJointName;
                 machine_.context_.montionRootJointId = montionJoint_->id;
             }
             else
             {
-                WARNING_LOG("Montion joint not found : " + montionJointName);
+                LOG_WARN << "Montion joint not found : " << montionJointName;
             }
         }
     }
@@ -387,7 +386,7 @@ void Animator::AddAnimationClip(const std::string& name, const Animation::Animat
     }
     else
     {
-        ERROR_LOG("Clip already exist :" + clip.getName());
+        LOG_ERROR << "Clip already exist :" << clip.getName();
     }
 }
 void Animator::applyPoseToJoints(Joint& joint, const mat4& parentTransform)
@@ -430,7 +429,7 @@ void Animator::applyPoseToJoints()
         }
         else
         {
-            DEBUG_LOG("Renderer component not found");
+            LOG_DEBUG << "Renderer component not found";
         }
 
         const auto& boneSpaceMoveVector = machine_.context_.moveVectorForRootMontion;
@@ -452,15 +451,14 @@ void Animator::createShaderJointBuffers()
 {
     if (jointData_.buffer)
     {
-        DEBUG_LOG("ShaderJointBuffer already exist!");
+        LOG_DEBUG << "ShaderJointBuffer already exist!";
         return;
     }
 
     jointData_.buffer =
         std::make_unique<BufferObject<PerPoseUpdate>>(componentContext_.graphicsApi_, PER_POSE_UPDATE_BIND_LOCATION);
 
-    DEBUG_LOG("Created shader buffer: " + thisObject_.GetName() +
-              ", buffer id: " + std::to_string(jointData_.buffer->GetGpuObjectId()));
+    LOG_DEBUG << "Created shader buffer: " << thisObject_.GetName() << ", buffer id: " << jointData_.buffer->GetGpuObjectId();
 
     auto& bufferData = jointData_.buffer->GetData();
     for (size_t i = 0; i < MAX_BONES; ++i)
@@ -473,7 +471,7 @@ void Animator::initAnimationClips(const Model& model)
 {
     for (const auto& [name, clip] : model.animationClips_)
     {
-        DEBUG_LOG("Add model based clip : " + name);
+        LOG_DEBUG << "Add model based clip : " << name;
         animationClipInfo_.insert({name, AnimationClipInfo{.playSpeed     = 1.f,
                                                            .playType      = AnimationClipInfo::PlayType::loop,
                                                            .playDirection = PlayDirection::forward,
@@ -496,7 +494,7 @@ void Animator::initAnimationClips()
             auto iter = animationClipInfo_.find(animationName);
             if (iter != animationClipInfo_.end())
             {
-                DEBUG_LOG("Update anim info for : " + animationName);
+                LOG_DEBUG << "Update anim info for : " << animationName;
                 auto& [_, info]  = *iter;
                 info.playType    = playType;
                 info.rootMontion = clipToRead.useRootMontion;
@@ -512,7 +510,7 @@ void Animator::initAnimationClips()
         auto iter = animationClipInfo_.find(clipToRead.name);
         if (iter != animationClipInfo_.end())
         {
-            DEBUG_LOG("Update anim info for : " + clipToRead.name);
+            LOG_DEBUG << "Update anim info for : " << clipToRead.name;
             auto& [_, info]  = *iter;
             info.playType    = playType;
             info.rootMontion = clipToRead.useRootMontion;
@@ -526,7 +524,7 @@ void Animator::initAnimationClips()
     }
     else
     {
-        WARNING_LOG("Startup animation not found : " + startupAnimationClipName);
+        LOG_WARN <<"Startup animation not found : " << startupAnimationClipName;
     }
 
     if (animationClipInfo_.size() > 0)
@@ -542,7 +540,7 @@ void Animator::clearAnimationClips()
 
 void Animator::printSkeleton(const Animation::Joint& joint, const std::string& hierarchy)
 {
-    DEBUG_LOG(hierarchy + joint.name);
+    LOG_DEBUG << hierarchy << joint.name;
     const std::string& nextHierarchy{hierarchy + "-"};
     for (const auto& childJoint : joint.children)
     {
diff --git a/Sources/GameEngine/Components/Animation/BowPoseUpdater.cpp b/Sources/GameEngine/Components/Animation/BowPoseUpdater.cpp
index 6463b2a6..28e99d7c 100644
--- a/Sources/GameEngine/Components/Animation/BowPoseUpdater.cpp
+++ b/Sources/GameEngine/Components/Animation/BowPoseUpdater.cpp
@@ -8,6 +8,7 @@
 #include "GameEngine/Components/Renderer/Entity/RendererComponent.hpp"
 #include "GameEngine/Objects/GameObject.h"
 #include "GameEngine/Scene/SceneWriter.h"
+#include "Logger/Log.h"
 
 namespace GameEngine
 {
@@ -50,21 +51,21 @@ void BowPoseUpdater::ReqisterFunctions()
 
             if (not parent)
             {
-                WARNING_LOG("Parent not found.");
+                LOG_WARN << "Parent not found.";
                 return;
             }
 
             auto animator = parent->GetComponent<Animator>();
             if (not animator)
             {
-                WARNING_LOG("Animator not found");
+                LOG_WARN << "Animator not found";
                 return;
             }
             auto equipJoint = animator->GetJoint(equipJointName_);
 
             if (not equipJoint)
             {
-                WARNING_LOG("equip joint: \"" + equipJointName_ + "\" not found");
+                LOG_WARN << "equip joint: \"" << equipJointName_ << "\" not found";
                 return;
             }
 
@@ -72,7 +73,7 @@ void BowPoseUpdater::ReqisterFunctions()
 
             if (not disarmJoint)
             {
-                WARNING_LOG("disam joint: \"" + disarmJointName_ + "\" not found");
+                LOG_WARN << "disam joint: \"" << disarmJointName_ << "\" not found";
                 return;
             }
 
@@ -80,7 +81,7 @@ void BowPoseUpdater::ReqisterFunctions()
 
             if (not rendererCopmponent)
             {
-                WARNING_LOG("RendererComponent not found");
+                LOG_WARN << "RendererComponent not found";
                 return;
             }
 
@@ -88,7 +89,7 @@ void BowPoseUpdater::ReqisterFunctions()
 
             if (not model or model->GetMeshes().empty())
             {
-                WARNING_LOG("Mesh not found");
+                LOG_WARN << "Mesh not found";
                 return;
             }
             auto meshTransform = model->GetMeshes().front().GetMeshTransform();
diff --git a/Sources/GameEngine/Components/Animation/EmptyState.cpp b/Sources/GameEngine/Components/Animation/EmptyState.cpp
index 5e9c55a2..bbdea159 100644
--- a/Sources/GameEngine/Components/Animation/EmptyState.cpp
+++ b/Sources/GameEngine/Components/Animation/EmptyState.cpp
@@ -23,7 +23,7 @@ void EmptyState::handle(const ChangeAnimationEvent &event)
 }
 void EmptyState::handle(const StopAnimationEvent &)
 {
-    DEBUG_LOG("EmptyState StopAnimationEvent?");
+    LOG_DEBUG <<"EmptyState StopAnimationEvent?";
 }
 
 std::vector<std::string> EmptyState::getCurrentAnimation() const
diff --git a/Sources/GameEngine/Components/Animation/JointPoseUpdater.cpp b/Sources/GameEngine/Components/Animation/JointPoseUpdater.cpp
index 77801610..36842aec 100644
--- a/Sources/GameEngine/Components/Animation/JointPoseUpdater.cpp
+++ b/Sources/GameEngine/Components/Animation/JointPoseUpdater.cpp
@@ -32,7 +32,7 @@ void JointPoseUpdater::fillOffsets()
     auto parent = owner.GetParent();
     if (not joint or not parent)
     {
-        ERROR_LOG("Joint or parent not set!");
+        LOG_ERROR << "Joint or parent not set!";
         return;
     }
 
diff --git a/Sources/GameEngine/Components/Animation/PlayMixedAnimation.cpp b/Sources/GameEngine/Components/Animation/PlayMixedAnimation.cpp
index 64ab08bb..c6252262 100644
--- a/Sources/GameEngine/Components/Animation/PlayMixedAnimation.cpp
+++ b/Sources/GameEngine/Components/Animation/PlayMixedAnimation.cpp
@@ -154,7 +154,7 @@ void PlayMixedAnimation::increaseAnimationTime(float deltaTime)
                 if (name != toRemoveName)
                 {
                     CurrentGroupsPlayingInfo info{group.clipInfo, group.time, {name}};
-                    DEBUG_LOG("increaseAnimationTime AnimationTransitionMixedToSingle");
+                    LOG_DEBUG << "increaseAnimationTime AnimationTransitionMixedToSingle";
                     context_.machine.transitionTo<AnimationTransitionMixedToSingle>(context_, info);
                     return;
                 }
diff --git a/Sources/GameEngine/Components/Animation/StateMachine.h b/Sources/GameEngine/Components/Animation/StateMachine.h
index 284d9046..7ad00d76 100644
--- a/Sources/GameEngine/Components/Animation/StateMachine.h
+++ b/Sources/GameEngine/Components/Animation/StateMachine.h
@@ -40,8 +40,9 @@ struct StateMachine
 #ifdef NOREALTIME_LOG_ENABLED
         auto previousAnims = tmpTransitionState_->getCurrentAnimation();
         auto nextAnims     = currentState_->getCurrentAnimation();
-        DEBUG_LOG("Animation state transition : " + typeName<State>() + ", Prev anims: " +
-                  Utils::MergeString(previousAnims, " ") + " New anims: " + Utils::MergeString(nextAnims, " "));
+        LOG_DEBUG << "Animation state transition : " << typeName<State>()
+                  << ", Prev anims: " << Utils::MergeString(previousAnims, " ")
+                  << " New anims: " << Utils::MergeString(nextAnims, " ");
 #endif
     }
 
diff --git a/Sources/GameEngine/Components/BaseComponent.cpp b/Sources/GameEngine/Components/BaseComponent.cpp
index 5a1a8afc..844d16a0 100644
--- a/Sources/GameEngine/Components/BaseComponent.cpp
+++ b/Sources/GameEngine/Components/BaseComponent.cpp
@@ -36,6 +36,7 @@ BaseComponent::BaseComponent(const std::string& type, ComponentContext& componen
     , componentRegistredId_(0)
 {
     componentRegistredId_ = componentContext_.componentController_.RegisterComponent(type_, this);
+    LOG_DEBUG << "Component "  << name_ << " is " << type_;
 }
 BaseComponent::~BaseComponent()
 {
@@ -50,7 +51,7 @@ BaseComponent::~BaseComponent()
     }
     else
     {
-        ERROR_LOG("componentRegistredId not set!");
+        LOG_ERROR << "componentRegistredId not set!";
     }
 }
 size_t BaseComponent::GetType() const
diff --git a/Sources/GameEngine/Components/Camera/ThridPersonCamera/Fsm/States/AimState.cpp b/Sources/GameEngine/Components/Camera/ThridPersonCamera/Fsm/States/AimState.cpp
index 1cf04d0a..76659785 100644
--- a/Sources/GameEngine/Components/Camera/ThridPersonCamera/Fsm/States/AimState.cpp
+++ b/Sources/GameEngine/Components/Camera/ThridPersonCamera/Fsm/States/AimState.cpp
@@ -5,6 +5,7 @@
 #include "GameEngine/Animations/Joint.h"
 #include "GameEngine/Components/Animation/Animator.h"
 #include "GameEngine/Objects/GameObject.h"
+#include "Logger/Log.h"
 
 namespace GameEngine
 {
@@ -38,7 +39,7 @@ void AimState::setJointIfNeeded(const StartAimEvent& event)
 
     if (not joint)
     {
-        ERROR_LOG("Joint : " + context.jointName + " not found");
+        LOG_ERROR << "Joint : " << context.jointName << " not found";
     }
 }
 
diff --git a/Sources/GameEngine/Components/Camera/ThridPersonCamera/ThridPersonCameraComponent.cpp b/Sources/GameEngine/Components/Camera/ThridPersonCamera/ThridPersonCameraComponent.cpp
index d06a361b..964eb6ce 100644
--- a/Sources/GameEngine/Components/Camera/ThridPersonCamera/ThridPersonCameraComponent.cpp
+++ b/Sources/GameEngine/Components/Camera/ThridPersonCamera/ThridPersonCameraComponent.cpp
@@ -26,7 +26,6 @@ ThridPersonCameraComponent::ThridPersonCameraComponent(ComponentContext& compone
 
 void ThridPersonCameraComponent::CleanUp()
 {
-    DEBUG_LOG("CleanUp()");
     fsm.reset();
     fsmContext.reset();
 }
@@ -51,8 +50,6 @@ vec3 ThridPersonCameraComponent::getDirection() const
     vec3 dir(1.f);
     auto yaw   = ToRadians(fsmContext->yaw - 90);
     auto pitch = -ToRadians(fsmContext->pitch);
-    //DEBUG_LOG("Yaw :" + std::to_string(fsmContext->yaw) + " Pitch: " + std::to_string(fsmContext->pitch));
-    //DEBUG_LOG("Yaw :" + std::to_string(yaw) + " Pitch: " + std::to_string(pitch));
 
     auto xzLen = cosf(pitch);
     dir.x      = xzLen * cos(yaw);
@@ -63,10 +60,9 @@ vec3 ThridPersonCameraComponent::getDirection() const
 
 void ThridPersonCameraComponent::init()
 {
-    DEBUG_LOG("init");
     if (not componentContext_.scene_.getDisplayManager())
     {
-        ERROR_LOG("Display manager not set!");
+        LOG_ERROR << "Display manager not set!";
         return;
     }
     auto camera = std::make_unique<CustomCamera>();
diff --git a/Sources/GameEngine/Components/Characters/Player.cpp b/Sources/GameEngine/Components/Characters/Player.cpp
index 13ce16a4..fa58ad91 100644
--- a/Sources/GameEngine/Components/Characters/Player.cpp
+++ b/Sources/GameEngine/Components/Characters/Player.cpp
@@ -122,7 +122,6 @@ void Player::Update()
 }
 void Player::hurt(int64 dmg)
 {
-    DEBUG_LOG("hurt 1");
     if (characterController_ and characterStatistic_.currentHp > 0)
     {
         characterStatistic_.currentHp -= dmg;
diff --git a/Sources/GameEngine/Components/ComponentController.cpp b/Sources/GameEngine/Components/ComponentController.cpp
index 7439a8d9..832811f9 100644
--- a/Sources/GameEngine/Components/ComponentController.cpp
+++ b/Sources/GameEngine/Components/ComponentController.cpp
@@ -1,6 +1,7 @@
 #include "ComponentController.h"
 
 #include <algorithm>
+#include <magic_enum/magic_enum.hpp>
 
 #include "Logger/Log.h"
 
@@ -15,13 +16,15 @@ ComponentController::ComponentController()
 }
 ComponentController::~ComponentController()
 {
-    DEBUG_LOG("destructor");
-
-    for (auto& [type, functionMap] : functions_)
+    for (auto& [gameObjectId, functionMap] : functions_)
     {
         if (functionMap.size() > 0)
         {
-            WARNING_LOG("Some funstion left. GameObjectId := " + std::to_string(type));
+            LOG_WARN << "Some funstion left. GameObjectId : " << gameObjectId;
+            for (const auto& [type, _] : functionMap)
+            {
+                LOG_WARN << " GameObjectId : " << gameObjectId << "Function type " << magic_enum::enum_name(type);
+            }
         }
     }
 
@@ -29,7 +32,7 @@ ComponentController::~ComponentController()
     {
         if (componentMap.size() > 0)
         {
-            WARNING_LOG("Some components left. Type : " + std::to_string(type));
+            LOG_WARN << "Some components left. Type : " << type;
         }
     }
 }
@@ -59,7 +62,7 @@ void ComponentController::UnRegisterComponent(IComponent::Type type, ComponentId
     }
     else
     {
-        WARNING_LOG("ComponentsType not found.");
+        LOG_WARN << "ComponentsType not found.";
     }
 }
 void ComponentController::UnRegisterFunction(ComponentController::GameObjectId gameObjectId, FunctionType type, uint32 id)
@@ -83,7 +86,7 @@ void ComponentController::UnRegisterFunction(ComponentController::GameObjectId g
     }
     else
     {
-        WARNING_LOG("Function not found.");
+        LOG_WARN << "Function not found.";
     }
 }
 
@@ -105,19 +108,18 @@ void ComponentController::setActivateStateOfComponentFunction(ComponentControlle
             }
             else
             {
-                ERROR_LOG("Function id=" + std::to_string(id) + "of type{" + std::to_string(static_cast<int>(type)) +
-                          "} not found for gameObjectId=" + std::to_string(gameObjectId));
+                LOG_ERROR << "Function id=" << id << "of type{"
+                          << magic_enum::enum_name(type) << "} not found for gameObjectId=" << gameObjectId;
             }
         }
         else
         {
-            ERROR_LOG("Function type{" + std::to_string(static_cast<int>(type)) +
-                      "} not found for gameObjectId=" + std::to_string(gameObjectId));
+            LOG_ERROR << "Function type{" << magic_enum::enum_name(type) << "} not found for gameObjectId=" << gameObjectId;
         }
     }
     else
     {
-        ERROR_LOG("GameObject not found, gameObjectId=" + std::to_string(gameObjectId));
+        LOG_ERROR << "GameObject not found, gameObjectId=" << gameObjectId;
     }
 }
 
@@ -141,19 +143,18 @@ void ComponentController::callComponentFunction(ComponentController::GameObjectI
             }
             else
             {
-                ERROR_LOG("Can not call function type{" + std::to_string(static_cast<int>(type)) +
-                          "} for gameObjectId=" + std::to_string(gameObjectId));
+                LOG_ERROR << "Can not call function type{" << magic_enum::enum_name(type)
+                          << "} for gameObjectId=" << gameObjectId;
             }
         }
         else
         {
-            ERROR_LOG("Function type{" + std::to_string(static_cast<int>(type)) +
-                      "} not found for gameObjectId=" + std::to_string(gameObjectId));
+            LOG_ERROR << "Function type{" << magic_enum::enum_name(type) << "} not found for gameObjectId=" << gameObjectId;
         }
     }
     else
     {
-        ERROR_LOG("GameObject not found, gameObjectId=" + std::to_string(gameObjectId));
+        LOG_ERROR << "GameObject not found, gameObjectId=" << gameObjectId;
     }
 }
 
diff --git a/Sources/GameEngine/Components/ComponentFactory.cpp b/Sources/GameEngine/Components/ComponentFactory.cpp
index 9395ee69..26ede962 100644
--- a/Sources/GameEngine/Components/ComponentFactory.cpp
+++ b/Sources/GameEngine/Components/ComponentFactory.cpp
@@ -29,11 +29,11 @@ std::unique_ptr<IComponent> ComponentFactory::Create(const TreeNode& node, GameO
         if (iter != ReadFunctions::instance().componentsReadFunctions.end())
             return iter->second(context_, node, gameObject);
 
-        WARNING_LOG("Read function not find for component name : " + componentName);
+        LOG_WARN << "Read function not find for component name : " << componentName;
     }
     else
     {
-        ERROR_LOG("Component type not found in component node attribute.");
+        LOG_ERROR << "Component type not found in component node attribute.";
     }
 
     return nullptr;
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/AimController.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/AimController.cpp
index cf1fc43e..212f6f3b 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/AimController.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/AimController.cpp
@@ -14,6 +14,7 @@
 #include "GameEngine/Components/Renderer/Entity/RendererComponent.hpp"
 #include "GameEngine/Objects/GameObject.h"
 #include "GameEngine/Scene/Scene.hpp"
+#include "Logger/Log.h"
 
 namespace GameEngine
 {
@@ -24,8 +25,8 @@ namespace
 const mat4 matrixRotationOffset(glm::rotate(mat4(1.0f), ToRadians(-90.f), glm::vec3(0.f, 1.f, 0.f)));
 }  // namespace
 
-AimController::AimController(Scene& scene, GameObject& gameObject, Input::InputManager& inputManager,
-                             Animation::Joint& joint, const std::string& drawArrowAnimName)
+AimController::AimController(Scene& scene, GameObject& gameObject, Input::InputManager& inputManager, Animation::Joint& joint,
+                             const std::string& drawArrowAnimName)
     : inputManager{inputManager}
     , joint{joint}
     , scene{scene}
@@ -152,7 +153,7 @@ void AimController::createArrowObject()
     auto path = Utils::GetAbsolutePath(EngineConf.files.data) + "/mixamo.com/arrow2.obj";
     if (not Utils::CheckFileExist(path))
     {
-        WARNING_LOG("arrow model path not found. Path: \"" + path + "\"");
+        LOG_WARN << "arrow model path not found. Path: \"" << path << "\"";
         return;
     }
 
@@ -161,8 +162,8 @@ void AimController::createArrowObject()
         return;
     }
 
-    //auto id = arrowIds.getId();
-    // auto arrowObject = scene.CreateGameObject(gameObject.GetName() + "_Arrow_" + std::to_string(id));
+    // auto id = arrowIds.getId();
+    //  auto arrowObject = scene.CreateGameObject(gameObject.GetName() + "_Arrow_" + std::to_string(id));
     auto arrowObject = scene.CreateGameObject("_Arrow_");
     arrowObject->AddComponent<Components::RendererComponent>().AddModel(path);
     arrowObject->AddComponent<Components::ArrowController>().setCameraComponent(thridPersonCameraComponent);
@@ -176,7 +177,7 @@ void AimController::createArrowObject()
 
         if (not rendererCopmponent)
         {
-            WARNING_LOG("RendererComponent not found");
+            LOG_WARN << "RendererComponent not found";
             return;
         }
 
@@ -184,12 +185,12 @@ void AimController::createArrowObject()
 
         if (not model or model->GetMeshes().empty())
         {
-            WARNING_LOG("Mesh not found");
+            LOG_WARN << "Mesh not found";
             return;
         }
         auto meshTransform = model->GetMeshes().front().GetMeshTransform();
 
-        jointPoseUpdater = std::make_unique<Components::JointPoseUpdater>(*arrowGameObject, joint, meshTransform);
+        jointPoseUpdater        = std::make_unique<Components::JointPoseUpdater>(*arrowGameObject, joint, meshTransform);
         updateJointBufferSubId_ = animator->subscribeForPoseBufferUpdate(
             [this]()
             {
@@ -197,7 +198,7 @@ void AimController::createArrowObject()
                     jointPoseUpdater->updateGameObjectTransform();
             });
     }
-    DEBUG_LOG("Add to gameobject: " + gameObject.GetName());
+    LOG_DEBUG << "Add to gameobject: " << gameObject.GetName();
 }
 
 vec2 AimController::calculateMouseMove()
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/ArrowController.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/ArrowController.cpp
index 3b811a37..db1e25de 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/ArrowController.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/ArrowController.cpp
@@ -66,8 +66,7 @@ Quaternion generateRotationFromDirection(const vec3& direction)
     {
         if (direction.y < 0)  // rotate 180 degrees
         {
-            transform =
-                glm::mat3(glm::vec3(-1.0f, 0.0f, 0.0f), glm::vec3(0.0f, -1.0f, 0.0f), glm::vec3(0.0f, 0.0f, 1.0f));
+            transform = glm::mat3(glm::vec3(-1.0f, 0.0f, 0.0f), glm::vec3(0.0f, -1.0f, 0.0f), glm::vec3(0.0f, 0.0f, 1.0f));
         }
         // else if direction.y >= 0, leave transform as the identity matrix.
     }
@@ -100,17 +99,14 @@ void ArrowController::update()
 
         vec3 offset(0, 0.6f, 0);
         auto rotatedOffset = direction * offset;
-        thisObject_.SetWorldPosition( rayTestResult->pointWorld - rotatedOffset);  // lastPosition, rayTestResult->pointWorld but last make better result?
+        thisObject_.SetWorldPosition(rayTestResult->pointWorld -
+                                     rotatedOffset);  // lastPosition, rayTestResult->pointWorld but last make better result?
     }
     lastPosition = currentPos;
 }
 
 void ArrowController::onCollisionDetect(const Physics::CollisionContactInfo& info)
 {
-    //    DEBUG_LOG("Collision detected rigidbodyId=" + std::to_string(rigidbody->GetId()) + "(" +
-    //              std::to_string(info.rigidbodyId1) + ") with rigidbodyId=" + std::to_string(info.rigidbodyId2) +
-    //              ", Oncollision p1 : " + std::to_string(info.pos1) + ", p2 : " + std::to_string(info.pos2));
-
     performCollision(info.rigidbodyId2);
 }
 
@@ -119,13 +115,13 @@ void ArrowController::performCollision(uint32 rigidbodyId)
     auto rigidbody = findCollidedRigidbody(rigidbodyId);
     if (not rigidbody)
     {
-        WARNING_LOG("Rigidbody not found : " + std::to_string(rigidbodyId));
+        LOG_WARN << "Rigidbody not found : " << rigidbodyId;
         return;
     }
 
     if (rigidbody->GetParentGameObject().GetName() != "Player")  // TO DO : check tag
     {
-        DEBUG_LOG("Collision detected with " + rigidbody->GetParentGameObject().GetName());
+        LOG_DEBUG << "Collision detected with " << rigidbody->GetParentGameObject().GetName();
         componentContext_.physicsApi_.celarCollisionCallback(collisionSubId);
         collisionSubId.reset();
 
@@ -160,8 +156,7 @@ void ArrowController::subscribeForCollisionDetection()
                                        }
                                    }};
 
-    collisionSubId = componentContext_.physicsApi_.setCollisionCallback(
-        rigidbody->GetId(), cd);
+    collisionSubId = componentContext_.physicsApi_.setCollisionCallback(rigidbody->GetId(), cd);
 }
 
 Rigidbody* ArrowController::findCollidedRigidbody(uint32 rigidbodyId)
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/CharacterController.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/CharacterController.cpp
index b0661290..afcb5820 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/CharacterController.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/CharacterController.cpp
@@ -10,6 +10,7 @@
 #include "GameEngine/Components/Physics/SphereShape.h"
 #include "GameEngine/Objects/GameObject.h"
 #include "GameEngine/Physics/CollisionContactInfo.h"
+#include "Logger/Log.h"
 #include "Serializers/ReadFunctions.h"
 #include "Serializers/Variables.h"
 #include "Serializers/WriteFunctions.h"
@@ -88,7 +89,7 @@ void CharacterController::Init()
 {
     if (isInit)
     {
-        DEBUG_LOG("Already initialized!");
+        LOG_DEBUG << "Already initialized!";
         return;
     }
     rigidbody_ = thisObject_.GetComponent<Rigidbody>();
@@ -98,7 +99,7 @@ void CharacterController::Init()
     {
         auto aimJoint = animator_->GetJoint(aimJointName_);
         if (not aimJoint)
-            ERROR_LOG("Aim joint not found : " + aimJointName_);
+            LOG_ERROR << "Aim joint not found : " << aimJointName_;
 
         impl->aimController_ =
             std::make_unique<AimController>(componentContext_.scene_, thisObject_, componentContext_.inputManager_,
@@ -227,22 +228,18 @@ void CharacterController::Init()
         auto lowerBodyGroupIter = animator_->jointGroups_.find(lowerBodyGroupName);
         if (lowerBodyGroupIter == animator_->jointGroups_.end())
         {
-            // /*DISABLED*/ DEBUG_LOG("lowerBodyGroupName which is : " + lowerBodyGroupName + ", not found in animator,
-            // create empty.");
             animator_->jointGroups_.insert({lowerBodyGroupName, {}});
         }
 
         auto upperBodyGroupIter = animator_->jointGroups_.find(upperBodyGroupName);
         if (upperBodyGroupIter == animator_->jointGroups_.end())
         {
-            // /*DISABLED*/ DEBUG_LOG("upperBodyGroupName which is : " + upperBodyGroupName + ", not found in animator,
-            // create empty");
             animator_->jointGroups_.insert({upperBodyGroupName, {}});
         }
     }
     else
     {
-        WARNING_LOG("Animator or rigidbody_ not exist in object");
+        LOG_WARN << "Animator or rigidbody_ not exist in object";
     }
 
     isInit = true;
@@ -266,7 +263,7 @@ bool isCollision(Physics::IPhysicsApi& physicsApi, const vec3& characterPosition
 
 void CharacterController::PostStart()
 {
-    DEBUG_LOG("PostStart");
+    LOG_DEBUG << "PostStart";
     const auto& scale  = thisObject_.GetWorldTransform().GetScale();
     auto capsuleRadius = shapeSize_ / glm::compMax(vec2(scale.x, scale.z));
 
@@ -282,12 +279,11 @@ void CharacterController::PostStart()
 
                 if (impl->stateMachine_->isCurrentStateOfType<JumpState>())
                 {
-                    DEBUG_LOG("push JumpConfirmEvent");
+                    LOG_DEBUG << "push JumpConfirmEvent";
                     pushEventToQueue(JumpConfirmEvent{});
                     return;
                 }
 
-                DEBUG_LOG("check falling");
                 const auto& characterPosition = thisObject_.GetWorldTransform().GetPosition();
 
                 bool isAwayFromGround{true};
@@ -299,7 +295,8 @@ void CharacterController::PostStart()
                     for (int x = -1; x <= 1; ++x)
                     {
                         if (isCollision(papi, characterPosition,
-                                        vec3(capsuleRadius * static_cast<float>(x), capsuleRadius, capsuleRadius * static_cast<float>(y))))
+                                        vec3(capsuleRadius * static_cast<float>(x), capsuleRadius,
+                                             capsuleRadius * static_cast<float>(y))))
                         {
                             isAwayFromGround = false;
                             break;
@@ -328,14 +325,14 @@ void CharacterController::PostStart()
                     {
                         if (rigidbody_->GetId() == collisionInfo.rigidbodyId1)
                         {
-                            DEBUG_LOG("GroundDetectionEvent collisionWith: " + std::to_string(collisionInfo.rigidbodyId2));
+                            LOG_DEBUG << "GroundDetectionEvent collisionWith: " << collisionInfo.rigidbodyId2;
                             pushEventToFrontQueue(GroundDetectionEvent{});
                             impl->fsmContext->isOnAir = false;
                             break;
                         }
                         else
                         {
-                            DEBUG_LOG("GroundDetectionEvent collisionWith: " + std::to_string(collisionInfo.rigidbodyId1));
+                            LOG_DEBUG << "GroundDetectionEvent collisionWith: " << collisionInfo.rigidbodyId1;
                             pushEventToFrontQueue(GroundDetectionEvent{});
                             impl->fsmContext->isOnAir = false;
                             break;
@@ -383,8 +380,6 @@ void CharacterController::Update()
         std::visit(
             [&](auto statePtr)
             {
-                // // /*DISABLED*/ DEBUG_LOG("[" + typeName(statePtr) + "] Update dt = " +
-                // std::to_string(componentContext_.time_.deltaTime));
                 statePtr->update(componentContext_.time_.deltaTime);
             },
             impl->stateMachine_->currentState);
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/CharacterController.h b/Sources/GameEngine/Components/Controllers/CharacterController/CharacterController.h
index 33f0afc9..86cda58f 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/CharacterController.h
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/CharacterController.h
@@ -40,7 +40,6 @@ public:
     template <typename Event>
     void pushEventToQueue(const Event& event)
     {
-        // /*DISABLED*/ DEBUG_LOG("pushEventToQueue " + typeName<Event>());
         std::lock_guard<std::mutex> lk(eventQueueMutex);
         eventQueue.push_back(event);
     }
@@ -48,7 +47,6 @@ public:
     template <typename Event>
     void pushEventToFrontQueue(const Event& event)
     {
-        // /*DISABLED*/ DEBUG_LOG("pushEventToQueue " + typeName<Event>());
         std::lock_guard<std::mutex> lk(eventQueueMutex);
         eventQueue.push_front(event);
     }
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/MoveController.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/MoveController.cpp
index f13b959e..afb60b72 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/MoveController.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/MoveController.cpp
@@ -76,10 +76,6 @@ bool MoveController::isMoving(Direction dir) const
 
 bool MoveController::isMoveActive() const
 {
-    // /*DISABLED*/ DEBUG_LOG(std::to_string(leftDir));
-    // /*DISABLED*/ DEBUG_LOG(std::to_string(rightDir));
-    // /*DISABLED*/ DEBUG_LOG(std::to_string(forwardDir));
-    // /*DISABLED*/ DEBUG_LOG(std::to_string(backwardDir));
     return leftDir > 0.5f or rightDir > 0.5f or forwardDir > 0.5f or backwardDir > 0.5f;
 }
 
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/AimCrouchRotateState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/AimCrouchRotateState.cpp
index 19eb6268..c0c52fe3 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/AimCrouchRotateState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/AimCrouchRotateState.cpp
@@ -17,7 +17,6 @@ AimCrouchRotateState::AimCrouchRotateState(FsmContext &context)
 
 void AimCrouchRotateState::onEnter(const AimStartEvent &event)
 {
-    // /*DISABLED*/ DEBUG_LOG("onEnter AimStartEvent clip : " + context_.animClipNames.aimIdle);
     AimStateBase::onEnter(event);
     RotateStateBase::update(event);
 }
@@ -39,7 +38,6 @@ void AimCrouchRotateState::onEnter(const RotateRightEvent &event)
 
 void AimCrouchRotateState::onEnter(const RotateTargetEvent &event)
 {
-    // /*DISABLED*/ DEBUG_LOG("AimCrouchRotateState::onEnter(const RotateTargetEvent& event)");
     RotateStateBase::onEnter(event);
 }
 
@@ -73,7 +71,6 @@ void AimCrouchRotateState::update(float dt)
 
 void AimCrouchRotateState::onLeave(const AimStopEvent &event)
 {
-    // /*DISABLED*/ DEBUG_LOG("onLeave(AimStopEvent)");
     AimStateBase::onLeave(event);
 }
 
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/AimRotateState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/AimRotateState.cpp
index 70ec4043..0d026f7b 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/AimRotateState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/AimRotateState.cpp
@@ -17,7 +17,6 @@ AimRotateState::AimRotateState(FsmContext &context)
 
 void AimRotateState::onEnter(const AimStartEvent &event)
 {
-    // /*DISABLED*/ DEBUG_LOG("onEnter AimStartEvent clip : " + context_.animClipNames.aimIdle);
     AimStateBase::onEnter(event);
     RotateStateBase::update(event);
 }
@@ -39,7 +38,6 @@ void AimRotateState::onEnter(const RotateRightEvent &event)
 
 void AimRotateState::onEnter(const RotateTargetEvent &event)
 {
-    // /*DISABLED*/ DEBUG_LOG("AimRotateState::onEnter(const RotateTargetEvent& event)");
     RotateStateBase::onEnter(event);
 }
 
@@ -73,7 +71,6 @@ void AimRotateState::update(float dt)
 
 void AimRotateState::onLeave(const AimStopEvent &event)
 {
-    // /*DISABLED*/ DEBUG_LOG("onLeave(AimStopEvent)");
     AimStateBase::onLeave(event);
 }
 
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/AimStateBase.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/AimStateBase.cpp
index fdf93d82..9d7accc5 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/AimStateBase.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/AimStateBase.cpp
@@ -13,7 +13,6 @@ AimStateBase::AimStateBase(FsmContext &context, const std::optional<std::string>
 }
 void AimStateBase::onEnter(const AimStartEvent &)
 {
-    // /*DISABLED*/ DEBUG_LOG("onEnter AimStartEvent clip : " + context_.animClipNames.aimIdle);
     setAnim();
 }
 }  // namespace Components
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedAttackAndRotateState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedAttackAndRotateState.cpp
index e1fd53a4..f2cce38b 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedAttackAndRotateState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedAttackAndRotateState.cpp
@@ -53,13 +53,11 @@ ArmedAttackAndRotateState::MaybeAttackStates ArmedAttackAndRotateState::handle(c
 
     if (event.stateType == PlayStateType::walk)
     {
-        DEBUG_LOG("PlayStateType::walk");
         return Utils::StateMachine::TransitionTo<ArmedAttackAndWalkAndRotateState>{};
     }
 
     if (event.stateType == PlayStateType::run)
     {
-        DEBUG_LOG("PlayStateType::run");
         return Utils::StateMachine::TransitionTo<ArmedAttackAndRunAndRotateState>{};
     }
 
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedAttackAndRunState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedAttackAndRunState.cpp
index fba927e2..f7f20000 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedAttackAndRunState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedAttackAndRunState.cpp
@@ -27,19 +27,16 @@ ArmedAttackAndRunState::MaybeAttackStates ArmedAttackAndRunState::handle(const C
 {
     if (event.stateType == PlayStateType::idle)
     {
-        DEBUG_LOG("PlayStateType::idle");
         return Utils::StateMachine::TransitionTo<ArmedAttackState>{};
     }
 
     if (event.stateType == PlayStateType::walk)
     {
-        DEBUG_LOG("PlayStateType::walk");
         return Utils::StateMachine::TransitionTo<ArmedAttackAndWalkState>{};
     }
 
     if (event.stateType == PlayStateType::run)
     {
-        DEBUG_LOG("PlayStateType::run");
         return Utils::StateMachine::Update{};
     }
 
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedChangeStateBase.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedChangeStateBase.cpp
index e89a3bd1..c8117096 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedChangeStateBase.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedChangeStateBase.cpp
@@ -20,7 +20,6 @@ ArmedChangeStateBase::ArmedChangeStateBase(FsmContext& context, const std::optio
 void ArmedChangeStateBase::update(const WeaponStateEvent&)
 {
     unsubscribeAll();
-    // /*DISABLED*/ DEBUG_LOG("update(const WeaponStateEvent&)");
     if (context_.weaponArmedChangeState == FsmContext::WeaponArmedChangeState::Equip)
     {
         disarmWeapon();
@@ -41,15 +40,12 @@ void ArmedChangeStateBase::update(const AimStopEvent&)
 }
 void ArmedChangeStateBase::update(const SprintStateChangeEvent&)
 {
-    // /*DISABLED*/ DEBUG_LOG(" update SprintStateChangeEvent context_.sprintEventCalled_ = " +
-    // Utils::BoolToString(context_.sprintEventCalled_));
     context_.sprintEventCalled_ = not context_.sprintEventCalled_;
 }
 void ArmedChangeStateBase::equipWeapon()
 {
     if (not bowPoseUpdater_)
     {
-        // /*DISABLED*/ DEBUG_LOG("not jointPoseUpdater_");
         return;
     }
 
@@ -62,7 +58,6 @@ void ArmedChangeStateBase::disarmWeapon()
 {
     if (not bowPoseUpdater_)
     {
-        // /*DISABLED*/ DEBUG_LOG("not jointPoseUpdater_");
         return;
     }
 
@@ -73,11 +68,6 @@ void ArmedChangeStateBase::disarmWeapon()
 
 void ArmedChangeStateBase::onLeave(const EquipEndStateEvent&)
 {
-    // /*DISABLED*/ DEBUG_LOG("onLeave context_.drawArrowEventCalled_ = " +
-    // Utils::BoolToString(context_.drawArrowEventCalled_));
-    // /*DISABLED*/ DEBUG_LOG("onLeave context_.sprintEventCalled_ = " +
-    // Utils::BoolToString(context_.sprintEventCalled_));
-
     if (context_.drawArrowEventCalled_)
     {
         context_.characterController.pushEventToQueue(DrawArrowEvent{});
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedChangeStateBase.h b/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedChangeStateBase.h
index 0ee4083a..eee13500 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedChangeStateBase.h
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedChangeStateBase.h
@@ -2,6 +2,7 @@
 #include <Types.h>
 
 #include <optional>
+#include <functional>
 
 #include "CharacterControllerCommonDefs.h"
 
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedRunState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedRunState.cpp
index f7e47020..ff19132c 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedRunState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/ArmedRunState.cpp
@@ -22,25 +22,21 @@ ArmedRunState::handle(const AttackEvent &)
 
     if (clips.empty())
     {
-        DEBUG_LOG("x");
         return Utils::StateMachine::Nothing{};
     }
 
     if (clips.front().stateType == PlayStateType::idle)
     {
-        DEBUG_LOG("idle");
         return Utils::StateMachine::TransitionTo<ArmedAttackState>{};
     }
 
     if (clips.front().stateType == PlayStateType::walk)
     {
-        DEBUG_LOG("walk");
         return Utils::StateMachine::TransitionTo<ArmedAttackAndWalkState>{};
     }
 
     if (clips.front().stateType == PlayStateType::run)
     {
-        DEBUG_LOG("run");
         return Utils::StateMachine::TransitionTo<ArmedAttackAndRunState>{};
     }
 
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/AttackStateBase.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/AttackStateBase.cpp
index 414ef18f..ad7eb39a 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/AttackStateBase.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/AttackStateBase.cpp
@@ -80,7 +80,6 @@ void AttackStateBase::onEnter(const EndMoveRightEvent &)
 
 void AttackStateBase::onEnter(const EndRotationEvent &)
 {
-    DEBUG_LOG("EndRotationEvent");
     context_.animator.StopAnimation(context_.lowerBodyGroupName);
 }
 
@@ -135,7 +134,6 @@ void AttackStateBase::onLeave()
 }
 void AttackStateBase::onClipEnd()
 {
-    DEBUG_LOG("onClipEnd sequenceSize=" + std::to_string(context_.attackStatesContext.sequenceSize));
     if (context_.attackStatesContext.sequenceSize == context_.attackStatesContext.currentAnimation)
     {
         context_.characterController.pushEventToQueue(EndAttackEvent{});
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/BaseState.h b/Sources/GameEngine/Components/Controllers/CharacterController/States/BaseState.h
index b7316720..de7bf35b 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/BaseState.h
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/BaseState.h
@@ -17,14 +17,11 @@ public:
     template <typename Event>
     void pushEventToQueue(const Event& event)
     {
-        DEBUG_LOG("pushEventToQueue: " + typeName<Event>());
         queue_.push_back(event);
     }
     template <typename Event>
     void removeEventFromQueue(const Event& event)
     {
-        DEBUG_LOG("removeEventFromQueue: " + typeName<Event>());
-
         queue_.erase(
             std::remove_if(queue_.begin(), queue_.end(), [](const auto& event) { return std::holds_alternative<Event>(event); }));
     }
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/CrouchWalkAndRotateArmedChangeState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/CrouchWalkAndRotateArmedChangeState.cpp
index 84dbe784..f9810524 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/CrouchWalkAndRotateArmedChangeState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/CrouchWalkAndRotateArmedChangeState.cpp
@@ -17,10 +17,8 @@ CrouchWalkAndRotateArmedChangeState::CrouchWalkAndRotateArmedChangeState(FsmCont
 }
 void CrouchWalkAndRotateArmedChangeState::onEnter()
 {
-    // /*DISABLED*/ DEBUG_LOG("onEnter ");
     if (context_.weaponArmedChangeState == FsmContext::WeaponArmedChangeState::Equip)
     {
-        // /*DISABLED*/ DEBUG_LOG("onEnter 1");
         MoveStateBase::changeAnimationClips(context_.animClipNames.armed.movement.crouch);
         MoveStateBase::setCurrentAnimIfNeeded();
     }
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/DisarmedAttackAndRotateState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/DisarmedAttackAndRotateState.cpp
index 8ab4be38..ac0db1c0 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/DisarmedAttackAndRotateState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/DisarmedAttackAndRotateState.cpp
@@ -53,13 +53,11 @@ DisarmedAttackAndRotateState::MaybeAttackStates DisarmedAttackAndRotateState::ha
 
     if (event.stateType == PlayStateType::walk)
     {
-        DEBUG_LOG("PlayStateType::walk");
         return Utils::StateMachine::TransitionTo<DisarmedAttackAndWalkAndRotateState>{};
     }
 
     if (event.stateType == PlayStateType::run)
     {
-        DEBUG_LOG("PlayStateType::run");
         return Utils::StateMachine::TransitionTo<DisarmedAttackAndRunAndRotateState>{};
     }
 
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/DisarmedAttackAndRunState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/DisarmedAttackAndRunState.cpp
index ca64f28c..828ee876 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/DisarmedAttackAndRunState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/DisarmedAttackAndRunState.cpp
@@ -18,19 +18,16 @@ DisarmedAttackAndRunState::MaybeAttackStates DisarmedAttackAndRunState::handle(c
 {
     if (event.stateType == PlayStateType::idle)
     {
-        DEBUG_LOG("PlayStateType::idle");
         return Utils::StateMachine::TransitionTo<DisarmedAttackState>{};
     }
 
     if (event.stateType == PlayStateType::walk)
     {
-        DEBUG_LOG("PlayStateType::walk");
         return Utils::StateMachine::TransitionTo<DisarmedAttackAndWalkState>{};
     }
 
     if (event.stateType == PlayStateType::run)
     {
-        DEBUG_LOG("PlayStateType::run");
         return Utils::StateMachine::Update{};
     }
 
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/DodgeState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/DodgeState.cpp
index 8f9be8f6..1a274e21 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/DodgeState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/DodgeState.cpp
@@ -22,25 +22,21 @@ void DodgeState::onEnter(const DodgeDiveEvent &event)
 
 void DodgeState::onEnter(const DodgeForwardEvent &e)
 {
-    DEBUG_LOG("perform DodgeForwardEvent: " + std::to_string(e.power));
     setAnimAndSubscribeForEnd(context_.animClipNames.disarmed.dodge.forward);
 }
 
 void DodgeState::onEnter(const DodgeBackwardEvent &e)
 {
-    DEBUG_LOG("perform DodgeBackwardEvent: " + std::to_string(e.power));
     setAnimAndSubscribeForEnd(context_.animClipNames.disarmed.dodge.backward);
 }
 
 void DodgeState::onEnter(const DodgeRightEvent &e)
 {
-    DEBUG_LOG("perform DodgeRightEvent: " + std::to_string(e.power));
     setAnimAndSubscribeForEnd(context_.animClipNames.disarmed.dodge.right);
 }
 
 void DodgeState::onEnter(const DodgeLeftEvent &e)
 {
-    DEBUG_LOG("perform DodgeLeftEvent: " + std::to_string(e.power));
     setAnimAndSubscribeForEnd(context_.animClipNames.disarmed.dodge.left);
 }
 
@@ -51,7 +47,6 @@ void DodgeState::onEnter(DisarmedFallingState &)
 
 void DodgeState::onLeave(const DodgeEndEvent &)
 {
-    DEBUG_LOG("perform DodgeEndEvent");
     flushEvents();
 }
 
@@ -59,7 +54,6 @@ void DodgeState::setAnimAndSubscribeForEnd(const std::string &animName)
 {
     if (dodgeAnimSubId)
     {
-        DEBUG_LOG("Dodge already performed!");
         return;
     }
 
@@ -77,7 +71,6 @@ void DodgeState::setAnim(const std::string &animName)
 {
     if (not animName.empty())
     {
-        DEBUG_LOG(animName);
         const auto &currentClips = context_.animator.getCurrentAnimationName();
 
         auto iter = std::find(currentClips.begin(), currentClips.end(), animName);
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/DrawArrowStateBase.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/DrawArrowStateBase.cpp
index beef3d0e..97e1e638 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/DrawArrowStateBase.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/DrawArrowStateBase.cpp
@@ -17,8 +17,6 @@ DrawArrowStateBase::DrawArrowStateBase(FsmContext &context, const std::optional<
 
 void DrawArrowStateBase::onEnter(const DrawArrowEvent &)
 {
-    // /*DISABLED*/ DEBUG_LOG("On enter DrawArrowEvent clip: " + context_.animClipNames.drawArrow);
-
     onEnter(ReloadArrowEvent{});
 
     if (thridPersonCameraComponent_)
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/FallingStateBase.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/FallingStateBase.cpp
index 77a453e1..9862b5ac 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/FallingStateBase.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/FallingStateBase.cpp
@@ -5,6 +5,7 @@
 #include "GameEngine/Components/Animation/Animator.h"
 #include "GameEngine/Components/Physics/CapsuleShape.h"
 #include "GameEngine/Physics/CollisionContactInfo.h"
+#include "Logger/Log.h"
 
 
 namespace GameEngine
@@ -25,17 +26,15 @@ void FallingStateBase::onEnter(const StartFallingEvent &)
     }
     else
     {
-        DEBUG_LOG("Falling anim name is empty!");
+        LOG_ERROR << "Falling anim name is empty!";
     }
 }
 
 DisarmedFallingState::StateAfterLand FallingStateBase::handle(const GroundDetectionEvent &)
 {
-    DEBUG_LOG("handle(const EndFallingEvent &)");
     bool isNotDead{true};
     if (isNotDead)
     {
-        // return Utils::StateMachine::TransitionTo<DisarmedIdleState>{};
         return Utils::StateMachine::BackToPreviousState{};
     }
     return Utils::StateMachine::TransitionTo<DeathState>{};
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/IdleArmedChangeState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/IdleArmedChangeState.cpp
index 5ad534fc..588e54e0 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/IdleArmedChangeState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/IdleArmedChangeState.cpp
@@ -31,7 +31,6 @@ void IdleArmedChangeState::onEnter(DisarmedAttackState &, const DrawArrowEvent &
 }
 void IdleArmedChangeState::onEnter(DisarmedIdleState &, const WeaponStateEvent &)
 {
-    // /*DISABLED*/ DEBUG_LOG("onEnter(DisarmedIdleState&, const WeaponStateEvent &)");
     ArmedChangeStateBase::equipWeapon();
 }
 void IdleArmedChangeState::onEnter(DisarmedAttackState &, const WeaponStateEvent &)
@@ -40,7 +39,6 @@ void IdleArmedChangeState::onEnter(DisarmedAttackState &, const WeaponStateEvent
 }
 void IdleArmedChangeState::onEnter(ArmedIdleState &, const WeaponStateEvent &)
 {
-    // /*DISABLED*/ DEBUG_LOG("onEnter(ArmedIdleState&, const WeaponStateEvent &)");
     ArmedChangeStateBase::disarmWeapon();
 }
 void IdleArmedChangeState::onEnter(ArmedAttackState &, const WeaponStateEvent &)
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/IdleCrouchArmedChangeState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/IdleCrouchArmedChangeState.cpp
index 98d6a3e0..9eecc751 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/IdleCrouchArmedChangeState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/IdleCrouchArmedChangeState.cpp
@@ -27,14 +27,12 @@ void IdleCrouchArmedChangeState::onEnter(IdleArmedChangeState &, const CrouchCha
 }
 void IdleCrouchArmedChangeState::onEnter(DisarmedIdleCrouchState &, const WeaponStateEvent &)
 {
-    // /*DISABLED*/ DEBUG_LOG("onEnter(DisarmedIdleCrouchState&, const WeaponStateEvent &)");
     idleAnimName_ = context_.animClipNames.armed.posture.crouched.idle;
     setAnim();
     ArmedChangeStateBase::equipWeapon();
 }
 void IdleCrouchArmedChangeState::onEnter(ArmedIdleCrouchState &, const WeaponStateEvent &)
 {
-    // /*DISABLED*/ DEBUG_LOG("onEnter(ArmedIdleCrouchState&, const WeaponStateEvent &)");
     idleAnimName_ = context_.animClipNames.disarmed.posture.crouched.idle;
     setAnim();
     ArmedChangeStateBase::disarmWeapon();
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/JumpState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/JumpState.cpp
index 93887ec3..08add9ef 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/JumpState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/JumpState.cpp
@@ -22,7 +22,6 @@ JumpState::JumpState(FsmContext &context)
 
 void JumpState::onEnter(const JumpEvent &event)
 {
-    DEBUG_LOG("perform Jump");
     auto velocity = context_.rigidbody.GetVelocity();
     velocity.y += event.power;
     context_.rigidbody.SetVelocity(velocity);
@@ -55,7 +54,6 @@ void JumpState::update(float deltaTime)
         jumpAttemptTimer = jumpAttemptTimer.value() - deltaTime;
         if (jumpAttemptTimer <= 0.f)
         {
-            DEBUG_LOG("JumpTriger timeout");
             context_.characterController.pushEventToFrontQueue(GroundDetectionEvent{});
             context_.isOnAir = false;
             jumpAttemptTimer.reset();
@@ -65,7 +63,6 @@ void JumpState::update(float deltaTime)
 
 void JumpState::onLeave(const GroundDetectionEvent &)
 {
-    DEBUG_LOG("perform GroundDetectionEvent");
     flushEvents();
 }
 
@@ -73,7 +70,6 @@ void JumpState::setAnim()
 {
     if (not animName.empty())
     {
-        DEBUG_LOG(animName);
         const auto &currentClips = context_.animator.getCurrentAnimationName();
 
         auto iter = std::find(currentClips.begin(), currentClips.end(), animName);
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/MoveStateBase.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/MoveStateBase.cpp
index cc917607..194ac073 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/MoveStateBase.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/MoveStateBase.cpp
@@ -4,6 +4,7 @@
 #include <Types.h>
 
 #include "../FsmContext.h"
+#include "Logger/Log.h"
 
 namespace GameEngine
 {
@@ -34,7 +35,6 @@ void MoveStateBase::onEnter(const CrouchChangeStateEvent &)
 
 void MoveStateBase::onEnter(const SprintStateChangeEvent &)
 {
-    // /*DISABLED*/ DEBUG_LOG("SprintStateChangeEvent");
 }
 
 void MoveStateBase::onEnter(const MoveEvent &)
@@ -70,7 +70,6 @@ void MoveStateBase::onEnter(const WalkChangeStateEvent &)
 
 void MoveStateBase::postEnter()
 {
-    // /*DISABLED*/ DEBUG_LOG("postEnter");
     setCurrentAnimIfNeeded();
 }
 
@@ -117,7 +116,6 @@ bool MoveStateBase::shouldLeaveAndSetCurrAnimIfNot()
 {
     if (context_.moveController.isMoveActive())
     {
-        // /*DISABLED*/ DEBUG_LOG("shouldLeaveAndSetCurrAnimIfNot");
         setCurrentAnimIfNeeded();
         return false;
     }
@@ -150,10 +148,8 @@ void MoveStateBase::update(const SprintStateChangeEvent &event)
 
 void MoveStateBase::update(float dt)
 {
-    // /*DISABLED*/ DEBUG_LOG("Update");
     if (not context_.animator.isAnimationPlaying(currentAnimName_))
     {
-        // // /*DISABLED*/ DEBUG_LOG("Forward not ready");
         return;
     }
 
@@ -162,7 +158,6 @@ void MoveStateBase::update(float dt)
 
 void MoveStateBase::postUpdate()
 {
-    // /*DISABLED*/ DEBUG_LOG("postUpdate");
     setCurrentAnimIfNeeded();
 }
 
@@ -203,11 +198,10 @@ void MoveStateBase::setAnim(const std::string &clipName)
     auto iter              = std::find(currentAnimations.begin(), currentAnimations.end(), clipName);
     if (iter != currentAnimations.end())
     {
-        DEBUG_LOG("current is playing");
+        LOG_WARN << "current is playing";
         return;
     }
 
-    // // /*DISABLED*/ DEBUG_LOG("SetAnim : " + clipName + " jointGroup=" + std::to_string(jointGroupName_));
     context_.animator.ChangeAnimation(clipName, Animator::AnimationChangeType::smooth, PlayDirection::forward, jointGroupName_);
 }
 
@@ -215,7 +209,6 @@ void MoveStateBase::moveRigidbody()
 {
     if (not context_.moveController.isMoving())
     {
-        // // /*DISABLED*/ DEBUG_LOG("Not moving, return");
         return;
     }
 
@@ -231,9 +224,6 @@ void MoveStateBase::moveRigidbody()
     auto &rigidbody     = context_.rigidbody;
     auto targetVelocity = rigidbody.GetRotation() * moveDirection * moveSpeed;
     targetVelocity.y    = rigidbody.GetVelocity().y;
-    // /*DISABLED*/ DEBUG_LOG("moveDirection : " + std::to_string(moveDirection));
-    // /*DISABLED*/ DEBUG_LOG("moveSpeed : " + std::to_string(moveSpeed));
-    // /*DISABLED*/ DEBUG_LOG("targetVelocity : " + std::to_string(targetVelocity));
     rigidbody.SetVelocity(targetVelocity);
 }
 
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/RecoilStateBase.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/RecoilStateBase.cpp
index e9fb2411..9a425d25 100755
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/RecoilStateBase.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/RecoilStateBase.cpp
@@ -17,8 +17,6 @@ RecoilStateBase::RecoilStateBase(FsmContext &context, const std::optional<std::s
 
 void RecoilStateBase::onEnter(const AttackEvent &)
 {
-    // /*DISABLED*/ DEBUG_LOG("On enter DrawArrowEvent clip: " + animName_);
-
     if (animationClip.empty())
     {
         return;
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/RotateStateBase.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/RotateStateBase.cpp
index 81ff37fd..4d54f7af 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/RotateStateBase.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/RotateStateBase.cpp
@@ -62,7 +62,6 @@ void RotateStateBase::onEnter(const RotateTargetEvent &event)
 
 void RotateStateBase::onEnter(const EndForwardMoveEvent &)
 {
-    DEBUG_LOG("EndForwardMoveEvent");
     setCurrentAnim();
 }
 
@@ -105,7 +104,6 @@ void RotateStateBase::update(float deltaTime)
         auto rotation =
             context_.rigidbody.GetRotation() *
             glm::angleAxis(glm::radians(context_.rotateStateData_.rotateSpeed_ * deltaTime), glm::vec3(0.f, 1.f, 0.f));
-        // /*DISABLED*/  DEBUG_LOG("newRotation " + std::to_string(rotation));
         context_.rigidbody.SetRotation(rotation);
     }
     else
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/RotatingMoveState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/RotatingMoveState.cpp
index c16869e1..ca5a1c08 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/RotatingMoveState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/RotatingMoveState.cpp
@@ -20,7 +20,6 @@ RotatingMoveState::RotatingMoveState(FsmContext &context, const std::optional<st
 
 void RotatingMoveState::update(float dt)
 {
-    // /*DISABLED*/ DEBUG_LOG("Update");
     moveCameraRotateRigidbody();
 
     if (context_.progress < 1.f)
@@ -52,21 +51,15 @@ void RotatingMoveState::update(const MoveRightEvent &event)
 
 void RotatingMoveState::postEnter()
 {
-    // /*DISABLED*/
-    DEBUG_LOG("postEnter set: " + animationClips_.forward);
-    // prevent to call postEnter from MoveStateBase
     setTargetAngle();
     setAnim(animationClips_.forward);
 }
 
 void RotatingMoveState::postUpdate()
 {
-    // /*DISABLED*/ DEBUG_LOG("postUpdate");
     setTargetAngle();
     if (not context_.moveController.isMoving())
     {
-        // /*DISABLED*/
-        DEBUG_LOG("onMoveInactivity");
         onMoveInactivity();
     }
 }
@@ -100,15 +93,10 @@ void RotatingMoveState::setCharacterRotation(const mat4 &matrixRotation)
     {
         rj->additionalUserMofiyTransform.set(matrixRotation);
     }
-    else
-    {
-        // /*DISABLED*/ DEBUG_LOG("not setCharacterRotation");
-    }
 }
 
 void RotatingMoveState::setTargetAngle()
 {
-    // /*DISABLED*/ DEBUG_LOG("Current dir : " + std::to_string(context_.moveController.getCurrentDir()));
     context_.progress    = 0.f;
     context_.sourceAngle = context_.currentAngle;
     context_.targetAngle = glm::angleAxis(
@@ -119,9 +107,7 @@ void RotatingMoveState::applyCurrentRotation()
 {
     if (context_.moveController.isMoving())
     {
-        // /*DISABLED*/ DEBUG_LOG("Progress " + std::to_string(context_.progress));
         auto progress = context_.progress > 1.f ? 1.f : context_.progress;
-        // /*DISABLED*/ DEBUG_LOG("Progress2 " + std::to_string(progress));
         context_.currentAngle = glm::slerp(context_.currentAngle, context_.targetAngle, progress);
         setCharacterRotation(glm::mat4_cast(context_.currentAngle));
 
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/RunAndRotateArmedChangeState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/RunAndRotateArmedChangeState.cpp
index 656208f7..dc712241 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/RunAndRotateArmedChangeState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/RunAndRotateArmedChangeState.cpp
@@ -17,10 +17,8 @@ RunAndRotateArmedChangeState::RunAndRotateArmedChangeState(FsmContext &context)
 }
 void RunAndRotateArmedChangeState::onEnter()
 {
-    // /*DISABLED*/ DEBUG_LOG("onEnter ");
     if (context_.weaponArmedChangeState == FsmContext::WeaponArmedChangeState::Equip)
     {
-        // /*DISABLED*/ DEBUG_LOG("onEnter 1");
         MoveStateBase::changeAnimationClips(context_.animClipNames.armed.movement.run);
         MoveStateBase::setCurrentAnimIfNeeded();
     }
diff --git a/Sources/GameEngine/Components/Controllers/CharacterController/States/RunArmedChangeState.cpp b/Sources/GameEngine/Components/Controllers/CharacterController/States/RunArmedChangeState.cpp
index 4ebd3b37..ac975f9f 100644
--- a/Sources/GameEngine/Components/Controllers/CharacterController/States/RunArmedChangeState.cpp
+++ b/Sources/GameEngine/Components/Controllers/CharacterController/States/RunArmedChangeState.cpp
@@ -16,7 +16,6 @@ RunArmedChangeState::RunArmedChangeState(FsmContext& context)
 
 void RunArmedChangeState::onEnter()
 {
-    // /*DISABLED*/ DEBUG_LOG("RunArmedChangeState onEnter");
     if (context_.weaponArmedChangeState == FsmContext::WeaponArmedChangeState::Equip)
     {
         MoveStateBase::changeAnimationClips(context_.animClipNames.armed.movement.run);
@@ -25,7 +24,6 @@ void RunArmedChangeState::onEnter()
     {
         MoveStateBase::changeAnimationClips(context_.animClipNames.disarmed.movement.run);
     }
-    // /*DISABLED*/ DEBUG_LOG("End on enter");
 }
 
 void RunArmedChangeState::onEnter(const SprintStateChangeEvent& event)
diff --git a/Sources/GameEngine/Components/Controllers/EnemyController.cpp b/Sources/GameEngine/Components/Controllers/EnemyController.cpp
index f18d5623..7b2f314e 100644
--- a/Sources/GameEngine/Components/Controllers/EnemyController.cpp
+++ b/Sources/GameEngine/Components/Controllers/EnemyController.cpp
@@ -68,7 +68,6 @@ void EnemyController::Update()
     {
         if (distance < (enemy_->characterStatistic().attackRange + characterController_->getShapeSize()))
         {
-            DEBUG_LOG("In attack range");
             characterController_->pushEventToQueue(EndForwardMoveEvent{});
             //characterController_->pushEventToQueue(AttackEvent{});
         }
@@ -95,9 +94,6 @@ void EnemyController::Update()
     characterController_->pushEventToQueue(MoveForwardEvent{});
 
     auto distanceToPoint = glm::length(vectorToTarget);
-    //DEBUG_LOG("Enemy pos: " + std::to_string(thisObject_.GetWorldTransform().GetPosition()) +
-    //          ", freeWalkingTargetPoint=" + std::to_string(freeWalkingTargetPoint) +
-    //          ", distance: " + std::to_string(distanceToPoint));
 
     if (distanceToPoint < 5.f)
     {
diff --git a/Sources/GameEngine/Components/Physics/BoxShape.cpp b/Sources/GameEngine/Components/Physics/BoxShape.cpp
index cce4ebd3..3b5fb3d4 100644
--- a/Sources/GameEngine/Components/Physics/BoxShape.cpp
+++ b/Sources/GameEngine/Components/Physics/BoxShape.cpp
@@ -23,7 +23,6 @@ void BoxShape::ReqisterFunctions()
 }
 void BoxShape::OnAwake()
 {
-    DEBUG_LOG("CreateBoxColider");
     collisionShapeId_ =
         componentContext_.physicsApi_.CreateBoxColider(positionOffset, thisObject_.GetWorldTransform().GetScale(), size / 2.f);
 }
diff --git a/Sources/GameEngine/Components/Physics/CapsuleShape.cpp b/Sources/GameEngine/Components/Physics/CapsuleShape.cpp
index 9dc1765e..174953cf 100644
--- a/Sources/GameEngine/Components/Physics/CapsuleShape.cpp
+++ b/Sources/GameEngine/Components/Physics/CapsuleShape.cpp
@@ -34,8 +34,6 @@ void CapsuleShape::OnAwake()
     collisionShapeId_ = componentContext_.physicsApi_.CreateCapsuleColider(
         positionOffset, thisObject_.GetWorldTransform().GetScale(), radius, height);
 
-    DEBUG_LOG(thisObject_.GetName() + ", offset : " + std::to_string(positionOffset));
-
     if (collisionShapeId_)
     {
         setScale(thisObject_.GetWorldTransform().GetScale());
diff --git a/Sources/GameEngine/Components/Physics/MeshShape.cpp b/Sources/GameEngine/Components/Physics/MeshShape.cpp
index b049866b..f32e3df1 100644
--- a/Sources/GameEngine/Components/Physics/MeshShape.cpp
+++ b/Sources/GameEngine/Components/Physics/MeshShape.cpp
@@ -43,7 +43,6 @@ void MeshShape::OnAwake()
 {
     if (not model_)
     {
-        DEBUG_LOG("No dedicated model, try get from RendererComponent");
         auto renderer = thisObject_.GetComponent<RendererComponent>();
 
         if (not renderer)
@@ -54,10 +53,9 @@ void MeshShape::OnAwake()
 
     if (not model_)
     {
-        DEBUG_LOG("Model from RendererComponent also not found return");
+        LOG_ERROR << "Model from RendererComponent also not found return";
         return;
     }
-    DEBUG_LOG("Model file used : " + model_->GetFile().GetFilename());
 
     auto scale = calculateScale(thisObject_.GetWorldTransform().GetScale());
     if (auto modelRawData = model_->getModelRawData())
@@ -124,7 +122,7 @@ void MeshShape::registerReadFunctions()
             if (not component->modelFile.empty())
             {
                 component->modelFile = modelFileName;
-                DEBUG_LOG("Set collider model :" + component->modelFile.GetFilename());
+                LOG_DEBUG << "Set collider model :" << component->modelFile.GetFilename();
                 component->SetModel(component->modelFile);
             }
 
diff --git a/Sources/GameEngine/Components/Physics/Rigidbody.cpp b/Sources/GameEngine/Components/Physics/Rigidbody.cpp
index 5a7894e6..92989349 100644
--- a/Sources/GameEngine/Components/Physics/Rigidbody.cpp
+++ b/Sources/GameEngine/Components/Physics/Rigidbody.cpp
@@ -66,7 +66,7 @@ void Rigidbody::OnStart()
 
     if (not collisionShape_)
     {
-        ERROR_LOG("Can not create Rigidbody without shape.");
+        LOG_ERROR << "Can not create Rigidbody without shape.";
         return;
     }
 
@@ -74,7 +74,7 @@ void Rigidbody::OnStart()
 
     if (not maybeShapeId)
     {
-        ERROR_LOG("Shape not initilized!");
+        LOG_ERROR << "Shape not initilized!";
         return;
     }
 
@@ -82,7 +82,7 @@ void Rigidbody::OnStart()
                                                                  updateRigidbodyOnTransformChange_);
     if (not rigidBodyId_)
     {
-        ERROR_LOG("create rigidbody error.");
+        LOG_ERROR << "create rigidbody error.";
         return;
     }
 
@@ -106,7 +106,7 @@ void Rigidbody::OnStart()
         f();
     }
 
-    DEBUG_LOG("[" + thisObject_.GetName() + "] Rigidbody created. Id : " + std::to_string(rigidBodyId_));
+    LOG_DEBUG << "[" << thisObject_.GetName() << "] Rigidbody created. Id : " << rigidBodyId_;
 }
 void Rigidbody::ReqisterFunctions()
 {
@@ -357,7 +357,7 @@ CollisionShape* Rigidbody::GetCollisionShape()
     auto shapeTypeIter = nameToTypeMap_.find(collisionShapeName);
     if (shapeTypeIter == nameToTypeMap_.end())
     {
-        ERROR_LOG("Shape name " + collisionShapeName + " not found in nameToTypeMap");
+        LOG_ERROR << "Shape name " << collisionShapeName << " not found in nameToTypeMap";
         return nullptr;
     }
 
@@ -373,7 +373,7 @@ CollisionShape* Rigidbody::GetCollisionShape()
         return pair.second;
     }
 
-    ERROR_LOG(thisObject_.GetName() + ". Shape type (" + collisionShapeName + ") is not found.");
+    LOG_ERROR << thisObject_.GetName() << ". Shape type (" << collisionShapeName << ") is not found.";
     return nullptr;
 }
 void Rigidbody::registerReadFunctions()
diff --git a/Sources/GameEngine/Components/Physics/Terrain/TerrainShape.cpp b/Sources/GameEngine/Components/Physics/Terrain/TerrainShape.cpp
index 8d8ef3bb..6928c07e 100644
--- a/Sources/GameEngine/Components/Physics/Terrain/TerrainShape.cpp
+++ b/Sources/GameEngine/Components/Physics/Terrain/TerrainShape.cpp
@@ -103,14 +103,13 @@ void TerrainShape::LoadHeightMapIfSet()
     }
     else
     {
-        ERROR_LOG("terrainHeightGetter creating error! terrainRendererComponent not found.");
+        LOG_ERROR << "terrainHeightGetter creating error! terrainRendererComponent not found.";
     }
 }
 void TerrainShape::create()
 {
     if (not heightMap_)
     {
-        DEBUG_LOG("GetHeightmap from renderer component");
         terrainRendererComponent_ = thisObject_.GetComponent<TerrainRendererComponent>();
         if (terrainRendererComponent_)
         {
@@ -125,7 +124,7 @@ void TerrainShape::create()
     }
     else
     {
-        ERROR_LOG("Collision shape create error, heightMap not set ");
+        LOG_ERROR << "Collision shape create error, heightMap not set ";
     }
 }
 void TerrainShape::registerReadFunctions()
diff --git a/Sources/GameEngine/Components/Renderer/Entity/RendererComponent.cpp b/Sources/GameEngine/Components/Renderer/Entity/RendererComponent.cpp
index beb10f9b..3d45d743 100644
--- a/Sources/GameEngine/Components/Renderer/Entity/RendererComponent.cpp
+++ b/Sources/GameEngine/Components/Renderer/Entity/RendererComponent.cpp
@@ -7,6 +7,7 @@
 #include "GameEngine/Resources/GpuResourceLoader.h"
 #include "GameEngine/Resources/ResourceManager.h"
 #include "GameEngine/Resources/ShaderBuffers/ShaderBuffersBindLocations.h"
+#include "Logger/Log.h"
 
 namespace GameEngine
 {
@@ -92,7 +93,7 @@ void RendererComponent::init()
         if (file.empty())
             continue;
 
-        DEBUG_LOG(thisObject_.GetName() + " Load model: " + file.GetBaseName());
+        LOG_DEBUG << thisObject_.GetName() << " Load model: " << file.GetBaseName();
         auto model = componentContext_.resourceManager_.LoadModel(file, loadingParameters_);
 
         if (model)
@@ -115,7 +116,7 @@ void RendererComponent::init()
         }
         else
         {
-            ERROR_LOG("nullptr");
+            LOG_ERROR << "nullptr";
         }
     }
     if (atLeastOneModelIsCreated)
@@ -178,7 +179,7 @@ void RendererComponent::CreatePerObjectUpdateBuffer(const Mesh& mesh)
     auto iter = perObjectUpdateBuffer_.find(mesh.GetGpuObjectId());
     if (iter != perObjectUpdateBuffer_.end())
     {
-        ERROR_LOG("perObjectUpdateBuffer object already exist!");
+        LOG_ERROR << "perObjectUpdateBuffer object already exist!";
         return;
     }
 
@@ -197,7 +198,7 @@ void RendererComponent::CreatePerObjectConstantsBuffer(const Mesh& mesh)
     auto iter = perObjectConstantsBuffer_.find(mesh.GetGpuObjectId());
     if (iter != perObjectConstantsBuffer_.end())
     {
-        ERROR_LOG("perObjectConstantsBuffer object already exist!");
+        LOG_ERROR << "perObjectConstantsBuffer object already exist!";
         return;
     }
 
@@ -235,12 +236,11 @@ void RendererComponent::UpdateBuffers()
                 const mat4 transformMatix             = thisObject_.GetWorldTransform().GetMatrix() * mesh.GetMeshTransform();
                 buffer.GetData().TransformationMatrix = componentContext_.graphicsApi_.PrepareMatrixToLoad(transformMatix);
                 buffer.UpdateGpuPass();
-                // componentContext_.gpuResourceLoader_.AddObjectToUpdateGpuPass(buffer);
+                componentContext_.gpuResourceLoader_.AddObjectToUpdateGpuPass(buffer);
             }
             else
             {
-                ERROR_LOG("perObjectUpdateBuffer not found! : " + thisObject_.GetName() +
-                          ", id : " + std::to_string(thisObject_.GetId()));
+                LOG_ERROR << "perObjectUpdateBuffer not found! : " << thisObject_.GetName() << ", id : " << thisObject_.GetId();
             }
         }
     }
@@ -267,8 +267,7 @@ void RendererComponent::useArmature(bool value)
             }
             else
             {
-                ERROR_LOG("perObjectUpdateBuffer not found! : " + thisObject_.GetName() +
-                          ", id : " + std::to_string(thisObject_.GetId()));
+                LOG_ERROR << "perObjectUpdateBuffer not found! : " << thisObject_.GetName() << ", id : " << thisObject_.GetId();
             }
         }
     }
@@ -294,7 +293,7 @@ void RendererComponent::registerReadFunctions()
             }
             catch (...)
             {
-                ERROR_LOG("SetTextureIndex index error");
+                LOG_ERROR << "SetTextureIndex index error";
             }
         }
 
@@ -324,27 +323,24 @@ void RendererComponent::registerReadFunctions()
                         auto lodInt          = std::stoi(lodNode->value_);
                         if (lodInt == 0)
                         {
-                            DEBUG_LOG(filename);
                             component->fileName_LOD1 = filename;
                         }
                         else if (lodInt == 1)
                         {
-                            DEBUG_LOG(filename);
                             component->fileName_LOD2 = filename;
                         }
                         else if (lodInt == 2)
                         {
-                            DEBUG_LOG(filename);
                             component->fileName_LOD3 = filename;
                         }
                         else
                         {
-                            DEBUG_LOG("LOD \"" + std::to_string(lodInt) + "\" is out of range. Correct range is 0-2");
+                            LOG_ERROR << "LOD \"" + std::to_string(lodInt) + "\" is out of range. Correct range is 0-2";
                         }
                     }
                     catch (...)
                     {
-                        ERROR_LOG("Set model filenames error");
+                        LOG_ERROR << "Set model filenames error";
                     }
                 }
             }
diff --git a/Sources/GameEngine/Components/Renderer/Grass/GrassRendererComponent.cpp b/Sources/GameEngine/Components/Renderer/Grass/GrassRendererComponent.cpp
index 4c81724e..7a103f68 100644
--- a/Sources/GameEngine/Components/Renderer/Grass/GrassRendererComponent.cpp
+++ b/Sources/GameEngine/Components/Renderer/Grass/GrassRendererComponent.cpp
@@ -139,7 +139,7 @@ void GrassRendererComponent::CreateModelAndSubscribe()
             }
             else
             {
-                ERROR_LOG("Model creation error.");
+                LOG_ERROR << "Model creation error.";
             }
         }
     }
@@ -178,8 +178,6 @@ std::vector<Mesh> GrassRendererComponent::CreateGrassMeshes(const Material& mate
                 mesh = &yMeshBox.at(zIndex);
                 vec3 bbMin(xIndex * BOX_SIZE, yIndex * BOX_SIZE, zIndex * BOX_SIZE);
                 vec3 bbMax((xIndex + 1) * BOX_SIZE, (yIndex + 1) * BOX_SIZE, (zIndex + 1) * BOX_SIZE);
-                DEBUG_LOG("bbMin : " + std::to_string(bbMin));
-                DEBUG_LOG("bbMax : " + std::to_string(bbMax));
                 BoundingBox boundingBox(bbMin * 1.1f, bbMax * 1.1f);
                 mesh->setBoundingBox(boundingBox);
             }
@@ -211,12 +209,10 @@ std::vector<Mesh> GrassRendererComponent::CreateGrassMeshes(const Material& mate
             {
                 for (auto& [_, mesh] : zIndexMap)
                 {
-                    DEBUG_LOG("Mesh positions size : " + std::to_string(mesh.GetMeshDataRef().positions_.size() / 3));
                     result.push_back(std::move(mesh));
                 }
             }
         }
-        DEBUG_LOG("Meshes size : " + std::to_string(result.size()));
     }
     else
     {
diff --git a/Sources/GameEngine/Components/Renderer/SkyBox/SkyBoxComponent.cpp b/Sources/GameEngine/Components/Renderer/SkyBox/SkyBoxComponent.cpp
index e703d8e0..8f10dd9e 100644
--- a/Sources/GameEngine/Components/Renderer/SkyBox/SkyBoxComponent.cpp
+++ b/Sources/GameEngine/Components/Renderer/SkyBox/SkyBoxComponent.cpp
@@ -38,7 +38,7 @@ std::vector<File> ReadCubeMapArray(const TreeNode& node, const std::string& str)
             }
             else
             {
-                ERROR_LOG("To many textures in cubeMap texture.");
+                LOG_ERROR << "To many textures in cubeMap texture.";
             }
         }
     }
@@ -50,7 +50,7 @@ std::optional<std::array<File, 6>> Convert(const std::vector<File>& files)
 {
     if (files.size() != 6)
     {
-        ERROR_LOG("File size != 6. Current size = " + std::to_string(files.size()));
+        LOG_ERROR << "File size != 6. Current size = " << files.size();
         return std::nullopt;
     }
 
diff --git a/Sources/GameEngine/Components/Renderer/Terrain/TerrainComponentBase.cpp b/Sources/GameEngine/Components/Renderer/Terrain/TerrainComponentBase.cpp
index d91f4989..68a95adb 100644
--- a/Sources/GameEngine/Components/Renderer/Terrain/TerrainComponentBase.cpp
+++ b/Sources/GameEngine/Components/Renderer/Terrain/TerrainComponentBase.cpp
@@ -140,8 +140,6 @@ std::optional<File> TerrainComponentBase::ConvertObjectToHeightMap(const File &o
         }
     }
 
-    DEBUG_LOG("MinHeight: " + std::to_string(minHeight));
-    DEBUG_LOG("MaxHeight: " + std::to_string(maxHeight));
     for (uint32 y = 0; y < heightmapResultuion; y++)
     {
         for (uint32 x = 0; x < heightmapResultuion; x++)
@@ -185,7 +183,7 @@ void TerrainComponentBase::LoadTextures(const std::vector<TerrainTexture> &textu
                 }
                 else
                 {
-                    DEBUG_LOG("Heightmap conversion from object faild");
+                    LOG_ERROR << "Heightmap conversion from object faild";
                     return;
                 }
             }
@@ -294,7 +292,7 @@ HeightMap *TerrainComponentBase::createHeightMap(const vec2ui &size)
     }
     else
     {
-        ERROR_LOG("create error");
+        LOG_ERROR << "create error";
     }
 
     return heightMap_;
@@ -347,7 +345,7 @@ void TerrainComponentBase::LoadHeightMap(const File &file)
     }
     else
     {
-        ERROR_LOG("load error");
+        LOG_ERROR << "load error";
     }
 }
 
@@ -362,7 +360,7 @@ void TerrainComponentBase::SetTexture(TerrainTextureType type, Texture *texture)
 
     if (iter != textures_.end())
     {
-        ERROR_LOG("Texture type " + std::to_string(type) + " already exist.");
+        LOG_ERROR << "Texture type " << magic_enum::enum_name(type) << " already exist.";
         return;
     }
 
@@ -463,7 +461,7 @@ void TerrainComponentBase::updateTerrainTextureBufferData()
                 bufferData.backgroundTextureScales.value.y = terrainTexture.tiledScale;
                 break;
             default:
-                DEBUG_LOG("unknown");
+                LOG_ERROR << "unknown texture type";
         }
     }
 }
diff --git a/Sources/GameEngine/Components/Renderer/Terrain/TerrainConfiguration.cpp b/Sources/GameEngine/Components/Renderer/Terrain/TerrainConfiguration.cpp
index 7ede61e3..3fc3997c 100644
--- a/Sources/GameEngine/Components/Renderer/Terrain/TerrainConfiguration.cpp
+++ b/Sources/GameEngine/Components/Renderer/Terrain/TerrainConfiguration.cpp
@@ -1,6 +1,9 @@
 #include "TerrainConfiguration.h"
+
 #include <Logger/Log.h>
+
 #include <fstream>
+
 #include "Utils.h"
 
 namespace GameEngine
@@ -14,7 +17,7 @@ void SaveTerrainConfigurationToFile(const TerrainConfiguration& config, const st
 
     if (not file.is_open())
     {
-        ERROR_LOG("Can not open file to writing :" + filename);
+        LOG_ERROR << "Can not open file to writing :" << filename;
         return;
     }
 
@@ -23,8 +26,8 @@ void SaveTerrainConfigurationToFile(const TerrainConfiguration& config, const st
     file << "# Tesselation terrain parameters\n";
 
     const auto& diplacmentStrength = config.GetPerTerrainBuffer().displacementStrength.value;
-    file << "DisplacmentStrength " << diplacmentStrength.x << " " << diplacmentStrength.y << " " << diplacmentStrength.z
-         << " " << diplacmentStrength.w << "\n";
+    file << "DisplacmentStrength " << diplacmentStrength.x << " " << diplacmentStrength.y << " " << diplacmentStrength.z << " "
+         << diplacmentStrength.w << "\n";
 
     for (size_t i = 0; i < LOD_SIZE; ++i)
     {
@@ -48,7 +51,7 @@ TerrainConfiguration TerrainConfiguration::ReadFromFile(const File& configFile)
 
     if (not file.is_open())
     {
-        DEBUG_LOG("Terrain config file not found, creating default : " + configFile.GetFilename());
+        LOG_DEBUG << "Terrain config file not found, creating default : " << configFile.GetFilename();
         SaveTerrainConfigurationToFile(config, configFile.GetAbsolutePath());
         return config;
     }
@@ -66,7 +69,7 @@ TerrainConfiguration TerrainConfiguration::ReadFromFile(const File& configFile)
         {
             if (params.size() < 4)
             {
-                ERROR_LOG("Wrong scale format in line : " + std::to_string(lineNumber));
+                LOG_ERROR << "Wrong scale format in line : " << lineNumber;
                 continue;
             }
 
@@ -76,7 +79,7 @@ TerrainConfiguration TerrainConfiguration::ReadFromFile(const File& configFile)
             }
             catch (...)
             {
-                ERROR_LOG("Read scale error in line : " + std::to_string(lineNumber));
+                LOG_ERROR << "Read scale error in line : " << lineNumber;
                 continue;
             }
         }
@@ -84,7 +87,7 @@ TerrainConfiguration TerrainConfiguration::ReadFromFile(const File& configFile)
         {
             if (params.size() < 3)
             {
-                ERROR_LOG("Wrong lod format in line : " + std::to_string(lineNumber));
+                LOG_ERROR << "Wrong lod format in line : " << lineNumber;
                 continue;
             }
 
@@ -94,7 +97,7 @@ TerrainConfiguration TerrainConfiguration::ReadFromFile(const File& configFile)
             }
             catch (...)
             {
-                ERROR_LOG("Read lod error error in line : " + std::to_string(lineNumber));
+                LOG_ERROR << "Read lod error error in line : " << lineNumber;
                 continue;
             }
         }
@@ -102,7 +105,7 @@ TerrainConfiguration TerrainConfiguration::ReadFromFile(const File& configFile)
         {
             if (params.size() < 5)
             {
-                ERROR_LOG("Wrong DisplacmentStrength format in line : " + std::to_string(lineNumber));
+                LOG_ERROR << "Wrong DisplacmentStrength format in line : " << lineNumber;
                 continue;
             }
 
@@ -113,7 +116,7 @@ TerrainConfiguration TerrainConfiguration::ReadFromFile(const File& configFile)
             }
             catch (...)
             {
-                ERROR_LOG("Read displacmentStrength error error in line : " + std::to_string(lineNumber));
+                LOG_ERROR << "Read displacmentStrength error error in line : " << lineNumber;
                 continue;
             }
         }
@@ -121,7 +124,7 @@ TerrainConfiguration TerrainConfiguration::ReadFromFile(const File& configFile)
         {
             if (params.size() < 2)
             {
-                ERROR_LOG("Wrong PartsCount format in line : " + std::to_string(lineNumber));
+                LOG_ERROR << "Wrong PartsCount format in line : " << lineNumber;
                 continue;
             }
 
@@ -130,18 +133,17 @@ TerrainConfiguration TerrainConfiguration::ReadFromFile(const File& configFile)
                 auto partsCount = std::stoi(params[1]);
                 if (partsCount > 1)
                 {
-                    DEBUG_LOG("Terrain parts enabled. " + std::to_string(partsCount) + "x" +
-                              std::to_string(partsCount));
+                    LOG_DEBUG << "Terrain parts enabled. " << partsCount << "x" << partsCount;
                     config.partsCount_ = partsCount;
                 }
                 else
                 {
-                    DEBUG_LOG("Terrain parts disabled.");
+                    LOG_DEBUG << "Terrain parts disabled.";
                 }
             }
             catch (...)
             {
-                ERROR_LOG("Read PartsCount error in line : " + std::to_string(lineNumber));
+                LOG_ERROR << "Read PartsCount error in line : " << lineNumber;
                 continue;
             }
         }
@@ -193,15 +195,14 @@ void TerrainConfiguration::SetTerrainYOffset(float offset)
 // namespace GameEngine
 int32 TerrainConfiguration::updateMorphingArea(uint32 lod)
 {
-    return static_cast<int32>((scale_.x / terrainRootNodesCount_) /
-                              static_cast<float>(pow(2, lod)));
+    return static_cast<int32>((scale_.x / terrainRootNodesCount_) / static_cast<float>(pow(2, lod)));
 }
 
 void TerrainConfiguration::SetLod(uint32 index, uint32 value)
 {
     if (index > LOD_SIZE)
     {
-        ERROR_LOG("Try set lod out of range! max(" + std::to_string(LOD_SIZE) + ")");
+        LOG_ERROR << "Try set lod out of range! max(" << LOD_SIZE <<  ")";
         return;
     }
 
diff --git a/Sources/GameEngine/Components/Renderer/Terrain/TerrainHeightTools.cpp b/Sources/GameEngine/Components/Renderer/Terrain/TerrainHeightTools.cpp
index d76cf885..3dc7e828 100644
--- a/Sources/GameEngine/Components/Renderer/Terrain/TerrainHeightTools.cpp
+++ b/Sources/GameEngine/Components/Renderer/Terrain/TerrainHeightTools.cpp
@@ -27,8 +27,7 @@ float TerrainHeightTools::GetHeight(uint32 x, uint32 y) const
     auto maybeColor = heightMapImage_.getPixel({x, y});
     if (not maybeColor)
     {
-        ERROR_LOG("outOfRange getPoint={" + std::to_string(vec2ui(x, y)) + "} heightMapImage_={" +
-                  std::to_string(heightMapImage_.size()) + "}");
+        LOG_ERROR << "outOfRange getPoint={" << vec2ui(x, y) << "} heightMapImage_={" << heightMapImage_.size() << "}";
         return 0.f;
     }
 
@@ -38,7 +37,6 @@ float TerrainHeightTools::GetHeight(uint32 x, uint32 y) const
     }
     else
     {
-        // DEBUG_LOG("Multi channel heightmap not implemented.");
         return (maybeColor->value.x) * terrainScale_.y;
     }
 
diff --git a/Sources/GameEngine/Components/Renderer/Terrain/TerrainMeshRendererComponent.cpp b/Sources/GameEngine/Components/Renderer/Terrain/TerrainMeshRendererComponent.cpp
index b5ac8e04..823dc870 100644
--- a/Sources/GameEngine/Components/Renderer/Terrain/TerrainMeshRendererComponent.cpp
+++ b/Sources/GameEngine/Components/Renderer/Terrain/TerrainMeshRendererComponent.cpp
@@ -124,8 +124,6 @@ void TerrainMeshRendererComponent::init()
         worldTransfomChangeSubscrbtion_ = thisObject_.SubscribeOnWorldTransfomChange(
             [this, model](const auto &transform)
             {
-                DEBUG_LOG("Terrain transform changed, " + std::to_string(transform.GetPosition()));
-
                 createBoundongBoxes(*model,heightMap_->GetScale());
 
                 for (size_t i = 0; i < model->GetMeshes().size(); ++i)
@@ -154,7 +152,7 @@ void TerrainMeshRendererComponent::LoadHeightMap(const File &file)
 
 void TerrainMeshRendererComponent::UpdateHeightMap(const File &)
 {
-    DEBUG_LOG("Not implemented.");
+    LOG_ERROR << ("Not implemented.");
 }
 
 void TerrainMeshRendererComponent::CreateShaderBuffers(const GameEngine::Model &model, const vec3 &heightmapScale)
@@ -166,9 +164,7 @@ void TerrainMeshRendererComponent::CreateShaderBuffers(const GameEngine::Model &
         auto &graphicsApi = componentContext_.resourceManager_.GetGraphicsApi();
         auto &obj         = CreatePerObjectBuffer(graphicsApi);
 
-        DEBUG_LOG("Heightmap scale: " + std::to_string(heightmapScale));
         auto tm = thisObject_.GetWorldTransform().CalculateCurrentMatrix() * glm::scale(heightmapScale);
-        DEBUG_LOG("tm: " + std::to_string(tm));
         obj.GetData().TransformationMatrix = graphicsApi.PrepareMatrixToLoad(tm);
 
         LoadObjectToGpu(obj);
diff --git a/Sources/GameEngine/Components/Renderer/Terrain/TerrainMeshUpdater.cpp b/Sources/GameEngine/Components/Renderer/Terrain/TerrainMeshUpdater.cpp
index 685268db..a5b96d94 100644
--- a/Sources/GameEngine/Components/Renderer/Terrain/TerrainMeshUpdater.cpp
+++ b/Sources/GameEngine/Components/Renderer/Terrain/TerrainMeshUpdater.cpp
@@ -40,7 +40,6 @@ void TerrainMeshUpdater::create()
 }
 void TerrainMeshUpdater::reCreate()
 {
-    DEBUG_LOG("recreate terrain mesh");
     auto model = modelWrapper_.Get(LevelOfDetail::L1);
     if (model)
     {
@@ -130,7 +129,7 @@ void TerrainMeshUpdater::updateSingleTerrainMesh()
     auto& meshes = model->GetMeshes();
     if (meshes.size() != 1)
     {
-        ERROR_LOG("Meshes size inccorect for single terrain mesh.");
+        LOG_ERROR << "Meshes size inccorect for single terrain mesh.";
         return;
     }
 
diff --git a/Sources/GameEngine/Components/Renderer/Terrain/TerrainRendererComponent.cpp b/Sources/GameEngine/Components/Renderer/Terrain/TerrainRendererComponent.cpp
index 99b03fcf..a0a8f5b8 100644
--- a/Sources/GameEngine/Components/Renderer/Terrain/TerrainRendererComponent.cpp
+++ b/Sources/GameEngine/Components/Renderer/Terrain/TerrainRendererComponent.cpp
@@ -46,12 +46,10 @@ TerrainRendererComponent::TerrainRendererComponent(ComponentContext& componentCo
 {
     if (EngineConf.renderer.type == GraphicsApi::RendererType::SIMPLE)
     {
-        DEBUG_LOG("Choosed simple renderer force using terrain mesh renderer.");
         SetRendererType(RendererType::Mesh);
     }
     else if (not componentContext_.resourceManager_.GetGraphicsApi().IsTesselationSupported())
     {
-        DEBUG_LOG("Tessellation is not supported force using terrain mesh renderer.");
         SetRendererType(RendererType::Mesh);
         return;
     }
@@ -63,7 +61,6 @@ TerrainRendererComponent::TerrainRendererComponent(ComponentContext& componentCo
 
 TerrainRendererComponent::~TerrainRendererComponent()
 {
-    DEBUG_LOG("destructor " + std::to_string(type_));
 }
 
 void TerrainRendererComponent::CleanUp()
@@ -113,11 +110,9 @@ void TerrainRendererComponent::SetRendererType(TerrainRendererComponent::Rendere
     switch (type)
     {
         case RendererType::Mesh:
-            DEBUG_LOG("Set RendererType::Mesh");
             terrainComponent_ = std::make_unique<TerrainMeshRendererComponent>(componentContext_, thisObject_);
             break;
         case RendererType::Tessellation:
-            DEBUG_LOG("Set RendererType::Tessellation");
             terrainComponent_ = std::make_unique<TerrainTessellationRendererComponent>(componentContext_, thisObject_);
             break;
     }
@@ -138,7 +133,7 @@ TerrainTessellationRendererComponent* TerrainRendererComponent::GetTesselationTe
 {
     if (rendererType_ != RendererType::Tessellation)
     {
-        ERROR_LOG("Get tesselation comonent when rendererType_ != RendererType::Tessellation");
+        LOG_ERROR << "Get tesselation comonent when rendererType_ != RendererType::Tessellation";
         return nullptr;
     }
 
@@ -149,7 +144,7 @@ TerrainMeshRendererComponent* TerrainRendererComponent::GetMeshTerrain()
 {
     if (rendererType_ != RendererType::Mesh)
     {
-        ERROR_LOG("Get tesselation comonent when rendererType_ != RendererType::Mesh");
+        LOG_ERROR << "Get tesselation comonent when rendererType_ != RendererType::Mesh";
         return nullptr;
     }
 
@@ -204,7 +199,7 @@ std::vector<Components::TerrainComponentBase::TerrainTexture> ReadTerrainTexture
         if (texture->getChild(CSTR_TEXTURE_TYPE))
             std::from_string(texture->getChild(CSTR_TEXTURE_TYPE)->value_, terrainTexture.type);
         else
-            WARNING_LOG("Read texture without type");
+            LOG_WARN << "Read texture without type";
 
         Read(texture->getChild(CSTR_SCALE), terrainTexture.tiledScale);
 
@@ -271,7 +266,7 @@ void TerrainRendererComponent::write(TreeNode& node) const
         }
         else
         {
-            ERROR_LOG("Heightmap texture cast error");
+            LOG_ERROR << "Heightmap texture cast error";
         }
     }
 
@@ -289,8 +284,8 @@ void TerrainRendererComponent::write(TreeNode& node) const
                 visitor{
                     [&](const std::vector<uint8>& data)
                     { Utils::SaveImage(data, image.size(), blendMapTexture->GetFile()->GetAbsolutePath()); },
-                    [](const std::vector<float>& data) { DEBUG_LOG("Float version not implemented."); },
-                    [](const std::monostate&) { ERROR_LOG("Image data is not set!"); },
+                    [](const std::vector<float>& data) { LOG_ERROR << "Float version not implemented."; },
+                    [](const std::monostate&) { LOG_ERROR << "Image data is not set!"; },
                 },
                 image.getImageData());
         }
diff --git a/Sources/GameEngine/Components/Renderer/Terrain/TerrainTessellationRendererComponent.cpp b/Sources/GameEngine/Components/Renderer/Terrain/TerrainTessellationRendererComponent.cpp
index b2617545..0d4bde17 100644
--- a/Sources/GameEngine/Components/Renderer/Terrain/TerrainTessellationRendererComponent.cpp
+++ b/Sources/GameEngine/Components/Renderer/Terrain/TerrainTessellationRendererComponent.cpp
@@ -69,7 +69,7 @@ void TerrainTessellationRendererComponent::HeightMapChanged()
     }
     else
     {
-        ERROR_LOG("Unknown height map file.");
+        LOG_ERROR << "Unknown height map file.";
     }
 }
 void TerrainTessellationRendererComponent::CleanUp()
diff --git a/Sources/GameEngine/Components/Renderer/Terrain/TerrainTexturesTypes.cpp b/Sources/GameEngine/Components/Renderer/Terrain/TerrainTexturesTypes.cpp
index ccb5fd80..43448ff3 100644
--- a/Sources/GameEngine/Components/Renderer/Terrain/TerrainTexturesTypes.cpp
+++ b/Sources/GameEngine/Components/Renderer/Terrain/TerrainTexturesTypes.cpp
@@ -28,7 +28,7 @@ void std::from_string(const std::string& type, GameEngine::TerrainTextureType& t
     FROM_STRING(rockTexture);
     FROM_STRING(rockTextureNormal);
     FROM_STRING(rockTextureDisplacement);
-    ERROR_LOG("unknow terrainTextureType=" + type);
+    LOG_ERROR << "unknow terrainTextureType=" << type;
 }
 #undef FROM_STRING
 
diff --git a/Sources/GameEngine/Components/Renderer/Water/WaterRendererComponent.cpp b/Sources/GameEngine/Components/Renderer/Water/WaterRendererComponent.cpp
index 198f76ec..fd7e45fe 100644
--- a/Sources/GameEngine/Components/Renderer/Water/WaterRendererComponent.cpp
+++ b/Sources/GameEngine/Components/Renderer/Water/WaterRendererComponent.cpp
@@ -130,8 +130,6 @@ void WaterRendererComponent::updatePerObjectUpdateBuffer()
     if (not perObjectUpdateBuffer_)
         return;
 
-    DEBUG_LOG("update buffer");
-
     const auto& transform = thisObject_.GetWorldTransform();
 
     auto convertedQuadScale = transform.GetScale();
diff --git a/Sources/GameEngine/DebugTools/Console/Console.cpp b/Sources/GameEngine/DebugTools/Console/Console.cpp
index 27564fcc..7c633c27 100644
--- a/Sources/GameEngine/DebugTools/Console/Console.cpp
+++ b/Sources/GameEngine/DebugTools/Console/Console.cpp
@@ -12,9 +12,9 @@
 #include "GameEngine/Renderers/RenderersManager.h"
 #include "GameEngine/Resources/IGpuResourceLoader.h"
 #include "GameEngine/Scene/Scene.hpp"
+#include "GameEngine/Scene/SceneReader.h"
 #include "GameEngine/Scene/SceneUtils.h"
 #include "Input/KeyCodeToCharConverter.h"
-#include "GameEngine/Scene/SceneReader.h"
 
 namespace GameEngine
 {
@@ -42,7 +42,6 @@ Console::Console(Scene &scene)
 
 Console::~Console()
 {
-    DEBUG_LOG("destructor");
     DisableFreeCam({});
 }
 
@@ -88,7 +87,7 @@ void Console::RegisterActions()
     commandsActions_.insert({"save", [this](const auto &params) { SaveScene(params); }});
     commandsActions_.insert({"load", [this](const auto &params) { LoadScene(params); }});
     commandsActions_.insert({"reload", [this](const auto &params) { ReloadScene(params); }});
-    commandsActions_.insert({"lognow", [this](const auto &params) { SetImmeditalyLogs(params); }});
+    commandsActions_.insert({"lognow", [this](const auto &params) { UseAsyncLogging(params); }});
     commandsActions_.insert({"snap", [this](const auto &params) { TakeSnapshoot(params); }});
     commandsActions_.insert({"reloadshaders", [this](const auto &params) { ReloadShaders(params); }});
     commandsActions_.insert({"swapRenderMode", [this](const auto &params) { SwapRenderMode(params); }});
@@ -262,12 +261,10 @@ void Console::SetPosition(const std::vector<std::string> &args)
                 if (rigidbody)
                 {
                     rigidbody->SetPosition(position);
-                    DEBUG_LOG("Set rigidbody position");
                 }
                 else
                 {
                     gameObject->GetTransform().SetPosition(position);
-                    DEBUG_LOG("Set transform position");
                 }
             }
             catch (...)
@@ -284,13 +281,10 @@ void Console::SetPosition(const std::vector<std::string> &args)
                 if (rigidbody)
                 {
                     rigidbody->SetPosition(position);
-                    DEBUG_LOG("Set rigidbody position");
                 }
                 else
                 {
                     gameObject->GetTransform().SetPosition(position);
-
-                    DEBUG_LOG("Set transform position");
                 }
             }
             catch (...)
@@ -372,7 +366,7 @@ void Console::SaveScene(const std::vector<std::string> &params)
 {
     if (params.empty())
     {
-       GameEngine::saveSceneToFile(scene_);
+        GameEngine::saveSceneToFile(scene_);
     }
     else
     {
@@ -420,17 +414,14 @@ void Console::ReloadScene(const std::vector<std::string> &)
     scene_.addSceneEvent(sceneEvent);
 }
 
-void Console::SetImmeditalyLogs(const std::vector<std::string> &params)
+void Console::UseAsyncLogging(const std::vector<std::string> &params)
 {
     if (params.empty())
         return;
 
     auto use = Utils::StringToBool(params[0]);
 
-    if (use)
-        CLogger::Instance().ImmeditalyLog();
-    else
-        CLogger::Instance().LazyLog();
+    CLogger::Instance().UseAsyncLogging(use);
 }
 
 void Console::TakeSnapshoot(const std::vector<std::string> &params)
@@ -504,7 +495,7 @@ void Console::SetPhysicsVisualization(const std::vector<std::string> &params)
             {
                 if (auto rigidbody = go->GetComponent<Components::Rigidbody>())
                 {
-                    DEBUG_LOG("VisualizatedRigidbody id : " + std::to_string(rigidbody->GetId()) + ", value: " + Utils::BoolToString(set));
+                    LOG_DEBUG << "VisualizatedRigidbody id : " << rigidbody->GetId() << ", value: " << Utils::BoolToString(set);
                     if (set)
                     {
                         scene_.physicsApi_->enableVisualizatedRigidbody(rigidbody->GetId());
@@ -534,17 +525,17 @@ void Console::SetTimeMulitplayer(const std::vector<std::string> &params)
     }
     catch (...)
     {
-        WARNING_LOG("Set time multiplayer error");
+        LOG_ERROR << "Set time multiplayer error";
     }
 }
 
 void Console::Help(const std::vector<std::string> &)
 {
-    DEBUG_LOG("All commands : ");
+    LOG_DEBUG << "All commands : ";
 
     for (const auto &command : commandsActions_)
     {
-        DEBUG_LOG(command.first);
+        LOG_DEBUG << command.first;
     }
 }
 
@@ -685,7 +676,6 @@ GameObject *Console::GetGameObject(const std::string &name)
 
 void Console::PrepareConsoleWindow()
 {
-    DEBUG_LOG("");
     scene_.guiManager_->AddLayer(CONSOLE_LAYER_NAME);
 
     auto window = scene_.guiElementFactory_->CreateGuiWindow(GuiWindowStyle::BACKGROUND_ONLY, vec2(0.5, 0.75), vec2(1, 0.5f));
@@ -706,7 +696,6 @@ void Console::PrepareConsoleWindow()
                                                  [this]()
                                                  {
                                                      window_->Show();
-                                                     DEBUG_LOG("f2");
                                                      if (not commandsHistory_.empty())
                                                          commandHistoryIndex_ = static_cast<int32>(commandsHistory_.size());
 
diff --git a/Sources/GameEngine/DebugTools/Console/Console.h b/Sources/GameEngine/DebugTools/Console/Console.h
index 595a790c..ed0dd215 100644
--- a/Sources/GameEngine/DebugTools/Console/Console.h
+++ b/Sources/GameEngine/DebugTools/Console/Console.h
@@ -61,7 +61,7 @@ private:
     void SaveScene(const std::vector<std::string>&);
     void LoadScene(const std::vector<std::string>&);
     void ReloadScene(const std::vector<std::string>&);
-    void SetImmeditalyLogs(const std::vector<std::string>&);
+    void UseAsyncLogging(const std::vector<std::string>&);
     void TakeSnapshoot(const std::vector<std::string>&);
     void ReloadShaders(const std::vector<std::string>&);
     void SwapRenderMode(const std::vector<std::string>&);
diff --git a/Sources/GameEngine/DebugTools/EditorInterface/Messages/XmlMessageConverter.cpp b/Sources/GameEngine/DebugTools/EditorInterface/Messages/XmlMessageConverter.cpp
index 9e7c7cca..d1d65b81 100644
--- a/Sources/GameEngine/DebugTools/EditorInterface/Messages/XmlMessageConverter.cpp
+++ b/Sources/GameEngine/DebugTools/EditorInterface/Messages/XmlMessageConverter.cpp
@@ -1,6 +1,7 @@
 #include "XmlMessageConverter.h"
 #include <UtilsNetwork/MessageFormat.h>
 #include <UtilsNetwork/Messages/XmlConverterUtils.h>
+#include "Logger/Log.h"
 #include "MessageTypes.h"
 #include "AvailableComponentMsgIndXmlSerializer.h"
 #include "AvailableComponentMsgIndXmlDeserializer.h"
@@ -59,7 +60,7 @@ bool XmlMessageConverter::IsValid(Network::IMessageFormat format, Network::IMess
 }
 std::unique_ptr<Network::IMessage> XmlMessageConverter::Convert(Network::IMessageType messageType, const Network::IMessageData& message)
 {
-    DEBUG_LOG(Network::Convert(message));
+    LOG_DEBUG << Network::Convert(message);
     Utils::XmlReader reader;
     std::string convertedMessage = Network::Convert(message);
     if (not reader.ReadXml(convertedMessage)) return nullptr;
diff --git a/Sources/GameEngine/DebugTools/EditorInterface/NetworkEditorInterface.cpp b/Sources/GameEngine/DebugTools/EditorInterface/NetworkEditorInterface.cpp
index 6ae1395d..8364de3c 100644
--- a/Sources/GameEngine/DebugTools/EditorInterface/NetworkEditorInterface.cpp
+++ b/Sources/GameEngine/DebugTools/EditorInterface/NetworkEditorInterface.cpp
@@ -35,6 +35,7 @@
 #include "GameEngine/Scene/SceneDef.h"
 #include "GameEngine/Scene/SceneReader.h"
 #include "GameEngine/Scene/SceneUtils.h"
+#include "Logger/Log.h"
 #include "Messages/AvailableComponentMsgInd.h"
 #include "Messages/CameraMsg.h"
 #include "Messages/ComponentDataMessage.h"
@@ -164,7 +165,7 @@ void NetworkEditorInterface::Run()
 }
 void NetworkEditorInterface::AddObject(const std::string &path)
 {
-    DEBUG_LOG("AddObject not implemented : path=" + path);
+    LOG_ERROR << "AddObject not implemented : path=" << path;
 }
 
 void NetworkEditorInterface::MainLoop()
@@ -252,7 +253,7 @@ void NetworkEditorInterface::SetupCamera()
 
 void NetworkEditorInterface::StartGatway()
 {
-    DEBUG_LOG("Starting server");
+    LOG_DEBUG << "Starting server";
     gateway_.StartServer(30, 1991);
     gateway_.SetDefaultMessageConverterFormat(Network::MessageFormat::Xml);
     gateway_.SubscribeForNewUser(std::bind(&NetworkEditorInterface::NewUser, this, std::placeholders::_1, std::placeholders::_2));
@@ -454,7 +455,7 @@ vec3 NetworkEditorInterface::GetScaleChangeValueBasedOnKeys(float dir, float spe
 
 void NetworkEditorInterface::NewUser(const std::string &str, uint32 id)
 {
-    DEBUG_LOG("New user : {" + str + ", " + std::to_string(id) + "}");
+    LOG_DEBUG << "New user : {" << str << ", " << id << "}";
     userId_ = id;
 
     if (not scene_.GetFile().empty())
@@ -466,20 +467,20 @@ void NetworkEditorInterface::NewUser(const std::string &str, uint32 id)
 void NetworkEditorInterface::DisconnectUser(uint32 id)
 {
     userId_ = 0;
-    DEBUG_LOG("Disconnect user : {" + std::to_string(id) + "}");
+    LOG_DEBUG << "Disconnect user : {" << id << "}";
     UnsubscribeTransformUpdateIfExist();
     StartScene();
 }
 void NetworkEditorInterface::OnMessage(Network::UserId, std::unique_ptr<Network::IMessage> msg)
 {
     auto textMsg = Network::castMessageAs<Network::TextMessage>(msg.get())->GetText();
-    DEBUG_LOG("Recevied command : " + textMsg);
+    LOG_DEBUG << "Recevied command : " << textMsg;
 
     auto splitCommand = Utils::SplitString(textMsg, ' ');
 
     if (splitCommand.empty())
     {
-        DEBUG_LOG("splitCommand empty");
+        LOG_DEBUG << "splitCommand empty";
         return;
     }
 
@@ -492,14 +493,14 @@ void NetworkEditorInterface::OnMessage(Network::UserId, std::unique_ptr<Network:
     }
     else
     {
-        DEBUG_LOG("Unknown command : \"" + command + "\"");
+        LOG_ERROR << "Unknown command : \"" << command << "\"";
     }
 }
 void NetworkEditorInterface::LoadSceneFromFile(const EntryParameters &args)
 {
     if (args.count("filename") == 0)
     {
-        DEBUG_LOG("Filename not found.");
+        LOG_ERROR << "Filename not found.";
         return;
     }
 
@@ -514,7 +515,7 @@ void NetworkEditorInterface::SaveSceneToFile(const NetworkEditorInterface::Entry
 {
     if (args.count("filename") == 0)
     {
-        DEBUG_LOG("Filename not found.");
+        LOG_DEBUG << "Filename not found.";
         return;
     }
 
@@ -543,7 +544,7 @@ void SendChildrenObjectList(uint32 userId, Network::Gateway &gateway, uint32 par
 {
     if (objectList.empty())
     {
-        DEBUG_LOG("No children found. Parent id : " + std::to_string(parentId));
+        LOG_ERROR << "No children found. Parent id : " << parentId;
         return;
     }
 
@@ -559,8 +560,6 @@ void SendChildrenObjectList(uint32 userId, Network::Gateway &gateway, uint32 par
 
 void NetworkEditorInterface::GetObjectList(const EntryParameters &)
 {
-    DEBUG_LOG("");
-
     auto &objectList = scene_.GetGameObjects();
     if (not objectList.empty())
     {
@@ -646,7 +645,7 @@ void NetworkEditorInterface::SetGameObjectPosition(const EntryParameters &param)
         }
         catch (...)
         {
-            ERROR_LOG("Set position error");
+            LOG_ERROR << "Set position error";
         }
     }
 }
@@ -673,7 +672,7 @@ void NetworkEditorInterface::SetGameObjectRotation(const EntryParameters &param)
         }
         catch (...)
         {
-            ERROR_LOG("Set rotation error");
+            LOG_ERROR << "Set rotation error";
         }
     }
 }
@@ -693,7 +692,7 @@ void NetworkEditorInterface::SetGameObjectScale(const EntryParameters &param)
             }
             catch (...)
             {
-                ERROR_LOG("Set scale error. Can not convert str to float.");
+                LOG_ERROR << "Set scale error. Can not convert str to float.";
             }
         }
     }
@@ -728,12 +727,12 @@ void NetworkEditorInterface::DeleteGameObject(const EntryParameters &params)
         }
         else
         {
-            ERROR_LOG("GameObject not found");
+            LOG_ERROR << "GameObject not found";
         }
     }
     else
     {
-        ERROR_LOG("Incomplete request");
+        LOG_ERROR << "Incomplete request";
     }
 }
 
@@ -750,12 +749,12 @@ void NetworkEditorInterface::RenameGameObject(const EntryParameters &params)
         }
         else
         {
-            ERROR_LOG("GameObject not found");
+            LOG_ERROR << "GameObject not found";
         }
     }
     else
     {
-        ERROR_LOG("Incomplete request");
+        LOG_ERROR << "Incomplete request";
     }
 }
 
@@ -787,7 +786,7 @@ void NetworkEditorInterface::CreateGameObjectWithModel(const NetworkEditorInterf
     }
     catch (...)
     {
-        ERROR_LOG("Position parsing stof error");
+        LOG_ERROR << "Position parsing stof error";
     }
 
     vec3 rotationEulerDegrees(0.f);
@@ -808,7 +807,7 @@ void NetworkEditorInterface::CreateGameObjectWithModel(const NetworkEditorInterf
     }
     catch (...)
     {
-        ERROR_LOG("Stof error");
+        LOG_ERROR << "Stof error";
     }
 
     if (params.count("filename"))
@@ -841,12 +840,12 @@ void NetworkEditorInterface::CreateGameObjectWithModel(const NetworkEditorInterf
         }
         catch (...)
         {
-            ERROR_LOG("Exception caught");
+            LOG_ERROR << "Exception caught";
         }
     }
     else
     {
-        ERROR_LOG("mandatory param filename not found.");
+        LOG_ERROR << "mandatory param filename not found.";
     }
 }
 
@@ -860,8 +859,6 @@ void NetworkEditorInterface::LoadPrefab(const NetworkEditorInterface::EntryParam
             goName = params.at("name");
         }
 
-        DEBUG_LOG("Load prefabs not implemented");
-
         auto gameObject = GameEngine::SceneReader::loadPrefab(scene_, GetRelativeDataPath(params.at("filename")), goName);
 
         if (gameObject)
@@ -929,7 +926,7 @@ void NetworkEditorInterface::AddComponent(const EntryParameters &params)
             }
             else
             {
-                ERROR_LOG("Component : \"" + componentName + "\" creation error.");
+                LOG_ERROR << "Component : \"" << componentName << "\" creation error.";
             }
         }
     }
@@ -1212,7 +1209,7 @@ void NetworkEditorInterface::setParamIfExitst(const EntryParameters &params, con
         }
         catch (...)
         {
-            ERROR_LOG("Deserialize error for param : " + name + "=" + iter->second);
+            LOG_ERROR << "Deserialize error for param : " << name << "=" << iter->second;
         }
     }
 }
@@ -1228,7 +1225,7 @@ void NetworkEditorInterface::setParamIfExitst(const EntryParameters &params, con
         }
         catch (...)
         {
-            ERROR_LOG("Deserialize error for param : " + name + "=" + iter->second);
+            LOG_ERROR << "Deserialize error for param : " << name << "=" << iter->second;
         }
     }
 }
@@ -1244,7 +1241,7 @@ void NetworkEditorInterface::setParamIfExitst(const EntryParameters &params, con
         }
         catch (...)
         {
-            ERROR_LOG("Deserialize error for param : " + name + "=" + iter->second);
+            LOG_ERROR << "Deserialize error for param : " << name << "=" << iter->second;
         }
     }
 }
@@ -1260,7 +1257,7 @@ void NetworkEditorInterface::setParamIfExitst(const EntryParameters &params, con
         }
         catch (...)
         {
-            ERROR_LOG("Deserialize error for param : " + name + "=" + iter->second);
+            LOG_ERROR << "Deserialize error for param : " << name + "=" << iter->second;
         }
     }
 }
@@ -1276,7 +1273,7 @@ void NetworkEditorInterface::setParamIfExitst(const EntryParameters &params, con
         }
         catch (...)
         {
-            ERROR_LOG("Deserialize error for param : " + name + "=" + iter->second);
+            LOG_ERROR << "Deserialize error for param : " << name << "=" << iter->second;
         }
     }
 }
@@ -1625,7 +1622,7 @@ void NetworkEditorInterface::EnablePlantPainter(const EntryParameters &params)
 {
     if (not params.count("gameObjectId"))
     {
-        ERROR_LOG("GameObject Id is necessary to get plant component.");
+        LOG_ERROR << "GameObject Id is necessary to get plant component.";
         return;
     }
 
@@ -1637,7 +1634,7 @@ void NetworkEditorInterface::EnablePlantPainter(const EntryParameters &params)
 
         if (not component)
         {
-            ERROR_LOG("Grass component not found in object : " + params.at("gameObjectId"));
+            LOG_ERROR << "Grass component not found in object : " << params.at("gameObjectId");
             return;
         }
 
@@ -1688,7 +1685,7 @@ void NetworkEditorInterface::UpdateTerrainPainterParam(const NetworkEditorInterf
         {
             if (terrainPainter_->getPaintType() != PaintType::BlendMap)
             {
-                ERROR_LOG("Incompatible paint mode.");
+                LOG_ERROR << "Incompatible paint mode.";
                 return;
             }
 
@@ -1700,7 +1697,7 @@ void NetworkEditorInterface::UpdateTerrainPainterParam(const NetworkEditorInterf
                 if (i < 4)
                     color[i++] = c == '1' ? 1.f : 0.f;
                 else
-                    ERROR_LOG("to many bits.");
+                    LOG_ERROR << "to many bits.";
             }
             static_cast<TerrainTexturePainter *>(terrainPainter_.get())->setColor(color);
         }
@@ -1715,7 +1712,7 @@ void NetworkEditorInterface::UpdateTerrainPainterParam(const NetworkEditorInterf
     }
     catch (...)
     {
-        ERROR_LOG("Message parsing error.");
+        LOG_ERROR << "Message parsing error.";
     }
 }
 
@@ -1845,7 +1842,7 @@ void NetworkEditorInterface::CreateTerrain(const NetworkEditorInterface::EntryPa
     }
     catch (...)
     {
-        ERROR_LOG("Exception caught");
+        LOG_ERROR << "Exception caught";
     }
 }
 
@@ -2034,7 +2031,7 @@ void NetworkEditorInterface::CloneGameObjectInstancesWithRandomPosition(const En
             }
             catch (...)
             {
-                ERROR_LOG("Something went wrong");
+                LOG_ERROR << "Something went wrong";
             }
         }
     }
@@ -2106,10 +2103,10 @@ GameObject *NetworkEditorInterface::GetGameObject(const std::string &gameObjectI
     }
     catch (...)
     {
-        DEBUG_LOG("Invalid convert gameObject str to int.");
+        LOG_ERROR << "Invalid convert gameObject str to int.";
     }
 
-    DEBUG_LOG("GameObject not found. " + gameObjectId);
+    LOG_ERROR << "GameObject not found. " << gameObjectId;
     return nullptr;
 }
 void NetworkEditorInterface::UnsubscribeTransformUpdateIfExist()
@@ -2118,7 +2115,7 @@ void NetworkEditorInterface::UnsubscribeTransformUpdateIfExist()
     {
         if (not transformChangeSubscription_)
         {
-            ERROR_LOG("Somthing went wrong. transformChangeSubscription_ is nullptr");
+            LOG_ERROR << "Somthing went wrong. transformChangeSubscription_ is nullptr";
             return;
         }
 
@@ -2168,7 +2165,7 @@ std::optional<uint32> NetworkEditorInterface::AddGameObject(const EntryParameter
         }
         else
         {
-            ERROR_LOG("Parent not found, parentId=" + params.at("parentGameObjectId"));
+            LOG_ERROR << "Parent not found, parentId=" << params.at("parentGameObjectId");
         }
     }
     else
diff --git a/Sources/GameEngine/DebugTools/Painter/PlantPainter.cpp b/Sources/GameEngine/DebugTools/Painter/PlantPainter.cpp
index 6671a0bf..664d44f1 100644
--- a/Sources/GameEngine/DebugTools/Painter/PlantPainter.cpp
+++ b/Sources/GameEngine/DebugTools/Painter/PlantPainter.cpp
@@ -81,18 +81,17 @@ void PlantPainter::paintImpl()
         return;
 
     auto numberOfInstances = getNumberOfInstances();
-    TerrainHeightGetter terrainHeightGetter(
-        point.terrainComponent.getParentGameObject().GetWorldTransform().GetScale(),
-        *point.terrainComponent.GetHeightMap(),
-        point.terrainComponent.GetParentGameObject().GetWorldTransform().GetPosition());
+    TerrainHeightGetter terrainHeightGetter(point.terrainComponent.getParentGameObject().GetWorldTransform().GetScale(),
+                                            *point.terrainComponent.GetHeightMap(),
+                                            point.terrainComponent.GetParentGameObject().GetWorldTransform().GetPosition());
     createRandomPositions(point.pointOnTerrain, terrainHeightGetter, range, numberOfInstances);
 }
 uint32 PlantPainter::getNumberOfInstances()
 {
     return paintContext_.strength < 0.f ? 1 : static_cast<uint32>(paintContext_.strength);
 }
-void PlantPainter::createRandomPositions(const vec3& pointOnTerrain, const TerrainHeightGetter& terrainHeightGetter,
-                                         float range, uint32 numberOfInstances)
+void PlantPainter::createRandomPositions(const vec3& pointOnTerrain, const TerrainHeightGetter& terrainHeightGetter, float range,
+                                         uint32 numberOfInstances)
 {
     std::random_device rd;
     std::mt19937 mt(rd());
@@ -150,13 +149,12 @@ void PlantPainter::generatePositions()
     const auto range               = static_cast<float>(paintContext_.brushSize / 2);
     const auto numberOfInstances   = getNumberOfInstances();
 
-    DEBUG_LOG("generatePositions terrains count: " + std::to_string(terrainRendererComponents.size()));
+    LOG_DEBUG << "generatePositions terrains count: " << terrainRendererComponents.size();
     for (auto& terrainRendererComponent : terrainRendererComponents)
     {
         const auto& gameObjectWorldTransform = terrainRendererComponent->getParentGameObject().GetWorldTransform();
 
-        TerrainHeightGetter terrainHeightGetter(gameObjectWorldTransform.GetScale(),
-                                                *terrainRendererComponent->GetHeightMap(),
+        TerrainHeightGetter terrainHeightGetter(gameObjectWorldTransform.GetScale(), *terrainRendererComponent->GetHeightMap(),
                                                 gameObjectWorldTransform.GetPosition());
 
         auto halfScale = Utils::xz(gameObjectWorldTransform.GetScale() / 2.f);
@@ -165,7 +163,7 @@ void PlantPainter::generatePositions()
         vec2 start = position - halfScale + vec2(range);
         vec2 end   = position + halfScale - vec2(range);
 
-        DEBUG_LOG("generatePositions start : " + std::to_string(start) + ", end : " + std::to_string(end));
+        LOG_DEBUG << "generatePositions start : " << start << ", end : " << end;
 
         for (float y = start.y; y < end.y; y += range)
         {
diff --git a/Sources/GameEngine/DebugTools/Painter/TerrainHeightGenerator.cpp b/Sources/GameEngine/DebugTools/Painter/TerrainHeightGenerator.cpp
index 64c235b4..3c6d4888 100644
--- a/Sources/GameEngine/DebugTools/Painter/TerrainHeightGenerator.cpp
+++ b/Sources/GameEngine/DebugTools/Painter/TerrainHeightGenerator.cpp
@@ -49,8 +49,6 @@ TerrainHeightGenerator::TerrainHeightGenerator(const Components::ComponentContro
         perTerrainHeightMapsize_.y += 1;
     }
 
-    DEBUG_LOG("perTerrainHeightMapsize_ " + std::to_string(perTerrainHeightMapsize_));
-
     uint32 maxOctaves = 0;
     for (uint32 o = 0; o < octaves_; o++)
     {
@@ -64,11 +62,11 @@ TerrainHeightGenerator::TerrainHeightGenerator(const Components::ComponentContro
             break;
         }
     }
-    DEBUG_LOG("maxOctaves : " + std::to_string(maxOctaves));
+
     if (octaves_ > maxOctaves)
     {
         octaves_ = maxOctaves;
-        DEBUG_LOG("To hight value of octaves. Set max value");
+        LOG_DEBUG << "To hight value of octaves. Set max value";
     }
 }
 
@@ -82,7 +80,6 @@ void TerrainHeightGenerator::generateHeightMapsImage()
     auto count = perTerrainHeightMapsize_.x * perTerrainHeightMapsize_.y;
     if (count != noiseSeed.size())
     {
-        DEBUG_LOG("regenerate noise seed");
         createSeed();
     }
 
@@ -97,7 +94,7 @@ void TerrainHeightGenerator::generateHeightMapsImage()
 
     if (terrains_.size() != 1)
     {
-        DEBUG_LOG("Support only 1 terrain, Current terrain size : " + std::to_string(terrains_.size()));
+        LOG_ERROR << "Support only 1 terrain, Current terrain size : " << terrains_.size();
         return;
     }
 
@@ -116,7 +113,7 @@ void createTerrainTransition(GameObject& go1, GameObject& go2, float transitionS
     {
         if (compare(transform1.GetPosition().z, transform2.GetPosition().z))
         {
-            ERROR_LOG("Both terrain have the same position!");
+            LOG_ERROR << "Both terrain have the same position!";
             return;
         }
 
@@ -139,14 +136,14 @@ void createTerrainTransition(GameObject& go1, GameObject& go2, float transitionS
 
         if (not heightMap1 or not heightMap2)
         {
-            ERROR_LOG("Heihtmap not set!, heightMap1{" + Utils::BoolToString(heightMap1) + "} heightmap2{" +
-                      Utils::BoolToString(heightMap2) + "}");
+            LOG_ERROR << "Heihtmap not set!, heightMap1{" << Utils::BoolToString(heightMap1) << "} heightmap2{"
+                      << Utils::BoolToString(heightMap2) << "}";
             return;
         }
 
         if (heightMap1->GetImage().size() != heightMap2->GetImage().size())
         {
-            ERROR_LOG("Height map are diffrentSize, unsupported");
+            LOG_ERROR << "Height map are diffrentSize, unsupported";
             return;
         }
 
@@ -154,7 +151,7 @@ void createTerrainTransition(GameObject& go1, GameObject& go2, float transitionS
         auto scale2 = component2->getParentGameObject().GetWorldTransform().GetScale().y;
 
         auto size = heightMap1->GetImage().size();
-        DEBUG_LOG("creating transition...");
+        LOG_DEBUG << "creating transition...";
         for (uint32 x = 0; x < size.x; ++x)
         {
             for (uint32 y = 0; y < transitionSize; ++y)
@@ -174,26 +171,22 @@ void createTerrainTransition(GameObject& go1, GameObject& go2, float transitionS
 
                     auto newHeight = heightMapValue2->value.x * scale2 / scale1;
                     // auto newHeight = heightMapValue2->value.x * scale2 / scale1 / scale1;
-                    DEBUG_LOG("Old height " + std::to_string(heightMapValue1->value) + " | New height " +
-                              std::to_string(newHeight));
+                    LOG_DEBUG << "Old height " << heightMapValue1->value << " | New height " << newHeight;
                     heightMap1->SetHeight(targetPixel, newHeight);
                 }
             }
         }
-
-        DEBUG_LOG("Notif about heightmap change");
         component1->HeightMapChanged();
     }
     else if (compare(transform1.GetPosition().z, transform2.GetPosition().z))
     {
         if (compare(transform1.GetPosition().x, transform2.GetPosition().x))
         {
-            ERROR_LOG("Both terrain have the same position!");
+            LOG_ERROR << "Both terrain have the same position!";
             return;
         }
     }
-
-    DEBUG_LOG("Done.");
+    LOG_DEBUG << "Done.";
 }
 
 void TerrainHeightGenerator::createSeed()
@@ -210,8 +203,6 @@ void TerrainHeightGenerator::createSeed()
     {
         noiseSeed[i] = getRandomFloat(0.f, 1.f);
     }
-
-    DEBUG_LOG("Noise size : " + std::to_string(noiseSeed.size()));
 }
 
 void TerrainHeightGenerator::getTerrain()
@@ -309,7 +300,7 @@ void TerrainHeightGenerator::perlinNoise2D()
     auto width  = perTerrainHeightMapsize_.x;
     auto height = perTerrainHeightMapsize_.y;
 
-    DEBUG_LOG("Start generating terrains.");
+    LOG_DEBUG << "Start generating terrains.";
     for (auto& terrain : terrains_)
     {
         if (not terrain->GetHeightMap())
@@ -365,7 +356,7 @@ void TerrainHeightGenerator::perlinNoise2D()
         heightMap.setImage(std::move(image));
         terrain->HeightMapChanged();
     }
-    DEBUG_LOG("completed");
+    /* LOG TO FIX*/  LOG_ERROR << ("completed");
 }
 
 float TerrainHeightGenerator::getNoiseSample(uint32 x, uint32 y)
@@ -393,7 +384,7 @@ float TerrainHeightGenerator::getNoiseSample(uint32 x, uint32 y)
     if (index < noiseSeed.size())
         return noiseSeed[index];
 
-    ERROR_LOG("Out of range : " + std::to_string(vec2ui(x, y)) + " (" + std::to_string(index) + "/" +
+    /* LOG TO FIX*/  LOG_ERROR << ("Out of range : " + std::to_string(vec2ui(x, y)) + " (" + std::to_string(index) + "/" +
               std::to_string(noiseSeed.size()) + ")");
     return 0.f;
 }
diff --git a/Sources/GameEngine/DebugTools/Painter/TerrainPointGetter.cpp b/Sources/GameEngine/DebugTools/Painter/TerrainPointGetter.cpp
index 5acd90d4..d2671d96 100644
--- a/Sources/GameEngine/DebugTools/Painter/TerrainPointGetter.cpp
+++ b/Sources/GameEngine/DebugTools/Painter/TerrainPointGetter.cpp
@@ -68,7 +68,7 @@ bool TerrainPointGetter::IsUnderGround(const vec3& testPoint)
 
     if (not terrain or not terrain->GetHeightMap())
     {
-        ERROR_LOG("No terrain or height map in terrain.");
+        /* LOG TO FIX*/  LOG_ERROR << ("No terrain or height map in terrain.");
         return false;
     }
     TerrainHeightGetter terrainHeightGetter(terrain->getParentGameObject().GetWorldTransform().GetScale(),
diff --git a/Sources/GameEngine/Display/DisplayManager.cpp b/Sources/GameEngine/Display/DisplayManager.cpp
index 14a8861f..ad993b17 100755
--- a/Sources/GameEngine/Display/DisplayManager.cpp
+++ b/Sources/GameEngine/Display/DisplayManager.cpp
@@ -55,7 +55,7 @@ DisplayManager::DisplayManager(GraphicsApi::IGraphicsApi& api, Utils::Measuremen
     {
         const auto& firstValidDisplayMode = diplayModes.front();
         windowsSize_ = vec2ui{static_cast<uint32>(firstValidDisplayMode.w), static_cast<uint32>(firstValidDisplayMode.h)};
-        DEBUG_LOG("Requested window size not avaiable, take first, new size: " + std::to_string(windowsSize_));
+        /* LOG TO FIX*/  LOG_ERROR << ("Requested window size not avaiable, take first, new size: " + std::to_string(windowsSize_));
         EngineConf.window.size = windowsSize_;
     }
 
@@ -70,7 +70,7 @@ DisplayManager::DisplayManager(GraphicsApi::IGraphicsApi& api, Utils::Measuremen
             measurmentValue = std::to_string(timeMeasurer_.GetFps());
         });
 
-    DEBUG_LOG("DisplayManager init success");
+    /* LOG TO FIX*/  LOG_ERROR << ("DisplayManager init success");
 }
 
 DisplayManager::~DisplayManager()
@@ -79,7 +79,7 @@ DisplayManager::~DisplayManager()
     EngineConf.window.fullScreen.unsubscribe(changeFullScreenSubscription_);
     EngineConf.renderer.fpsLimt.unsubscribe(fpsLimitParamSub_);
 
-    DEBUG_LOG("destructor");
+    /* LOG TO FIX*/  LOG_ERROR << ("destructor");
     graphicsApi_.DeleteContext();
 }
 
@@ -119,7 +119,7 @@ void DisplayManager::SetFullScreen(bool state)
 
 void DisplayManager::ChangeTimeMultiplayer(float value)
 {
-    DEBUG_LOG("Change time multiplayer = " + std::to_string(value));
+    /* LOG TO FIX*/  LOG_ERROR << ("Change time multiplayer = " + std::to_string(value));
     timeMultiplayer_ = value;
 }
 
diff --git a/Sources/GameEngine/Engine/Configuration.cpp b/Sources/GameEngine/Engine/Configuration.cpp
index 1a882f19..bec97909 100755
--- a/Sources/GameEngine/Engine/Configuration.cpp
+++ b/Sources/GameEngine/Engine/Configuration.cpp
@@ -122,7 +122,7 @@ void SaveRequiredFiles()
 
     if (!output.is_open())
     {
-        ERROR_LOG("Cant open file : " + GetFullDataPath(EngineConf.files.requiredFilesOutputFile));
+        /* LOG TO FIX*/  LOG_ERROR << ("Cant open file : " + GetFullDataPath(EngineConf.files.requiredFilesOutputFile));
         return;
     }
 
@@ -178,9 +178,9 @@ Configuration::Configuration()
 }
 
 Params::DebugParams::DebugParams()
-    : logLvl{LogginLvl::None,
-             {LogginLvl::None, LogginLvl::Error, LogginLvl::ErrorWarning, LogginLvl::ErrorWarningInfo,
-              LogginLvl::ErrorWarningInfoDebug}}
+    : logLvl{LoggingLvl::None,
+             {LoggingLvl::None, LoggingLvl::Error, LoggingLvl::ErrorWarning, LoggingLvl::ErrorWarningInfo,
+              LoggingLvl::ErrorWarningInfoDebug}}
     , showRenderInfo{false, {false, true}}
     , showPhycicsVisualization{false, {false, true}}
 {
diff --git a/Sources/GameEngine/Engine/Configuration.h b/Sources/GameEngine/Engine/Configuration.h
index 025a1467..3197c768 100755
--- a/Sources/GameEngine/Engine/Configuration.h
+++ b/Sources/GameEngine/Engine/Configuration.h
@@ -38,7 +38,7 @@ struct DebugParams
 {
     DebugParams();
     PhysicsVisualizatorParams physicsVisualizator;
-    Params::ConfigurationParam<LogginLvl> logLvl;
+    Params::ConfigurationParam<LoggingLvl> logLvl;
     Params::ConfigurationParam<bool> showRenderInfo;
     Params::ConfigurationParam<bool> showPhycicsVisualization;
 };
diff --git a/Sources/GameEngine/Engine/ConfigurationParams/ConfigurationParam.h b/Sources/GameEngine/Engine/ConfigurationParams/ConfigurationParam.h
index 5df9f87e..e6878484 100644
--- a/Sources/GameEngine/Engine/ConfigurationParams/ConfigurationParam.h
+++ b/Sources/GameEngine/Engine/ConfigurationParams/ConfigurationParam.h
@@ -115,7 +115,7 @@ public:
         {
             if (defaultValueIndex_ > defaultValues_.size())
             {
-                WARNING_LOG("Param index out of range");
+                /* LOG TO FIX*/  LOG_ERROR << ("Param index out of range");
                 return;
             }
             set(defaultValues_[defaultValueIndex_]);
diff --git a/Sources/GameEngine/Engine/ConfigurationParams/ParamToString.cpp b/Sources/GameEngine/Engine/ConfigurationParams/ParamToString.cpp
index febf04bb..568d6ef8 100644
--- a/Sources/GameEngine/Engine/ConfigurationParams/ParamToString.cpp
+++ b/Sources/GameEngine/Engine/ConfigurationParams/ParamToString.cpp
@@ -49,39 +49,39 @@ std::string paramToString(GraphicsApi::RendererType renderType)
     return "simple";
 }
 
-std::string paramToString(LogginLvl lvl)
+std::string paramToString(LoggingLvl lvl)
 {
     switch (lvl)
     {
-        case LogginLvl::None:
+        case LoggingLvl::None:
             return "none";
-        case LogginLvl::Error:
+        case LoggingLvl::Error:
             return "error";
-        case LogginLvl::ErrorWarning:
+        case LoggingLvl::ErrorWarning:
             return "error/warning";
-        case LogginLvl::ErrorWarningInfo:
+        case LoggingLvl::ErrorWarningInfo:
             return "error/warning/info";
-        case LogginLvl::ErrorWarningInfoDebug:
+        case LoggingLvl::ErrorWarningInfoDebug:
             return "error/warning/info/debug";
     }
     return {"unknown"};
 }
 
-LogginLvl paramFromString(const std::string & input)
+LoggingLvl paramFromString(const std::string & input)
 {
     auto str = Utils::toLower(input);
     if (str=="none")
-        return LogginLvl::None;
+        return LoggingLvl::None;
     if (str == "error" or str == "error")
-        return LogginLvl::Error;
+        return LoggingLvl::Error;
     if (str == "error/warning" or str == "warning")
-        return LogginLvl::ErrorWarning;
+        return LoggingLvl::ErrorWarning;
     if (str == "error/warning/info" or str == "info")
-        return LogginLvl::ErrorWarningInfo;
+        return LoggingLvl::ErrorWarningInfo;
     if (str == "error/warning/info/debug" or str == "debug")
-        return LogginLvl::ErrorWarningInfoDebug;
+        return LoggingLvl::ErrorWarningInfoDebug;
 
-    return LogginLvl::None;
+    return LoggingLvl::None;
 }
 
 }  // namespace Params
diff --git a/Sources/GameEngine/Engine/ConfigurationParams/ParamToString.h b/Sources/GameEngine/Engine/ConfigurationParams/ParamToString.h
index 5aae3116..5a445d86 100644
--- a/Sources/GameEngine/Engine/ConfigurationParams/ParamToString.h
+++ b/Sources/GameEngine/Engine/ConfigurationParams/ParamToString.h
@@ -15,7 +15,7 @@ std::string paramToString(float);
 std::string paramToString(const vec2ui&);
 std::string paramToString(const std::string&);
 std::string paramToString(GraphicsApi::RendererType);
-std::string paramToString(LogginLvl);
-LogginLvl paramFromString(const std::string&);
+std::string paramToString(LoggingLvl);
+LoggingLvl paramFromString(const std::string&);
 }  // namespace Params
 }  // namespace GameEngine
diff --git a/Sources/GameEngine/Engine/ConfigurationParams/RendererParams/TerrainParam/TerrainType.cpp b/Sources/GameEngine/Engine/ConfigurationParams/RendererParams/TerrainParam/TerrainType.cpp
index 3ecb98aa..e7992146 100644
--- a/Sources/GameEngine/Engine/ConfigurationParams/RendererParams/TerrainParam/TerrainType.cpp
+++ b/Sources/GameEngine/Engine/ConfigurationParams/RendererParams/TerrainParam/TerrainType.cpp
@@ -13,7 +13,7 @@ void from_string(const std::string& type, GameEngine::Params::TerrainType& outpu
     if (type == "Mesh") { output = GameEngine::Params::TerrainType::Mesh; return; }
     if (type == "Tessellation") { output = GameEngine::Params::TerrainType::Tessellation; return; }
     // clang-format on
-    ERROR_LOG("can not convert str to enum : " + type);
+    /* LOG TO FIX*/  LOG_ERROR << ("can not convert str to enum : " + type);
 }
 std::string to_string(GameEngine::Params::TerrainType type)
 {
diff --git a/Sources/GameEngine/Engine/ConfigurationReader.cpp b/Sources/GameEngine/Engine/ConfigurationReader.cpp
index f4680078..dfaad18d 100644
--- a/Sources/GameEngine/Engine/ConfigurationReader.cpp
+++ b/Sources/GameEngine/Engine/ConfigurationReader.cpp
@@ -16,6 +16,8 @@
 #include <Utils/Windows.hpp>
 #endif
 
+#include <magic_enum/magic_enum.hpp>
+
 namespace GameEngine
 {
 std::string getConfigFile()
@@ -52,11 +54,11 @@ ConfigurationReader::ConfigurationReader(const std::string& filename)
 {
     GameEngine::ReadFromFile(filename);
 
-    if (EngineConf.debugParams.logLvl != LogginLvl::None)
+    if (EngineConf.debugParams.logLvl != LoggingLvl::None)
     {
         CLogger::Instance().EnableLogs(EngineConf.debugParams.logLvl);
-        CLogger::Instance().ImmeditalyLog();
-        std::cout << "LogginLvl: " << Params::paramToString(EngineConf.debugParams.logLvl) << std::endl;
+        CLogger::Instance().UseAsyncLogging(false);
+        std::cout << "LoggingLvl: " << magic_enum::enum_name(EngineConf.debugParams.logLvl.get()) << std::endl;
     }
 }
 }  // namespace GameEngine
diff --git a/Sources/GameEngine/Engine/ConfigurationWriter.cpp b/Sources/GameEngine/Engine/ConfigurationWriter.cpp
index 968482e5..b54f3a7a 100644
--- a/Sources/GameEngine/Engine/ConfigurationWriter.cpp
+++ b/Sources/GameEngine/Engine/ConfigurationWriter.cpp
@@ -130,7 +130,7 @@ void Create(TreeNode& node, const Params::PhysicsVisualizatorParams& param)
     node.attributes_[CSTR_USE_WORKER]        = Utils::BoolToString(param.useWorkredToUpdatePhysicsVisualization_);
     node.attributes_[CSTR_REFRESH_STEP_DOWN] = std::to_string(param.refreshRateStepDown_);
 }
-void Create(TreeNode& node, LogginLvl param)
+void Create(TreeNode& node, LoggingLvl param)
 {
     node.value_ = Params::paramToString(param);
 }
diff --git a/Sources/GameEngine/Engine/Engine.cpp b/Sources/GameEngine/Engine/Engine.cpp
index 98f7bbf0..18e825c9 100755
--- a/Sources/GameEngine/Engine/Engine.cpp
+++ b/Sources/GameEngine/Engine/Engine.cpp
@@ -28,7 +28,7 @@
 
 void bt_sighandler(int nSig)
 {
-    ERROR_LOG("print_trace: got signal " + std::to_string(nSig));
+    LOG_ERROR << "print_trace: got signal " << nSig;
 
     void* array[32];
     size_t size;
@@ -40,7 +40,7 @@ void bt_sighandler(int nSig)
     strings = backtrace_symbols(array, size);
 
     for (nCnt = 0; nCnt < size; nCnt++)
-        ERROR_LOG(strings[nCnt]);
+        LOG_ERROR << strings[nCnt];
 
     exit(-1);
 }
@@ -53,7 +53,7 @@ void bt_sighandler(int nSig)
 
 void bt_sighandler(int nSig)
 {
-    ERROR_LOG("print_trace: got signal " + std::to_string(nSig));
+    /* LOG TO FIX*/ LOG_ERROR << ("print_trace: got signal " + std::to_string(nSig));
 
     HANDLE hProcess = GetCurrentProcess();
     SymInitialize(hProcess, NULL, TRUE);
@@ -73,11 +73,11 @@ void bt_sighandler(int nSig)
         DWORD64 displacement = 0;
         if (SymFromAddr(hProcess, addr, &displacement, symbol))
         {
-            ERROR_LOG(std::string(symbol->Name) + " [0x" + std::to_string(symbol->Address) + "]");
+            /* LOG TO FIX*/ LOG_ERROR << (std::string(symbol->Name) + " [0x" + std::to_string(symbol->Address) + "]");
         }
         else
         {
-            ERROR_LOG("Unknown function at [0x" + std::to_string((uintptr_t)addr) + "]");
+            /* LOG TO FIX*/ LOG_ERROR << ("Unknown function at [0x" + std::to_string((uintptr_t)addr) + "]");
         }
     }
 
@@ -114,7 +114,7 @@ std::unique_ptr<GraphicsApi::IGraphicsApi> createGraphicsApi()
 #else
     if (EngineConf.renderer.graphicsApi != "OpenGL")
     {
-        DEBUG_LOG("GNU support only OpenGL");
+        LOG_ERROR << "GNU support only OpenGL";
     }
     graphicsApi = std::make_unique<OpenGLApi::OpenGLApi>();
 #endif
@@ -132,7 +132,7 @@ Engine::Engine(std::unique_ptr<Physics::IPhysicsApi> physicsApi, std::unique_ptr
     , introRenderer_(engineContext_.GetGraphicsApi(), engineContext_.GetGpuResourceLoader(), engineContext_.GetDisplayManager())
     , isRunning_(true)
 {
-    DEBUG_LOG("Start engine.");
+    LOG_DEBUG << "Start engine.";
 
     signal(SIGSEGV, bt_sighandler);
     srand((unsigned)time(NULL));
@@ -141,10 +141,10 @@ Engine::Engine(std::unique_ptr<Physics::IPhysicsApi> physicsApi, std::unique_ptr
     loggingLvlParamSub_ = EngineConf.debugParams.logLvl.subscribeForChange(
         []()
         {
-            if (EngineConf.debugParams.logLvl != LogginLvl::None)
+            if (EngineConf.debugParams.logLvl != LoggingLvl::None)
             {
                 CLogger::Instance().EnableLogs(EngineConf.debugParams.logLvl);
-                CLogger::Instance().ImmeditalyLog();
+                CLogger::Instance().UseAsyncLogging(false);
             }
             else
             {
@@ -198,7 +198,7 @@ Engine::~Engine()
     engineContext_.GetThreadSync().Unsubscribe(physicsThreadId_);
     EngineConf.debugParams.logLvl.unsubscribe(loggingLvlParamSub_);
     EngineConf.renderer.fpsLimt.unsubscribe(fpsLimitParamSub_);
-    DEBUG_LOG("destructor");
+    LOG_DEBUG << "destructor";
     engineContext_.GetSceneManager().Reset();
     EngineConf_SaveRequiredFiles();
 }
@@ -207,7 +207,7 @@ void Engine::CheckThreadsBeforeQuit()
 {
     if (engineContext_.GetThreadSync().SubscribersCount() > 0)
     {
-        WARNING_LOG("Not closed threads. Force to close.");
+        LOG_ERROR << "Not closed threads. Force to close.";
         engineContext_.GetThreadSync().Stop();
     }
 }
diff --git a/Sources/GameEngine/Engine/EngineContext.cpp b/Sources/GameEngine/Engine/EngineContext.cpp
index 64ff35a2..d3b54ae2 100644
--- a/Sources/GameEngine/Engine/EngineContext.cpp
+++ b/Sources/GameEngine/Engine/EngineContext.cpp
@@ -21,7 +21,7 @@ EngineContext::EngineContext(std::unique_ptr<GraphicsApi::IGraphicsApi> graphics
 
 EngineContext::~EngineContext()
 {
-    DEBUG_LOG("destructor");
+    /* LOG TO FIX*/  LOG_ERROR << ("destructor");
     threadSync_.Stop();
 }
 
diff --git a/Sources/GameEngine/Engine/IntroRenderer.cpp b/Sources/GameEngine/Engine/IntroRenderer.cpp
index a571c70d..1808d2d8 100644
--- a/Sources/GameEngine/Engine/IntroRenderer.cpp
+++ b/Sources/GameEngine/Engine/IntroRenderer.cpp
@@ -22,7 +22,7 @@ IntroRenderer::IntroRenderer(GraphicsApi::IGraphicsApi& graphicsApi, IGpuResourc
 }
 IntroRenderer::~IntroRenderer()
 {
-    DEBUG_LOG("destructor");
+    /* LOG TO FIX*/  LOG_ERROR << ("destructor");
 }
 
 void IntroRenderer::Render()
diff --git a/Sources/GameEngine/Engine/ReadConfigurationFunctions.cpp b/Sources/GameEngine/Engine/ReadConfigurationFunctions.cpp
index 9c069aef..fa398ede 100644
--- a/Sources/GameEngine/Engine/ReadConfigurationFunctions.cpp
+++ b/Sources/GameEngine/Engine/ReadConfigurationFunctions.cpp
@@ -136,11 +136,11 @@ void Read(TreeNode& node, Params::Shadows& shadows)
     if (*shadows.cascadesSize < 1)
     {
         shadows.cascadesSize = 1;
-        ERROR_LOG("Cascade size must be set minimum to 1");
+        /* LOG TO FIX*/  LOG_ERROR << ("Cascade size must be set minimum to 1");
     }
     if (*shadows.cascadesSize > Params::MAX_SHADOW_MAP_CASADES)
     {
-        ERROR_LOG("Set to many cascades, limit is : " + std::to_string(Params::MAX_SHADOW_MAP_CASADES));
+        /* LOG TO FIX*/  LOG_ERROR << ("Set to many cascades, limit is : " + std::to_string(Params::MAX_SHADOW_MAP_CASADES));
         shadows.cascadesSize = Params::MAX_SHADOW_MAP_CASADES;
     }
     if (shadows.firstCascadeDistance < 1.f)
@@ -194,7 +194,7 @@ void Read(TreeNode* node, Params::TerrainType& param)
         return;
 
     std::from_string(node->value_, param);
-    DEBUG_LOG(node->value_);
+    /* LOG TO FIX*/  LOG_ERROR << (node->value_);
 }
 
 void Read(TreeNode* node, Params::Terrain& param)
diff --git a/Sources/GameEngine/Objects/GameObject.cpp b/Sources/GameEngine/Objects/GameObject.cpp
index 6dc4036b..82feda63 100755
--- a/Sources/GameEngine/Objects/GameObject.cpp
+++ b/Sources/GameEngine/Objects/GameObject.cpp
@@ -29,7 +29,7 @@ GameObject::GameObject(const std::string& name, Components::ComponentController&
 
 GameObject::~GameObject()
 {
-    DEBUG_LOG("~GameObject() " + name_);
+    /* LOG TO FIX*/  LOG_ERROR << ("~GameObject() " + name_);
 
     for (auto& component : components_)
     {
@@ -42,7 +42,7 @@ GameObject::~GameObject()
     if (localTransfromSubscribtion_)
         localTransform_.UnsubscribeOnChange(*localTransfromSubscribtion_);
 
-    DEBUG_LOG(name_);
+    /* LOG TO FIX*/  LOG_ERROR << (name_);
     if (isStartedSub)
         componentController_.UnRegisterFunction(id_, Components::FunctionType::OnStart, isStartedSub);
     if (isAwakenedSub)
@@ -146,7 +146,7 @@ void GameObject::SetParent(GameObject* parent)
     {
         if (parent_ and parentIdTransfromSubscribtion_)
         {
-            DEBUG_LOG("UnsubscribeOnWorldTransfromChange");
+            /* LOG TO FIX*/  LOG_ERROR << ("UnsubscribeOnWorldTransfromChange");
             parent_->UnsubscribeOnWorldTransfromChange(*parentIdTransfromSubscribtion_);
             parent_                        = nullptr;
             parentIdTransfromSubscribtion_ = std::nullopt;
@@ -190,7 +190,7 @@ void GameObject::ChangeParent(GameObject& newParent)
 {
     if (not parent_)
     {
-        DEBUG_LOG("Root gameObject can not be moved");
+        /* LOG TO FIX*/  LOG_ERROR << ("Root gameObject can not be moved");
         return;
     }
 
@@ -351,7 +351,7 @@ GameObject& GameObject::getRootGameObject()
     {
         go = go->GetParent();
     }
-    DEBUG_LOG(go->GetName());
+    /* LOG TO FIX*/  LOG_ERROR << (go->GetName());
     return *go;
 }
 
diff --git a/Sources/GameEngine/Physics/Bach/BachPhysicsAdapter.cpp b/Sources/GameEngine/Physics/Bach/BachPhysicsAdapter.cpp
index f2d26948..787144e0 100644
--- a/Sources/GameEngine/Physics/Bach/BachPhysicsAdapter.cpp
+++ b/Sources/GameEngine/Physics/Bach/BachPhysicsAdapter.cpp
@@ -137,7 +137,7 @@ BachPhysicsAdapter::BachPhysicsAdapter()
 }
 BachPhysicsAdapter::~BachPhysicsAdapter()
 {
-    DEBUG_LOG("destructor");
+    /* LOG TO FIX*/  LOG_ERROR << ("destructor");
 }
 void BachPhysicsAdapter::Simulate(float)
 {
diff --git a/Sources/GameEngine/Physics/Bullet/BulletAdapter.cpp b/Sources/GameEngine/Physics/Bullet/BulletAdapter.cpp
index c00e511e..8948395e 100644
--- a/Sources/GameEngine/Physics/Bullet/BulletAdapter.cpp
+++ b/Sources/GameEngine/Physics/Bullet/BulletAdapter.cpp
@@ -55,7 +55,7 @@ BulletAdapter::BulletAdapter()
 }
 BulletAdapter::~BulletAdapter()
 {
-    DEBUG_LOG("destructor");
+    /* LOG TO FIX*/  LOG_ERROR << ("destructor");
     impl_->rigidbodies.foreach ([&](auto, auto& body) { btDynamicWorld->removeRigidBody(body.btRigidbody_.get()); });
     impl_->rigidbodies.clear();
 }
@@ -228,7 +228,7 @@ ShapeId BulletAdapter::CreateTerrainColider(const PositionOffset& positionOffset
                 shape->btShape_.reset(new btHeightfieldTerrainShape(width, height, &data[0], 1.f, heightMap.GetMinimumHeight(),
                                                                     heightMap.GetMaximumHeight(), 1, PHY_FLOAT, false));
             },
-            [](std::monostate) { ERROR_LOG("Height map data is not set!."); },
+            [](std::monostate) { /* LOG TO FIX*/  LOG_ERROR << ("Height map data is not set!."); },
         },
         heightMap.GetImage().getImageData());
 
@@ -270,7 +270,7 @@ ShapeId BulletAdapter::CreateMeshCollider(const PositionOffset& positionOffset,
             }
             else
             {
-                WARNING_LOG("Out of range");
+                /* LOG TO FIX*/  LOG_ERROR << ("Out of range");
             }
         }
 
@@ -305,14 +305,14 @@ RigidbodyId BulletAdapter::CreateRigidbody(const ShapeId& shapeId, GameObject& g
 {
     if (not shapeId)
     {
-        ERROR_LOG("Invalid shape id");
+        /* LOG TO FIX*/  LOG_ERROR << ("Invalid shape id");
         return std::nullopt;
     }
 
     auto maybeShape = impl_->shapes_.get(*shapeId);
     if (not maybeShape)
     {
-        ERROR_LOG("Shape not found");
+        /* LOG TO FIX*/  LOG_ERROR << ("Shape not found");
         return 0;
     }
 
@@ -339,7 +339,7 @@ RigidbodyId BulletAdapter::CreateRigidbody(const ShapeId& shapeId, GameObject& g
                 isStatic = true;
                 break;
             case RigidbodyProperty::NoContactResponse:
-                DEBUG_LOG("NoContactResponse for: " + gameObject.GetName());
+                /* LOG TO FIX*/  LOG_ERROR << ("NoContactResponse for: " + gameObject.GetName());
                 flags |= btCollisionObject::CF_NO_CONTACT_RESPONSE;
                 break;
         }
@@ -399,7 +399,7 @@ void BulletAdapter::SetAngularFactor(const RigidbodyId& rigidBodyId, float value
     {
         if (compare(value, 0.f))
         {
-            DEBUG_LOG("DISABLE_DEACTIVATION btRigidbody_ : " + std::to_string(*rigidBodyId));
+            /* LOG TO FIX*/  LOG_ERROR << ("DISABLE_DEACTIVATION btRigidbody_ : " + std::to_string(*rigidBodyId));
             rigidbody->btRigidbody_->setActivationState(DISABLE_DEACTIVATION);
         }
         rigidbody->btRigidbody_->setAngularFactor(value);
@@ -412,7 +412,7 @@ void BulletAdapter::SetAngularFactor(const RigidbodyId& rigidBodyId, const vec3&
     {
         if (compare(value.x, 0.f) and compare(value.y, 0.f) and compare(value.z, 0.f))
         {
-            DEBUG_LOG("DISABLE_DEACTIVATION btRigidbody_ : " + std::to_string(*rigidBodyId));
+            /* LOG TO FIX*/  LOG_ERROR << ("DISABLE_DEACTIVATION btRigidbody_ : " + std::to_string(*rigidBodyId));
             rigidbody->btRigidbody_->setActivationState(DISABLE_DEACTIVATION);
         }
         rigidbody->btRigidbody_->setAngularFactor(Convert(value));
@@ -431,7 +431,7 @@ void BulletAdapter::RemoveRigidBodyImpl(const RigidbodyId& rigidBodyId)
 {
     if (not rigidBodyId)
     {
-        ERROR_LOG("Ivalid rigidbody");
+        /* LOG TO FIX*/  LOG_ERROR << ("Ivalid rigidbody");
         return;
     }
 
@@ -450,7 +450,7 @@ void BulletAdapter::RemoveRigidBodyImpl(const RigidbodyId& rigidBodyId)
 
     if (auto rigidBody = impl_->rigidbodies.get(*rigidBodyId))
     {
-        DEBUG_LOG("removeRigidBody : " + std::to_string(rigidBodyId));
+        /* LOG TO FIX*/  LOG_ERROR << ("removeRigidBody : " + std::to_string(rigidBodyId));
         clearRigidbody(*rigidBody);
     }
     impl_->rigidbodies.erase(*rigidBodyId);
@@ -464,7 +464,7 @@ void BulletAdapter::RemoveShape(const ShapeId& shapeId)
 {
     if (not shapeId)
     {
-        ERROR_LOG("Ivalid shapeId");
+        /* LOG TO FIX*/  LOG_ERROR << ("Ivalid shapeId");
         return;
     }
 
@@ -549,7 +549,7 @@ void BulletAdapter::SetShapeScale(const ShapeId& shapeId, const vec3& position)
 {
     if (not shapeId)
     {
-        ERROR_LOG("Invalid shapeId");
+        /* LOG TO FIX*/  LOG_ERROR << ("Invalid shapeId");
         return;
     }
 
@@ -643,7 +643,7 @@ CollisionSubId BulletAdapter::setCollisionCallback(const RigidbodyId& rigidBodyI
         return impl_->collisionContactInfoSub_.insert({rb, collision});
     }
 
-    WARNING_LOG("rigidBodyId not found : " + std::to_string(rigidBodyId));
+    /* LOG TO FIX*/  LOG_ERROR << ("rigidBodyId not found : " + std::to_string(rigidBodyId));
     return {};
 }
 
diff --git a/Sources/GameEngine/Physics/Bullet/Rigidbodies.cpp b/Sources/GameEngine/Physics/Bullet/Rigidbodies.cpp
index dc604dd1..d2395d4b 100644
--- a/Sources/GameEngine/Physics/Bullet/Rigidbodies.cpp
+++ b/Sources/GameEngine/Physics/Bullet/Rigidbodies.cpp
@@ -41,7 +41,7 @@ void Rigidbodies::erase(IdType rigidbodyId)
     }
     else
     {
-        ERROR_LOG("Rigidbody not found id=" + std::to_string(rigidbodyId));
+        /* LOG TO FIX*/  LOG_ERROR << ("Rigidbody not found id=" + std::to_string(rigidbodyId));
     }
 }
 std::optional<Rigidbodies::IsStatic> Rigidbodies::isStatic(IdType rigidbodyId) const
@@ -51,14 +51,14 @@ std::optional<Rigidbodies::IsStatic> Rigidbodies::isStatic(IdType rigidbodyId) c
         auto [_, is] = *pairPtr;
         return is;
     }
-    
+
     return std::nullopt;
 }
 Rigidbody* Rigidbodies::get(const RigidbodyId& rigidbodyId)
 {
     if (not rigidbodyId)
     {
-        ERROR_LOG("Ivalid rigidbody");
+        /* LOG TO FIX*/  LOG_ERROR << ("Ivalid rigidbody");
         return nullptr;
     }
 
@@ -74,7 +74,7 @@ Rigidbody* Rigidbodies::get(const RigidbodyId& rigidbodyId)
         return maybeRigidBody;
     }
 
-    ERROR_LOG("Rigidbody not found " + std::to_string(*rigidbodyId));
+    /* LOG TO FIX*/  LOG_ERROR << ("Rigidbody not found " + std::to_string(*rigidbodyId));
     return nullptr;
 }
 RigidbodyId Rigidbodies::insert(Rigidbody newBody, Rigidbodies::IsStatic isStatic)
diff --git a/Sources/GameEngine/Renderers/BufferDataUpdater.cpp b/Sources/GameEngine/Renderers/BufferDataUpdater.cpp
index e1172c2f..22cc5742 100644
--- a/Sources/GameEngine/Renderers/BufferDataUpdater.cpp
+++ b/Sources/GameEngine/Renderers/BufferDataUpdater.cpp
@@ -12,7 +12,7 @@ void BufferDataUpdater::Subscribe(GameObject* gameObject)
 {
     if (not gameObject)
     {
-        WARNING_LOG("gameObject not set!");
+        /* LOG TO FIX*/  LOG_ERROR << ("gameObject not set!");
         return;
     }
 
diff --git a/Sources/GameEngine/Renderers/DebugElements/DebugRenderer.cpp b/Sources/GameEngine/Renderers/DebugElements/DebugRenderer.cpp
index 37cfaf72..b6c67513 100644
--- a/Sources/GameEngine/Renderers/DebugElements/DebugRenderer.cpp
+++ b/Sources/GameEngine/Renderers/DebugElements/DebugRenderer.cpp
@@ -39,10 +39,10 @@ DebugObject::~DebugObject()
 }
 void DebugObject::CreateBuffer()
 {
-    DEBUG_LOG("perObjectBufferId");
+    /* LOG TO FIX*/  LOG_ERROR << ("perObjectBufferId");
     perObjectBufferId = graphicsApi_.CreateShaderBuffer(PER_OBJECT_UPDATE_BIND_LOCATION, sizeof(PerObjectUpdate));
 
-    DEBUG_LOG("perObjectBufferId");
+    /* LOG TO FIX*/  LOG_ERROR << ("perObjectBufferId");
     transform_.TakeSnapShoot();
     buffer.TransformationMatrix = transform_.GetMatrix();
     UpdateBuffer();
@@ -83,7 +83,7 @@ DebugRenderer::DebugRenderer(RendererContext& rendererContext, Utils::Thread::Th
 
 DebugRenderer::~DebugRenderer()
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
     if (showPhycicsVisualizationSubId)
         EngineConf.debugParams.showPhycicsVisualization.unsubscribe(*showPhycicsVisualizationSubId);
 }
@@ -108,7 +108,7 @@ void DebugRenderer::init()
     }
     else
     {
-        ERROR_LOG("gridPerObjectUpdateBufferId_ error!");
+        /* LOG TO FIX*/  LOG_ERROR << ("gridPerObjectUpdateBufferId_ error!");
     }
 
     texturePerObjectUpdateBufferId_ =
@@ -122,7 +122,7 @@ void DebugRenderer::init()
     }
     else
     {
-        ERROR_LOG("texturePerObjectUpdateBufferId_ error!");
+        /* LOG TO FIX*/  LOG_ERROR << ("texturePerObjectUpdateBufferId_ error!");
     }
 
     textureColorBufferId_ =
diff --git a/Sources/GameEngine/Renderers/DefferedRenderer.cpp b/Sources/GameEngine/Renderers/DefferedRenderer.cpp
index 4b0d4d73..db4f9e4d 100644
--- a/Sources/GameEngine/Renderers/DefferedRenderer.cpp
+++ b/Sources/GameEngine/Renderers/DefferedRenderer.cpp
@@ -25,14 +25,14 @@ DefferedRenderer::DefferedRenderer(RendererContext& context)
     windowSizeSubscribtionChange_ = EngineConf.window.size.subscribeForChange(
         [this]()
         {
-            DEBUG_LOG("Resize mode enabled. Window size :  " + std::to_string(EngineConf.window.size) +
+            /* LOG TO FIX*/  LOG_ERROR << ("Resize mode enabled. Window size :  " + std::to_string(EngineConf.window.size) +
                       ", rendering size : " + std::to_string(context_.projection_.GetRenderingSize()));
         });
 }
 
 DefferedRenderer::~DefferedRenderer()
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
 
     EngineConf.window.size.unsubscribe(windowSizeSubscribtionChange_);
     if (defferedFrameBuffer_)
@@ -63,14 +63,14 @@ void DefferedRenderer::init()
     const auto windowSize = context_.graphicsApi_.GetWindowApi().GetWindowSize();
     if (context_.projection_.GetRenderingSize() != windowSize)
     {
-        DEBUG_LOG("Resize mode enabled. Window size :  " + std::to_string(windowSize) +
+        /* LOG TO FIX*/  LOG_ERROR << ("Resize mode enabled. Window size :  " + std::to_string(windowSize) +
                   ", rendering size : " + std::to_string(context_.projection_.GetRenderingSize()));
     }
 
     initRenderers();
     postprocessingRenderersManager_.Init();
 
-    DEBUG_LOG("DefferedRenderer initialized.");
+    /* LOG TO FIX*/  LOG_ERROR << ("DefferedRenderer initialized.");
 }
 
 void DefferedRenderer::reloadShaders()
diff --git a/Sources/GameEngine/Renderers/GUI/Button/GuiButton.cpp b/Sources/GameEngine/Renderers/GUI/Button/GuiButton.cpp
index 65cdb656..d3452bea 100644
--- a/Sources/GameEngine/Renderers/GUI/Button/GuiButton.cpp
+++ b/Sources/GameEngine/Renderers/GUI/Button/GuiButton.cpp
@@ -247,7 +247,7 @@ void GuiButtonElement::UnsubscribeInputAction()
     }
     else
     {
-        ERROR_LOG("Subscribtion not exist.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Subscribtion not exist.");
     }
 }
 
diff --git a/Sources/GameEngine/Renderers/GUI/GuiElementFactory.cpp b/Sources/GameEngine/Renderers/GUI/GuiElementFactory.cpp
index b848f243..7bb367a5 100644
--- a/Sources/GameEngine/Renderers/GUI/GuiElementFactory.cpp
+++ b/Sources/GameEngine/Renderers/GUI/GuiElementFactory.cpp
@@ -52,7 +52,7 @@ GuiElementFactory::GuiElementFactory(GuiElementFactory::EntryParameters &entryPa
 
 GuiElementFactory::~GuiElementFactory()
 {
-    DEBUG_LOG("destructor");
+    /* LOG TO FIX*/  LOG_ERROR << ("destructor");
 }
 
 std::unique_ptr<GuiTextElement> GuiElementFactory::CreateGuiText(const std::string &font, const std::string &text,
@@ -350,7 +350,7 @@ void GuiElementFactory::CreateWindowBar(GuiWindowStyle style, GuiWindowElement &
 
     if (style == GuiWindowStyle::FULL)
     {
-        DEBUG_LOG("GuiWindowElement::Style::FULL, minimalize, maxmalize buttons not implemented.");
+        /* LOG TO FIX*/  LOG_ERROR << ("GuiWindowElement::Style::FULL, minimalize, maxmalize buttons not implemented.");
     }
 
     window.SetBar(std::move(horizontalLayout));
diff --git a/Sources/GameEngine/Renderers/GUI/GuiElementReader.cpp b/Sources/GameEngine/Renderers/GUI/GuiElementReader.cpp
index 63aab8f8..4df267d6 100644
--- a/Sources/GameEngine/Renderers/GUI/GuiElementReader.cpp
+++ b/Sources/GameEngine/Renderers/GUI/GuiElementReader.cpp
@@ -79,11 +79,11 @@ GuiElementReader::GuiElementReader(GuiManager &manager, GuiElementFactory &facto
 
 bool GuiElementReader::Read(const std::string &filename)
 {
-    DEBUG_LOG(filename);
+    /* LOG TO FIX*/  LOG_ERROR << (filename);
 
     if (not Utils::CheckExtension(filename, "xml"))
     {
-        ERROR_LOG("This is not xml file. Format should be \".xml\". File name : " + filename);
+        /* LOG TO FIX*/  LOG_ERROR << ("This is not xml file. Format should be \".xml\". File name : " + filename);
         return false;
     }
 
@@ -91,7 +91,7 @@ bool GuiElementReader::Read(const std::string &filename)
 
     if (fileContent.empty())
     {
-        ERROR_LOG(filename + " is empty!");
+        /* LOG TO FIX*/  LOG_ERROR << (filename + " is empty!");
         return false;
     }
 
@@ -104,7 +104,7 @@ bool GuiElementReader::Read(const std::string &filename)
     auto guiNode = reader.Get(Gui::ROOT);
     if (not guiNode)
     {
-        ERROR_LOG("This is not gui file.");
+        /* LOG TO FIX*/  LOG_ERROR << ("This is not gui file.");
         return false;
     }
 
@@ -203,7 +203,7 @@ std::unique_ptr<GuiTextElement> GuiElementReader::ReadGuiText(TreeNode &node)
         }
         catch (...)
         {
-            ERROR_LOG("Read gui file, parse font size error.");
+            /* LOG TO FIX*/  LOG_ERROR << ("Read gui file, parse font size error.");
         }
     }
 
@@ -216,7 +216,7 @@ std::unique_ptr<GuiTextElement> GuiElementReader::ReadGuiText(TreeNode &node)
         }
         catch (...)
         {
-            ERROR_LOG("Read gui file, parse outline error.");
+            /* LOG TO FIX*/  LOG_ERROR << ("Read gui file, parse outline error.");
         }
     }
 
@@ -229,7 +229,7 @@ std::unique_ptr<GuiTextElement> GuiElementReader::ReadGuiText(TreeNode &node)
         vec4 color(0.f, 0.f, 0.f, 1.f);
         ::Read(*paramNode, color);
 
-        DEBUG_LOG("SetColor " + std::to_string(color));
+        /* LOG TO FIX*/  LOG_ERROR << ("SetColor " + std::to_string(color));
         text->SetColor(color);
     }
     return text;
@@ -405,7 +405,7 @@ std::unique_ptr<TreeView> GuiElementReader::ReadTreeView(TreeNode &treeNode)
 
     if (not action)
     {
-        DEBUG_LOG("No action found for tree view \"" + actionNode->value_ + "\"");
+        /* LOG TO FIX*/  LOG_ERROR << ("No action found for tree view \"" + actionNode->value_ + "\"");
         return nullptr;
     }
 
@@ -469,7 +469,7 @@ std::vector<std::unique_ptr<GuiElement>> GuiElementReader::ReadChildrenElemets(T
             }
             else
             {
-                ERROR_LOG("read vertical layout error.");
+                /* LOG TO FIX*/  LOG_ERROR << ("read vertical layout error.");
             }
         }
         else if (child->name() == Gui::WINDOW)
@@ -481,7 +481,7 @@ std::vector<std::unique_ptr<GuiElement>> GuiElementReader::ReadChildrenElemets(T
             }
             else
             {
-                ERROR_LOG("read window error.");
+                /* LOG TO FIX*/  LOG_ERROR << ("read window error.");
             }
         }
         else if (child->name() == Gui::TREE_VIEW)
@@ -493,12 +493,12 @@ std::vector<std::unique_ptr<GuiElement>> GuiElementReader::ReadChildrenElemets(T
             }
             else
             {
-                ERROR_LOG("read tree view error.");
+                /* LOG TO FIX*/  LOG_ERROR << ("read tree view error.");
             }
         }
         else
         {
-            ERROR_LOG("try read unknown gui element type : " + child->name());
+            /* LOG TO FIX*/  LOG_ERROR << ("try read unknown gui element type : " + child->name());
             continue;
         }
     }
diff --git a/Sources/GameEngine/Renderers/GUI/GuiElementWriter.cpp b/Sources/GameEngine/Renderers/GUI/GuiElementWriter.cpp
index a6b42fc4..c6c6e226 100644
--- a/Sources/GameEngine/Renderers/GUI/GuiElementWriter.cpp
+++ b/Sources/GameEngine/Renderers/GUI/GuiElementWriter.cpp
@@ -192,10 +192,10 @@ void write(TreeNode& node, const GuiElement& element)
             write(node, *static_cast<const GuiTextureElement*>(&element));
             break;
         case GuiElementTypes::Checkbox:
-            DEBUG_LOG("Gui Checkbox write method not implemented.");
+            /* LOG TO FIX*/  LOG_ERROR << ("Gui Checkbox write method not implemented.");
             break;
         case GuiElementTypes::ComboBox:
-            DEBUG_LOG("Gui ComboBox write method not implemented.");
+            /* LOG TO FIX*/  LOG_ERROR << ("Gui ComboBox write method not implemented.");
             break;
         case GuiElementTypes::TreeView:
             write(node, *static_cast<const TreeView*>(&element));
diff --git a/Sources/GameEngine/Renderers/GUI/GuiEngineContextManger.cpp b/Sources/GameEngine/Renderers/GUI/GuiEngineContextManger.cpp
index 49b5436c..590b5df4 100644
--- a/Sources/GameEngine/Renderers/GUI/GuiEngineContextManger.cpp
+++ b/Sources/GameEngine/Renderers/GUI/GuiEngineContextManger.cpp
@@ -29,7 +29,7 @@ GuiEngineContextManger::GuiEngineContextManger(Utils::MeasurementHandler& measur
 
 GuiEngineContextManger::~GuiEngineContextManger()
 {
-    DEBUG_LOG("destructor");
+    /* LOG TO FIX*/  LOG_ERROR << ("destructor");
     EngineConf.debugParams.showRenderInfo.unsubscribe(isShowSub_);
 }
 
diff --git a/Sources/GameEngine/Renderers/GUI/GuiManager.cpp b/Sources/GameEngine/Renderers/GUI/GuiManager.cpp
index 9984c563..60f73740 100644
--- a/Sources/GameEngine/Renderers/GUI/GuiManager.cpp
+++ b/Sources/GameEngine/Renderers/GUI/GuiManager.cpp
@@ -18,7 +18,7 @@ GuiManager::GuiManager()
 
 GuiManager::~GuiManager()
 {
-    DEBUG_LOG("destructor");
+    /* LOG TO FIX*/  LOG_ERROR << ("destructor");
 }
 
 GuiLayer& GuiManager::AddLayer(const std::string& name)
@@ -30,7 +30,7 @@ GuiLayer& GuiManager::AddLayer(const std::string& name)
         return layers_.back();
     }
 
-    ERROR_LOG("Layer with name : " + name + " already exist");
+    /* LOG TO FIX*/  LOG_ERROR << ("Layer with name : " + name + " already exist");
     return *iter;
 }
 
@@ -46,7 +46,7 @@ void GuiManager::Add(const std::string& layerName, std::unique_ptr<GuiElement> e
     }
     else
     {
-        ERROR_LOG("Layer with name : " + layerName + " not found");
+        /* LOG TO FIX*/  LOG_ERROR << ("Layer with name : " + layerName + " not found");
     }
 }
 
@@ -71,7 +71,7 @@ GuiElement* GuiManager::GetElement(const std::string& label)
         }
     }
 
-    DEBUG_LOG("Element with label " + label + " not found");
+    /* LOG TO FIX*/  LOG_ERROR << ("Element with label " + label + " not found");
     return nullptr;
 }
 GuiElement* GuiManager::GetElement(uint32 id)
@@ -139,7 +139,7 @@ ActionFunction GuiManager::GetActionFunction(const std::string& name)
     {
         return registeredActions_.at(DEFAULT_ACTION);
     }
-    return [](auto&) { DEBUG_LOG("Button action not found. Default action not set."); };
+    return [](auto&) { /* LOG TO FIX*/  LOG_ERROR << ("Button action not found. Default action not set."); };
 }
 
 void GuiManager::AddTask(std::function<void()> task)
@@ -184,10 +184,10 @@ bool GuiManager::SaveToFile(const std::string& filename, const std::string& laye
 void GuiManager::RemoveLayersExpect(const std::vector<std::string>& exceptions)
 {
     std::lock_guard<std::mutex> lk(elementMutex_);
-    DEBUG_LOG("Remove ");
+    /* LOG TO FIX*/  LOG_ERROR << ("Remove ");
     if (exceptions.empty())
     {
-        DEBUG_LOG("Remove all");
+        /* LOG TO FIX*/  LOG_ERROR << ("Remove all");
         layers_.clear();
     }
     else
@@ -200,7 +200,7 @@ void GuiManager::RemoveLayersExpect(const std::vector<std::string>& exceptions)
 
             if (skip == exceptions.end())
             {
-                DEBUG_LOG("Remove " + layerName);
+                /* LOG TO FIX*/  LOG_ERROR << ("Remove " + layerName);
                 iter = layers_.erase(iter);
             }
             else
@@ -225,7 +225,7 @@ void GuiManager::Remove(uint32 id)
     }
     else
     {
-        ERROR_LOG("Element not found");
+        /* LOG TO FIX*/  LOG_ERROR << ("Element not found");
     }
 }
 
@@ -257,7 +257,7 @@ GuiLayer* GuiManager::GetLayer(const std::string& name)
         return &(*iter);
     }
 
-    ERROR_LOG("Layer with name : " + name + " not found");
+    /* LOG TO FIX*/  LOG_ERROR << ("Layer with name : " + name + " not found");
     return nullptr;
 }
 
diff --git a/Sources/GameEngine/Renderers/GUI/GuiManager.h b/Sources/GameEngine/Renderers/GUI/GuiManager.h
index ca7764ea..d5e9a40d 100644
--- a/Sources/GameEngine/Renderers/GUI/GuiManager.h
+++ b/Sources/GameEngine/Renderers/GUI/GuiManager.h
@@ -76,13 +76,13 @@ T* GuiManager::Get(uint32 id)
         }
         else
         {
-            ERROR_LOG("Can not get " + std::to_string(static_cast<int>(T::type)) +
+            /* LOG TO FIX*/  LOG_ERROR << ("Can not get " + std::to_string(static_cast<int>(T::type)) +
                       ", because element is type of :" + std::to_string(static_cast<int>(element->GetType())));
         }
     }
     else
     {
-        DEBUG_LOG("Element with id : \"" + std::to_string(id) + "\" not found.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Element with id : \"" + std::to_string(id) + "\" not found.");
     }
     return nullptr;
 }
@@ -100,7 +100,7 @@ T* GuiManager::Get(const std::string& label)
         }
         else
         {
-            ERROR_LOG("Can not get " + std::to_string(static_cast<int>(T::type)) +
+            /* LOG TO FIX*/  LOG_ERROR << ("Can not get " + std::to_string(static_cast<int>(T::type)) +
                       ", because element is type of :" + std::to_string(static_cast<int>(element->GetType())));
         }
     }
diff --git a/Sources/GameEngine/Renderers/GUI/GuiRenderer.cpp b/Sources/GameEngine/Renderers/GUI/GuiRenderer.cpp
index 82ef00a5..48ae1c87 100755
--- a/Sources/GameEngine/Renderers/GUI/GuiRenderer.cpp
+++ b/Sources/GameEngine/Renderers/GUI/GuiRenderer.cpp
@@ -51,7 +51,7 @@ void GUIRenderer::Init()
     shader_.Init();
 
     isInit_ = true;
-    DEBUG_LOG("GUIRenderer is initialize status : " + std::to_string(isInit_));
+    /* LOG TO FIX*/  LOG_ERROR << ("GUIRenderer is initialize status : " + std::to_string(isInit_));
 }
 
 void GUIRenderer::render()
@@ -91,7 +91,7 @@ void GUIRenderer::render()
 
         if (subscriber->GetZValue() > min)
         {
-            DEBUG_LOG("Sort needed");
+            /* LOG TO FIX*/  LOG_ERROR << ("Sort needed");
             sortNeeded = true;
         }
         min = subscriber->GetZValue();
@@ -123,7 +123,7 @@ void GUIRenderer::Subscribe(GuiElement& element)
 
         if (iter != subscribers_.end())
         {
-            ERROR_LOG("Try duplicate subscribe element");
+            /* LOG TO FIX*/  LOG_ERROR << ("Try duplicate subscribe element");
             return;
         }
         std::lock_guard<std::mutex> lk(subscriberMutex);
@@ -133,7 +133,7 @@ void GUIRenderer::Subscribe(GuiElement& element)
     }
     else
     {
-        ERROR_LOG("Wrong type gui element, id: " + std::to_string(element.GetId()));
+        /* LOG TO FIX*/  LOG_ERROR << ("Wrong type gui element, id: " + std::to_string(element.GetId()));
     }
 }
 
diff --git a/Sources/GameEngine/Renderers/GUI/Text/FontManager.cpp b/Sources/GameEngine/Renderers/GUI/Text/FontManager.cpp
index 527eb735..e9760c43 100644
--- a/Sources/GameEngine/Renderers/GUI/Text/FontManager.cpp
+++ b/Sources/GameEngine/Renderers/GUI/Text/FontManager.cpp
@@ -69,7 +69,7 @@ FontManager::FontManager()
 
     if (not isInit_)
     {
-        ERROR_LOG("Failed to init TTF");
+        /* LOG TO FIX*/  LOG_ERROR << ("Failed to init TTF");
     }
 }
 
@@ -92,7 +92,7 @@ std::optional<uint32> FontManager::openFont(const File &filename, uint32 size)
     auto percentFontSize = EngineConf.window.size->y * size / 768;
     // auto percentFontSize = windowSize.y / size;
 
-    DEBUG_LOG("Font percent size : " + std::to_string(percentFontSize) + "/" + std::to_string(size));
+    /* LOG TO FIX*/  LOG_ERROR << ("Font percent size : " + std::to_string(percentFontSize) + "/" + std::to_string(size));
 
     TTF_Font *font{nullptr};
 
@@ -126,7 +126,7 @@ std::optional<uint32> FontManager::openFont(const File &filename, uint32 size)
         return id;
     }
 
-    ERROR_LOG("Cannot open font : " + filename.GetFilename());
+    /* LOG TO FIX*/  LOG_ERROR << ("Cannot open font : " + filename.GetFilename());
     return {};
 }
 
@@ -156,7 +156,7 @@ std::optional<FontManager::TextureData> FontManager::renderFont(uint32 fontId, c
 
     if (not sdlSurface)
     {
-        ERROR_LOG("Cannot make a text texture" + std::string(SDL_GetError()));
+        /* LOG TO FIX*/  LOG_ERROR << ("Cannot make a text texture" + std::string(SDL_GetError()));
         return {};
     }
 
diff --git a/Sources/GameEngine/Renderers/GUI/Text/GuiTextElement.cpp b/Sources/GameEngine/Renderers/GUI/Text/GuiTextElement.cpp
index 09e2d52d..5b6dc8e9 100644
--- a/Sources/GameEngine/Renderers/GUI/Text/GuiTextElement.cpp
+++ b/Sources/GameEngine/Renderers/GUI/Text/GuiTextElement.cpp
@@ -40,7 +40,7 @@ GuiTextElement::GuiTextElement(FontManager& fontManager, GUIRenderer& guiRendere
     , algin_(Algin::CENTER)
     , rendererdTextScale_(0)
 {
-    DEBUG_LOG(text_);
+    /* LOG TO FIX*/  LOG_ERROR << (text_);
     RenderText();
 }
 
@@ -220,7 +220,7 @@ void GuiTextElement::RenderText(bool fontOverride)
         }
         else
         {
-            ERROR_LOG("RenderFont error for : " + text_);
+            /* LOG TO FIX*/  LOG_ERROR << ("RenderFont error for : " + text_);
         }
 
         Show();
diff --git a/Sources/GameEngine/Renderers/GUI/TreeView/TreeView.cpp b/Sources/GameEngine/Renderers/GUI/TreeView/TreeView.cpp
index ed488c8c..a9d58eff 100644
--- a/Sources/GameEngine/Renderers/GUI/TreeView/TreeView.cpp
+++ b/Sources/GameEngine/Renderers/GUI/TreeView/TreeView.cpp
@@ -51,7 +51,7 @@ uint32 TreeView::Add(const std::string& str, std::optional<uint32> parent)
         }
         else
         {
-            ERROR_LOG("Parent with id : " + std::to_string(*parent) + " not found");
+            /* LOG TO FIX*/  LOG_ERROR << ("Parent with id : " + std::to_string(*parent) + " not found");
         }
     }
     return idPool_++;
diff --git a/Sources/GameEngine/Renderers/GUI/Window/GuiWindow.cpp b/Sources/GameEngine/Renderers/GUI/Window/GuiWindow.cpp
index 6e9ee04f..049ae1ba 100644
--- a/Sources/GameEngine/Renderers/GUI/Window/GuiWindow.cpp
+++ b/Sources/GameEngine/Renderers/GUI/Window/GuiWindow.cpp
@@ -100,17 +100,17 @@ void GuiWindowElement::SetBackground(std::unique_ptr<GuiElement> background)
     background_ = std::move(background);
     background_->setParent(this);
     background_->SetZPosition(0.5f);
-    DEBUG_LOG("Id : " + std::to_string(GetId()));
-    DEBUG_LOG("BId : " + std::to_string(background_->GetId()));
-    DEBUG_LOG("Screen scale " + std::to_string(GetScreenScale()));
-    DEBUG_LOG("BScreen scale " + std::to_string(background_->GetScreenScale()));
-    DEBUG_LOG("Screen pos " + std::to_string(GetScreenPosition()));
-    DEBUG_LOG("BScreen pos " + std::to_string(background_->GetScreenPosition()));
+    /* LOG TO FIX*/  LOG_ERROR << ("Id : " + std::to_string(GetId()));
+    /* LOG TO FIX*/  LOG_ERROR << ("BId : " + std::to_string(background_->GetId()));
+    /* LOG TO FIX*/  LOG_ERROR << ("Screen scale " + std::to_string(GetScreenScale()));
+    /* LOG TO FIX*/  LOG_ERROR << ("BScreen scale " + std::to_string(background_->GetScreenScale()));
+    /* LOG TO FIX*/  LOG_ERROR << ("Screen pos " + std::to_string(GetScreenPosition()));
+    /* LOG TO FIX*/  LOG_ERROR << ("BScreen pos " + std::to_string(background_->GetScreenPosition()));
 }
 
 void GuiWindowElement::SetBar(std::unique_ptr<GuiElement> bar)
 {
-    DEBUG_LOG("Not implemented");
+    /* LOG TO FIX*/  LOG_ERROR << ("Not implemented");
     // bar_ = std::move(bar);
     // bar_->setParent(this);
 }
diff --git a/Sources/GameEngine/Renderers/Objects/Entity/ConcreteEntityRenderer.cpp b/Sources/GameEngine/Renderers/Objects/Entity/ConcreteEntityRenderer.cpp
index b6b2dd21..7efeadd7 100644
--- a/Sources/GameEngine/Renderers/Objects/Entity/ConcreteEntityRenderer.cpp
+++ b/Sources/GameEngine/Renderers/Objects/Entity/ConcreteEntityRenderer.cpp
@@ -31,14 +31,14 @@ ConcreteEntityRenderer::ConcreteEntityRenderer(RendererContext& context)
 
 ConcreteEntityRenderer::~ConcreteEntityRenderer()
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
     shader_.Clear();
     instancesShader_.Clear();
 }
 
 void ConcreteEntityRenderer::init()
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
     shader_.Init();
     instancesShader_.Init();
     entityRenderer_.init();
@@ -83,7 +83,7 @@ void ConcreteEntityRenderer::unSubscribeAll()
 
 void ConcreteEntityRenderer::reloadShaders()
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
     shader_.Reload();
     instancesShader_.Reload();
 }
diff --git a/Sources/GameEngine/Renderers/Objects/Entity/EntityRenderer.cpp b/Sources/GameEngine/Renderers/Objects/Entity/EntityRenderer.cpp
index fd0fc824..b4893109 100755
--- a/Sources/GameEngine/Renderers/Objects/Entity/EntityRenderer.cpp
+++ b/Sources/GameEngine/Renderers/Objects/Entity/EntityRenderer.cpp
@@ -24,7 +24,7 @@ EntityRenderer::EntityRenderer(RendererContext& context)
 
 EntityRenderer::~EntityRenderer()
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
     unSubscribeAll();
     cleanUp();
 }
@@ -127,7 +127,7 @@ void EntityRenderer::unSubscribe(GameObject& gameObject)
 
 void EntityRenderer::unSubscribeAll()
 {
-    DEBUG_LOG("subscribes_ size: " + std::to_string(subscribes_.size()) + " subscribes_ clear");
+    /* LOG TO FIX*/  LOG_ERROR << ("subscribes_ size: " + std::to_string(subscribes_.size()) + " subscribes_ clear");
     subscribes_.clear();
 }
 
@@ -250,7 +250,7 @@ EntityRenderer::GroupedEntities EntityRenderer::groupEntities() const
                 {
                     if (classificatedToSingleIter->second.size() > 1)
                     {
-                        ERROR_LOG("Multiple single should be only for animated models");
+                        /* LOG TO FIX*/  LOG_ERROR << ("Multiple single should be only for animated models");
                         continue;
                     }
 
@@ -299,7 +299,7 @@ void EntityRenderer::renderModel(const EntitySubscriber& subsriber, const Model&
     {
         if (not mesh.GetGraphicsObjectId())
         {
-            DEBUG_LOG("not mesh.GetGraphicsObjectId()");
+            /* LOG TO FIX*/  LOG_ERROR << ("not mesh.GetGraphicsObjectId()");
             continue;
         }
 
@@ -311,7 +311,7 @@ void EntityRenderer::renderModel(const EntitySubscriber& subsriber, const Model&
         }
         else
         {
-            DEBUG_LOG("not meshBuffer");
+            /* LOG TO FIX*/  LOG_ERROR << ("not meshBuffer");
             continue;
         }
 
@@ -322,7 +322,7 @@ void EntityRenderer::renderModel(const EntitySubscriber& subsriber, const Model&
         }
         else
         {
-            DEBUG_LOG("not perMeshUpdateBuffer");
+            /* LOG TO FIX*/  LOG_ERROR << ("not perMeshUpdateBuffer");
             continue;
         }
 
@@ -334,7 +334,7 @@ void EntityRenderer::renderModel(const EntitySubscriber& subsriber, const Model&
         }
         else
         {
-            DEBUG_LOG("not perMeshConstantBuffer");
+            /* LOG TO FIX*/  LOG_ERROR << ("not perMeshConstantBuffer");
             continue;
         }
 
diff --git a/Sources/GameEngine/Renderers/Objects/Grass/GrassRenderer.cpp b/Sources/GameEngine/Renderers/Objects/Grass/GrassRenderer.cpp
index 7fba2a5e..1019a396 100755
--- a/Sources/GameEngine/Renderers/Objects/Grass/GrassRenderer.cpp
+++ b/Sources/GameEngine/Renderers/Objects/Grass/GrassRenderer.cpp
@@ -44,7 +44,7 @@ void GrassRenderer::init()
 {
     shader_.Init();
     InitShaderBuffer();
-    DEBUG_LOG("Grass renderer initialized.");
+    /* LOG TO FIX*/  LOG_ERROR << ("Grass renderer initialized.");
 }
 
 void GrassRenderer::render()
@@ -142,7 +142,7 @@ void GrassRenderer::RenderModel(const Model& model)
             }
         }
     }
-    // DEBUG_LOG("rendererdMeshes : " + std::to_string(rendererdMeshes));
+    // /* LOG TO FIX*/  LOG_ERROR << ("rendererdMeshes : " + std::to_string(rendererdMeshes));
 }
 
 void GrassRenderer::RenderMesh(const Mesh& mesh)
diff --git a/Sources/GameEngine/Renderers/Objects/Shadows/ShadowBox.cpp b/Sources/GameEngine/Renderers/Objects/Shadows/ShadowBox.cpp
index f6244205..5ec780d3 100644
--- a/Sources/GameEngine/Renderers/Objects/Shadows/ShadowBox.cpp
+++ b/Sources/GameEngine/Renderers/Objects/Shadows/ShadowBox.cpp
@@ -96,7 +96,7 @@ void expDistances(float* cascadeDistances)
     for (uint32 i = 0; i < Params::MAX_SHADOW_MAP_CASADES; ++i)
     {
         cascadeDistances[i] = pow(a, i);
-        DEBUG_LOG("Cascade : " + std::to_string(cascadeDistances[i]));
+        /* LOG TO FIX*/  LOG_ERROR << ("Cascade : " + std::to_string(cascadeDistances[i]));
     }
 }
 
@@ -108,7 +108,7 @@ void quadraticDistances(float* cascadeDistances)
     for (uint32 i = 0; i < Params::MAX_SHADOW_MAP_CASADES; ++i)
     {
         cascadeDistances[i] = a * pow(i, 2) + s0;
-        DEBUG_LOG("Cascade : " + std::to_string(cascadeDistances[i]));
+        /* LOG TO FIX*/  LOG_ERROR << ("Cascade : " + std::to_string(cascadeDistances[i]));
     }
 }
 
@@ -120,7 +120,7 @@ void linearDistances(float* cascadeDistances)
     for (uint32 i = 0; i < Params::MAX_SHADOW_MAP_CASADES; ++i)
     {
         cascadeDistances[i] = a * i + s0;
-        DEBUG_LOG("Cascade : " + std::to_string(cascadeDistances[i]));
+        /* LOG TO FIX*/  LOG_ERROR << ("Cascade : " + std::to_string(cascadeDistances[i]));
     }
 }
 
@@ -131,7 +131,7 @@ void ShadowBox::caclulateCascadeDistances()
         for (uint32 i = 0; i < Params::MAX_SHADOW_MAP_CASADES; ++i)
         {
             cascadeDistances_[i] = *EngineConf.renderer.shadows.distance;
-            DEBUG_LOG("Cascade : " + std::to_string(cascadeDistances_[i]));
+            /* LOG TO FIX*/  LOG_ERROR << ("Cascade : " + std::to_string(cascadeDistances_[i]));
         }
         return;
     }
diff --git a/Sources/GameEngine/Renderers/Objects/Shadows/ShadowMapRenderer.cpp b/Sources/GameEngine/Renderers/Objects/Shadows/ShadowMapRenderer.cpp
index 445bff46..2fabea85 100644
--- a/Sources/GameEngine/Renderers/Objects/Shadows/ShadowMapRenderer.cpp
+++ b/Sources/GameEngine/Renderers/Objects/Shadows/ShadowMapRenderer.cpp
@@ -82,7 +82,7 @@ void ShadowMapRenderer::init()
 
     if (not perFrameBuffer_)
     {
-        ERROR_LOG("Shadow perframebuffer creation error.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Shadow perframebuffer creation error.");
         shader_.Clear();
         return;
     }
@@ -104,7 +104,7 @@ void ShadowMapRenderer::init()
         {
             context_.graphicsApi_.DeleteFrameBuffer(*shadowFrameBuffer);
             shadowFrameBuffer = nullptr;
-            ERROR_LOG("Shadow framebuffer creation error.");
+            /* LOG TO FIX*/  LOG_ERROR << ("Shadow framebuffer creation error.");
             shader_.Clear();
             return;
         }
diff --git a/Sources/GameEngine/Renderers/Objects/Terrain/Mesh/TerrainMeshRenderer.cpp b/Sources/GameEngine/Renderers/Objects/Terrain/Mesh/TerrainMeshRenderer.cpp
index b57f6961..088d24fd 100644
--- a/Sources/GameEngine/Renderers/Objects/Terrain/Mesh/TerrainMeshRenderer.cpp
+++ b/Sources/GameEngine/Renderers/Objects/Terrain/Mesh/TerrainMeshRenderer.cpp
@@ -110,7 +110,7 @@ void TerrainMeshRenderer::subscribe(GameObject& gameObject)
         if (not terrain or terrain->GetRendererType() != Components::TerrainRendererComponent::RendererType::Mesh)
             return;
 
-        DEBUG_LOG("Subscribe goId : " + std::to_string(gameObject.GetId()));
+        /* LOG TO FIX*/  LOG_ERROR << ("Subscribe goId : " + std::to_string(gameObject.GetId()));
         auto terrainMeshComponent = terrain->GetMeshTerrain();
         if (terrainMeshComponent)
         {
@@ -118,7 +118,7 @@ void TerrainMeshRenderer::subscribe(GameObject& gameObject)
         }
         else
         {
-            DEBUG_LOG("terrainMeshComponent not exist");
+            /* LOG TO FIX*/  LOG_ERROR << ("terrainMeshComponent not exist");
         }
     }
 }
@@ -129,14 +129,14 @@ void TerrainMeshRenderer::unSubscribe(GameObject& gameObject)
 
     if (iter != subscribes_.end())
     {
-        DEBUG_LOG("unSubscribe goId : " + std::to_string(gameObject.GetId()));
+        /* LOG TO FIX*/  LOG_ERROR << ("unSubscribe goId : " + std::to_string(gameObject.GetId()));
         std::lock_guard<std::mutex> lk(subscriberMutex_);
         subscribes_.erase(iter);
     }
 }
 void TerrainMeshRenderer::unSubscribeAll()
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
     std::lock_guard<std::mutex> lk(subscriberMutex_);
     subscribes_.clear();
 }
diff --git a/Sources/GameEngine/Renderers/Objects/Water/WaterReflectionRefractionRenderer.cpp b/Sources/GameEngine/Renderers/Objects/Water/WaterReflectionRefractionRenderer.cpp
index d1d638bd..8300666d 100644
--- a/Sources/GameEngine/Renderers/Objects/Water/WaterReflectionRefractionRenderer.cpp
+++ b/Sources/GameEngine/Renderers/Objects/Water/WaterReflectionRefractionRenderer.cpp
@@ -269,7 +269,7 @@ GraphicsApi::IFrameBuffer* WaterReflectionRefractionRenderer::createWaterFbo(con
     if (not status)
     {
         context_.graphicsApi_.DeleteFrameBuffer(*result);
-        ERROR_LOG("Shadow framebuffer creation error.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Shadow framebuffer creation error.");
         return nullptr;
     }
     return result;
@@ -449,7 +449,7 @@ WaterReflectionRefractionRenderer::WaterFbo* WaterReflectionRefractionRenderer::
 WaterReflectionRefractionRenderer::WaterFbo* WaterReflectionRefractionRenderer::createWaterTilesTextures(
     float positionY)
 {
-    DEBUG_LOG("Create new water fbo positionY=" + std::to_string(positionY));
+    /* LOG TO FIX*/  LOG_ERROR << ("Create new water fbo positionY=" + std::to_string(positionY));
     WaterReflectionRefractionRenderer::WaterFbo waterFbo;
     waterFbo.positionY              = positionY;
     waterFbo.reflectionFrameBuffer_ = createWaterFbo(EngineConf.renderer.water.waterReflectionResolution);
diff --git a/Sources/GameEngine/Renderers/Postproccesing/PostprocessingRenderersManager.cpp b/Sources/GameEngine/Renderers/Postproccesing/PostprocessingRenderersManager.cpp
index f16df234..42c05e3f 100644
--- a/Sources/GameEngine/Renderers/Postproccesing/PostprocessingRenderersManager.cpp
+++ b/Sources/GameEngine/Renderers/Postproccesing/PostprocessingRenderersManager.cpp
@@ -33,14 +33,14 @@ void PostProcessingManager::Init()
     }
     else
     {
-        ERROR_LOG("Buffer creation error.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Buffer creation error.");
     }
 }
 void PostProcessingManager::Render(GraphicsApi::IFrameBuffer& startedFrameBuffer, const Scene& scene)
 {
     if (not fboManager_->GetStatus() or postProcessingRenderers_.empty())
     {
-        ERROR_LOG("No activePostProcessing effects.");
+        /* LOG TO FIX*/  LOG_ERROR << ("No activePostProcessing effects.");
         return;
     }
     fboManager_->StartFrame();
diff --git a/Sources/GameEngine/Renderers/RenderersManager.cpp b/Sources/GameEngine/Renderers/RenderersManager.cpp
index d29b7b17..52830656 100644
--- a/Sources/GameEngine/Renderers/RenderersManager.cpp
+++ b/Sources/GameEngine/Renderers/RenderersManager.cpp
@@ -66,7 +66,7 @@ RenderersManager::RenderersManager(GraphicsApi::IGraphicsApi& graphicsApi, IGpuR
 }
 RenderersManager::~RenderersManager()
 {
-    DEBUG_LOG("destructor");
+    /* LOG TO FIX*/  LOG_ERROR << ("destructor");
 
     EngineConf.renderer.shadows.isEnabled.unsubscribe(shadowEnabledSubscriptionId_);
     EngineConf.renderer.viewDistance.unsubscribe(viewDistanceSubscriptionId_);
@@ -104,7 +104,7 @@ void RenderersManager::createMainRenderer()
 
     if (supportedRenderers.empty())
     {
-        ERROR_LOG("Graphics api not supporting any renderer!");
+        /* LOG TO FIX*/  LOG_ERROR << ("Graphics api not supporting any renderer!");
         return;
     }
 
@@ -113,13 +113,13 @@ void RenderersManager::createMainRenderer()
         auto iter = std::find(supportedRenderers.begin(), supportedRenderers.end(), GraphicsApi::RendererType::SIMPLE);
         if (iter != supportedRenderers.end())
         {
-            DEBUG_LOG("Create base renderer");
+            /* LOG TO FIX*/  LOG_ERROR << ("Create base renderer");
             mainRenderer_ = std::make_unique<BaseRenderer>(rendererContext_);
         }
         else
         {
-            DEBUG_LOG("Graphics api are not supporting SIMPLE renderer try using full");
-            DEBUG_LOG("Create deffered renderer");
+            /* LOG TO FIX*/  LOG_ERROR << ("Graphics api are not supporting SIMPLE renderer try using full");
+            /* LOG TO FIX*/  LOG_ERROR << ("Create deffered renderer");
             mainRenderer_ = std::make_unique<DefferedRenderer>(rendererContext_);
         }
         return;
@@ -130,13 +130,13 @@ void RenderersManager::createMainRenderer()
         auto iter = std::find(supportedRenderers.begin(), supportedRenderers.end(), GraphicsApi::RendererType::FULL);
         if (iter != supportedRenderers.end())
         {
-            DEBUG_LOG("Create deffered renderer");
+            /* LOG TO FIX*/  LOG_ERROR << ("Create deffered renderer");
             mainRenderer_ = std::make_unique<DefferedRenderer>(rendererContext_);
         }
         else
         {
-            DEBUG_LOG("Graphics api are not supporting FULL renderer try using simple");
-            DEBUG_LOG("Create base renderer");
+            /* LOG TO FIX*/  LOG_ERROR << ("Graphics api are not supporting FULL renderer try using simple");
+            /* LOG TO FIX*/  LOG_ERROR << ("Create base renderer");
             mainRenderer_ = std::make_unique<BaseRenderer>(rendererContext_);
         }
         return;
diff --git a/Sources/GameEngine/Resources/BufferObject.cpp b/Sources/GameEngine/Resources/BufferObject.cpp
index f91bc1c3..59d88f34 100644
--- a/Sources/GameEngine/Resources/BufferObject.cpp
+++ b/Sources/GameEngine/Resources/BufferObject.cpp
@@ -18,7 +18,7 @@ void BaseBufferObject::ReleaseGpuPass()
 {
     if (graphicsObjectId_)
     {
-       // DEBUG_LOG("Clean gpu resources graphicsObjectId_=" + std::to_string(*graphicsObjectId_));
+       // /* LOG TO FIX*/  LOG_ERROR << ("Clean gpu resources graphicsObjectId_=" + std::to_string(*graphicsObjectId_));
         graphicsApi_.DeleteShaderBuffer(*graphicsObjectId_);
     }
     GpuObject::ReleaseGpuPass();
diff --git a/Sources/GameEngine/Resources/File.cpp b/Sources/GameEngine/Resources/File.cpp
index 46d4ff11..9d7d3621 100644
--- a/Sources/GameEngine/Resources/File.cpp
+++ b/Sources/GameEngine/Resources/File.cpp
@@ -207,7 +207,7 @@ bool File::openToWrite()
 {
     if (fp_)
     {
-        ERROR_LOG("Can not write to openned file!.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Can not write to openned file!.");
         return false;
     }
 
@@ -224,7 +224,7 @@ bool File::openToRead()
 {
     if (fp_)
     {
-        ERROR_LOG("Can not open to openned file!.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Can not open to openned file!.");
         return false;
     }
 
@@ -272,7 +272,7 @@ void File::ClearSpecialCharacters()
                            if (result)
                            {
                                changeNeeded = true;
-                               DEBUG_LOG(std::string("Remove notAllowed character \"") + c + "\" from file : " + GetFilename());
+                               /* LOG TO FIX*/  LOG_ERROR << (std::string("Remove notAllowed character \"") + c + "\" from file : " + GetFilename());
                            }
                            return result;
                        });
diff --git a/Sources/GameEngine/Resources/GpuObject.cpp b/Sources/GameEngine/Resources/GpuObject.cpp
index 46319e80..53665b3e 100644
--- a/Sources/GameEngine/Resources/GpuObject.cpp
+++ b/Sources/GameEngine/Resources/GpuObject.cpp
@@ -10,12 +10,12 @@ GpuObject::GpuObject()
     : graphicsObjectId_(std::nullopt)
     , id_(s_Id_++)
 {
-    DEBUG_LOG("GpuObject craeted. Id=" + std::to_string(id_));
+    /* LOG TO FIX*/  LOG_ERROR << ("GpuObject craeted. Id=" + std::to_string(id_));
 }
 
 GpuObject::~GpuObject()
 {
-    DEBUG_LOG("GpuObject destroyed. Id=" + std::to_string(id_));
+    /* LOG TO FIX*/  LOG_ERROR << ("GpuObject destroyed. Id=" + std::to_string(id_));
 }
 void GpuObject::UpdateGpuPass()
 {
diff --git a/Sources/GameEngine/Resources/GpuResourceLoader.cpp b/Sources/GameEngine/Resources/GpuResourceLoader.cpp
index b84e7557..869c6724 100755
--- a/Sources/GameEngine/Resources/GpuResourceLoader.cpp
+++ b/Sources/GameEngine/Resources/GpuResourceLoader.cpp
@@ -15,7 +15,7 @@ GpuResourceLoader::GpuResourceLoader()
 
 GpuResourceLoader::~GpuResourceLoader()
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
 }
 void GpuResourceLoader::AddFunctionToCall(std::function<void()> f)
 {
@@ -175,7 +175,7 @@ void GpuResourceLoader::RuntimeLoadObjectToGpu()
         }
         else
         {
-            DEBUG_LOG("Is already loaded.");
+            /* LOG TO FIX*/  LOG_ERROR << ("Is already loaded.");
         }
 
         obj = GetObjectToGpuLoadingPass();
@@ -194,7 +194,7 @@ void GpuResourceLoader::RuntimeUpdateObjectGpu()
         }
         else
         {
-            ERROR_LOG("Object not loaded");
+            /* LOG TO FIX*/  LOG_ERROR << ("Object not loaded");
         }
 
         obj = GetObjectToUpdateGpuPass();
diff --git a/Sources/GameEngine/Resources/Models/Bone.cpp b/Sources/GameEngine/Resources/Models/Bone.cpp
index c9a1d2e4..6765727c 100644
--- a/Sources/GameEngine/Resources/Models/Bone.cpp
+++ b/Sources/GameEngine/Resources/Models/Bone.cpp
@@ -22,6 +22,6 @@ void VertexBoneData::AddBoneData(uint32 bone_id, float weight)
             return;
         }
     }
-    ERROR_LOG("To many bones per vertex. Current limit : " + std::to_string(NUM_BONES_PER_VEREX));
+    /* LOG TO FIX*/  LOG_ERROR << ("To many bones per vertex. Current limit : " + std::to_string(NUM_BONES_PER_VEREX));
 }
 }  // namespace GameEngine
diff --git a/Sources/GameEngine/Resources/Models/ModelWrapper.cpp b/Sources/GameEngine/Resources/Models/ModelWrapper.cpp
index 8e5c4458..9bc2c58d 100644
--- a/Sources/GameEngine/Resources/Models/ModelWrapper.cpp
+++ b/Sources/GameEngine/Resources/Models/ModelWrapper.cpp
@@ -22,7 +22,7 @@ void ModelWrapper::Update(Model* model, LevelOfDetail lvl)
     }
     else
     {
-        ERROR_LOG("Can not update, model not found");
+        /* LOG TO FIX*/  LOG_ERROR << ("Can not update, model not found");
     }
 }
 Model* ModelWrapper::Get(LevelOfDetail lvl)
diff --git a/Sources/GameEngine/Resources/Models/WBLoader/AbstractLoader.cpp b/Sources/GameEngine/Resources/Models/WBLoader/AbstractLoader.cpp
index 261bf9b4..6584069a 100644
--- a/Sources/GameEngine/Resources/Models/WBLoader/AbstractLoader.cpp
+++ b/Sources/GameEngine/Resources/Models/WBLoader/AbstractLoader.cpp
@@ -33,7 +33,7 @@ void AbstractLoader::Parse(const File& file, const LoadingParameters& loadingPar
         ReadBinFile(binFile, textureLoader_);
         loadedFromBin_ = true;
         fileName_      = binFile;
-        DEBUG_LOG("Load from bin file :" + fileName_);
+        /* LOG TO FIX*/  LOG_ERROR << ("Load from bin file :" + fileName_);
     }
     else
     {
@@ -59,7 +59,7 @@ std::unique_ptr<Model> AbstractLoader::Create()
 
     auto endTime  = std::chrono::high_resolution_clock::now();
     auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();
-    DEBUG_LOG("Model created. " + fileName_ + ". Time : " + std::to_string(duration) +
+    /* LOG TO FIX*/  LOG_ERROR << ("Model created. " + fileName_ + ". Time : " + std::to_string(duration) +
               "ms. Meshes : " + std::to_string(newModel->GetMeshes().size()));
     return newModel;
 }
@@ -72,7 +72,7 @@ std::unique_ptr<Model> AbstractLoader::CreateModel()
     {
         normalizeFactor = 1.f / boundingBox.maxScale();
         boundingBox.scale(vec3(normalizeFactor));
-        DEBUG_LOG("Normalized boundingBox: " + std::to_string(boundingBox.min()) + "-" + std::to_string(boundingBox.max()));
+        /* LOG TO FIX*/  LOG_ERROR << ("Normalized boundingBox: " + std::to_string(boundingBox.min()) + "-" + std::to_string(boundingBox.max()));
     }
 
     auto newModel = std::make_unique<Model>(boundingBox);
@@ -80,13 +80,13 @@ std::unique_ptr<Model> AbstractLoader::CreateModel()
 
     if (objects.empty())
     {
-        ERROR_LOG(fileName_ + ". No object to create!");
+        /* LOG TO FIX*/  LOG_ERROR << (fileName_ + ". No object to create!");
     }
     for (auto& obj : objects)
     {
         if (obj.meshes.empty())
         {
-            ERROR_LOG(fileName_ + ". No meshes in object!");
+            /* LOG TO FIX*/  LOG_ERROR << (fileName_ + ". No meshes in object!");
         }
 
         NormalizeMatrix(obj.transformMatrix, normalizeFactor);
@@ -142,8 +142,8 @@ BoundingBox AbstractLoader::getModelBoundingBox() const
 
     BoundingBox modelBox;
     modelBox.minMax(min, max);
-    DEBUG_LOG("BoundingBox: " + std::to_string(modelBox.min()) + "-" + std::to_string(modelBox.max()));
-    DEBUG_LOG("Normalize factor : " + std::to_string(1.f / modelBox.maxScale()));
+    /* LOG TO FIX*/  LOG_ERROR << ("BoundingBox: " + std::to_string(modelBox.min()) + "-" + std::to_string(modelBox.max()));
+    /* LOG TO FIX*/  LOG_ERROR << ("Normalize factor : " + std::to_string(1.f / modelBox.maxScale()));
     return modelBox;
 }
 }  // namespace WBLoader
diff --git a/Sources/GameEngine/Resources/Models/WBLoader/Assimp/AssimpLoader.cpp b/Sources/GameEngine/Resources/Models/WBLoader/Assimp/AssimpLoader.cpp
index 58285ab9..3fe68e85 100644
--- a/Sources/GameEngine/Resources/Models/WBLoader/Assimp/AssimpLoader.cpp
+++ b/Sources/GameEngine/Resources/Models/WBLoader/Assimp/AssimpLoader.cpp
@@ -176,7 +176,7 @@ AssimpLoader::AssimpLoader(ITextureLoader& textureLoader)
     : AbstractLoader(textureLoader.GetGraphicsApi(), textureLoader)
 {
     auto version = std::to_string(aiGetVersionMajor()) + "." + std::to_string(aiGetVersionMinor());
-    DEBUG_LOG("Assimp version : " + version);
+    /* LOG TO FIX*/ LOG_ERROR << ("Assimp version : " + version);
 }
 
 AssimpLoader::~AssimpLoader()
@@ -205,13 +205,13 @@ void AssimpLoader::ParseFile(const File& file)
 
     if (not scene)
     {
-        ERROR_LOG("import file error : " + importer.GetErrorString());
+        LOG_ERROR << "import file error : " << importer.GetErrorString();
         return;
     }
 
     if (scene->mFlags == AI_SCENE_FLAGS_INCOMPLETE)
     {
-        WARNING_LOG("import scene incomplete");
+        LOG_DEBUG << "import scene incomplete";
     }
 
     currentProcessingFile_ = file;
@@ -237,10 +237,10 @@ void AssimpLoader::ParseFile(const File& file)
 bool AssimpLoader::CheckExtension(const File& file)
 {
     return file.IsFormat({"AMF", "3DS",      "AC",      "ASE", "ASSBIN", "B3D",  "BVH",   "COLLADA", "DXF", "CSM",
-                             "DAE", "HMP",      "IRRMESH", "IRR", "LWO",    "LWS",  "MD2",   "MD3",     "MD5", "MD5MESH",
-                             "MDC", "MDL",      "NFF",     "NDO", "OFF",    "OBJ",  "OGRE",  "OPENGEX", "PLY", "MS3D",
-                             "COB", "BLEND",    "IFC",     "XGL", "FBX",    "Q3D",  "Q3BSP", "RAW",     "SIB", "SMD",
-                             "STL", "TERRAGEN", "3D",      "X",   "X3D",    "GLTF", "3MF",   "MMD",     "STEP"});
+                          "DAE", "HMP",      "IRRMESH", "IRR", "LWO",    "LWS",  "MD2",   "MD3",     "MD5", "MD5MESH",
+                          "MDC", "MDL",      "NFF",     "NDO", "OFF",    "OBJ",  "OGRE",  "OPENGEX", "PLY", "MS3D",
+                          "COB", "BLEND",    "IFC",     "XGL", "FBX",    "Q3D",  "Q3BSP", "RAW",     "SIB", "SMD",
+                          "STL", "TERRAGEN", "3D",      "X",   "X3D",    "GLTF", "3MF",   "MMD",     "STEP"});
 
     // AMF 3DS AC ASE ASSBIN B3D BVH COLLADA DXF CSM HMP IRRMESH IRR LWO LWS MD2 MD3 MD5 MDC MDL NFF NDO OFF OBJ
     // OGRE OPENGEX PLY MS3D COB BLEND IFC XGL FBX Q3D Q3BSP RAW SIB SMD STL TERRAGEN 3D X X3D GLTF 3MF MMD STEP
@@ -395,7 +395,7 @@ void AssimpLoader::loadBonesData(const aiScene& scene, const aiMesh& mesh, Mesh&
         }
         else
         {
-            WARNING_LOG("To many bones per vertex");
+            /* LOG TO FIX*/ LOG_ERROR << ("To many bones per vertex");
         }
         ++i;
     }
@@ -406,14 +406,15 @@ void AssimpLoader::processSkeleton(const aiScene& scene)
     {
         const aiNode& node = *scene.mRootNode;
 
-        DEBUG_LOG("Rootnode bone name: " + std::string(node.mName.data));
+        LOG_DEBUG << "Rootnode bone name: " << node.mName.data;
 
         for (const auto& bone : bones_)
-            DEBUG_LOG(bone.first);
+            LOG_DEBUG << bone.first;
+
         auto armatureNode = findArmatureRootNode(node);
         if (armatureNode)
         {
-            DEBUG_LOG("Root node found : " + armatureNode->mName.data);
+            LOG_DEBUG << "Root node found : " << armatureNode->mName.data;
             createSkeleton(*armatureNode, object_->skeleton_);
         }
     }
@@ -452,7 +453,8 @@ void AssimpLoader::processAnimations(const aiScene& scene)
         std::string name(aiAnim.mName.data);
         if (name.empty())
             name = "noname";
-        DEBUG_LOG("Animation : " + name);
+
+        LOG_DEBUG << "Animation : " << name;
         objects.back().animationClips_.insert({name, processAnimation(aiAnim)});
     }
 }
@@ -503,7 +505,7 @@ Material AssimpLoader::processMaterial(const aiScene& scene, const aiMesh& mesh)
     }
     if (mat->GetTextureCount(aiTextureType_DIFFUSE) > 1)
     {
-        WARNING_LOG("MultiTexturing not supported.");
+        LOG_DEBUG << "MultiTexturing not supported.";
     }
     for (uint32 i = 0; i < mat->GetTextureCount(aiTextureType_DIFFUSE); ++i)
     {
@@ -570,7 +572,8 @@ std::string AssimpLoader::getTexturePath(const std::string& path) const
     if (std::filesystem::exists(path))
         return path;
 
-    LOG_DEBUG << "Texture not found : " << path << ". Searching recursively in model based directory : " << currentProcessingFile_->GetAbsolutePath().parent_path();
+    LOG_DEBUG << "Texture not found : " << path
+              << ". Searching recursively in model based directory : " << currentProcessingFile_->GetAbsolutePath().parent_path();
 
     return Utils::FindFile(File(path).GetFilename(), currentProcessingFile_->GetAbsolutePath().parent_path());
 }
@@ -587,7 +590,7 @@ Animation::AnimationClip AssimpLoader::processAnimation(const aiAnimation& aiAni
 
         if (not joint)
         {
-            ERROR_LOG("Joint not found in skeleton : " + jointName);
+            LOG_DEBUG << "Joint not found in skeleton : " << jointName;
             continue;
         }
 
@@ -669,7 +672,7 @@ void AssimpLoader::printTree(const aiNode& node, uint32 depth) const
     for (uint32 i = 0; i < depth; ++i)
         str += "---";
 
-    DEBUG_LOG(str + name + "( Depth : " + std::to_string(depth) + ")");
+    /* LOG TO FIX*/ LOG_ERROR << (str + name + "( Depth : " + std::to_string(depth) + ")");
 
     for (uint32 i = 0; i < node.mNumChildren; ++i)
     {
diff --git a/Sources/GameEngine/Resources/Models/WBLoader/BEngine/BEngineLoader.cpp b/Sources/GameEngine/Resources/Models/WBLoader/BEngine/BEngineLoader.cpp
index 3e9880bc..ace14722 100644
--- a/Sources/GameEngine/Resources/Models/WBLoader/BEngine/BEngineLoader.cpp
+++ b/Sources/GameEngine/Resources/Models/WBLoader/BEngine/BEngineLoader.cpp
@@ -24,7 +24,7 @@ std::vector<float> convertFloatNode(const TreeNode& node)
         }
         catch (...)
         {
-            ERROR_LOG("convert error");
+            /* LOG TO FIX*/  LOG_ERROR << ("convert error");
             return 0.f;
         }
     });
@@ -43,7 +43,7 @@ std::vector<int32> convertIntNode(const TreeNode& node)
         }
         catch (...)
         {
-            ERROR_LOG("convert error");
+            /* LOG TO FIX*/  LOG_ERROR << ("convert error");
             return 0;
         }
     });
@@ -79,7 +79,7 @@ void BEngineLoader::ParseFile(const File& file)
         }
         else
         {
-            ERROR_LOG("no vertices in object");
+            /* LOG TO FIX*/  LOG_ERROR << ("no vertices in object");
             continue;
         }
         auto positionSize = mesh.GetMeshDataRef().positions_.size();
@@ -91,7 +91,7 @@ void BEngineLoader::ParseFile(const File& file)
         }
         else
         {
-            ERROR_LOG("no indices in in object");
+            /* LOG TO FIX*/  LOG_ERROR << ("no indices in in object");
             continue;
         }
 
diff --git a/Sources/GameEngine/Resources/Models/WBLoader/Binary/BinaryReader.cpp b/Sources/GameEngine/Resources/Models/WBLoader/Binary/BinaryReader.cpp
index e274262b..3c8517b7 100644
--- a/Sources/GameEngine/Resources/Models/WBLoader/Binary/BinaryReader.cpp
+++ b/Sources/GameEngine/Resources/Models/WBLoader/Binary/BinaryReader.cpp
@@ -100,7 +100,7 @@ void ReadFile(std::ifstream& file, Animation::AnimationClip& clip)
     auto diff = fabs(correctLength - clip.GetLength());
     if (diff < std::numeric_limits<float>::epsilon())
     {
-        ERROR_LOG("Animation length is diffrent : " + std::to_string(diff));
+        /* LOG TO FIX*/  LOG_ERROR << ("Animation length is diffrent : " + std::to_string(diff));
     }
 }
 
@@ -160,7 +160,7 @@ std::unique_ptr<Model> ReadBinFile(const std::string& filename, ITextureLoader&
 
     std::string file_name;
     ReadFile(file, file_name);
-    DEBUG_LOG("file : " + file_name);
+    /* LOG TO FIX*/  LOG_ERROR << ("file : " + file_name);
 
     BoundingBox boundingBox;
     ReadFile(file, boundingBox);
diff --git a/Sources/GameEngine/Resources/Models/WBLoader/Collada/Collada.cpp b/Sources/GameEngine/Resources/Models/WBLoader/Collada/Collada.cpp
index 3e0b50e8..c3fda47f 100644
--- a/Sources/GameEngine/Resources/Models/WBLoader/Collada/Collada.cpp
+++ b/Sources/GameEngine/Resources/Models/WBLoader/Collada/Collada.cpp
@@ -271,7 +271,7 @@ void ColladaDae::PrepareMeshData(const Collada::Mesh& colladaMesh, Mesh& newMesh
                     }
                     else
                     {
-                        ERROR_LOG("POSITION : Undefined reference to : " + vertInput.sourceId);
+                        /* LOG TO FIX*/  LOG_ERROR << ("POSITION : Undefined reference to : " + vertInput.sourceId);
                     }
                 }
             }
diff --git a/Sources/GameEngine/Resources/Models/WBLoader/Collada/MergeTool/MergeTool.cpp b/Sources/GameEngine/Resources/Models/WBLoader/Collada/MergeTool/MergeTool.cpp
index 2c35197e..37e4c90a 100644
--- a/Sources/GameEngine/Resources/Models/WBLoader/Collada/MergeTool/MergeTool.cpp
+++ b/Sources/GameEngine/Resources/Models/WBLoader/Collada/MergeTool/MergeTool.cpp
@@ -30,7 +30,7 @@ void GameEngine::ColladaMergeAnimationClips(const std::vector<std::string>& file
         }
         catch (...)
         {
-           ERROR_LOG("Can not parse file " + filename);
+           /* LOG TO FIX*/  LOG_ERROR << ("Can not parse file " + filename);
             return;
         }
         // auto root = document.first_node();
diff --git a/Sources/GameEngine/Resources/Models/WBLoader/Collada/Xml/ColladaCommon.cpp b/Sources/GameEngine/Resources/Models/WBLoader/Collada/Xml/ColladaCommon.cpp
index cb4c529c..69096627 100644
--- a/Sources/GameEngine/Resources/Models/WBLoader/Collada/Xml/ColladaCommon.cpp
+++ b/Sources/GameEngine/Resources/Models/WBLoader/Collada/Xml/ColladaCommon.cpp
@@ -107,7 +107,7 @@ mat4 GetMatrixFromString(const std::string& str)
     mat4 transform_matrix(1.f);
     if (mdata.size() != 16)
     {
-        DEBUG_LOG("GetMatrixFromString string is wrong size.");
+        /* LOG TO FIX*/  LOG_ERROR << ("GetMatrixFromString string is wrong size.");
         return transform_matrix;
     }
 
diff --git a/Sources/GameEngine/Resources/Models/WBLoader/Collada/Xml/MainReader.cpp b/Sources/GameEngine/Resources/Models/WBLoader/Collada/Xml/MainReader.cpp
index 046a1909..c6c23f02 100644
--- a/Sources/GameEngine/Resources/Models/WBLoader/Collada/Xml/MainReader.cpp
+++ b/Sources/GameEngine/Resources/Models/WBLoader/Collada/Xml/MainReader.cpp
@@ -34,7 +34,7 @@ void ReadCollada(const File& filename, ColladaData& colladaData)
     }
     catch (...)
     {
-        ERROR_LOG("Can not parse file " + filename.GetFilename());
+        /* LOG TO FIX*/  LOG_ERROR << ("Can not parse file " + filename.GetFilename());
         return;
     }
     auto root = document.first_node();
diff --git a/Sources/GameEngine/Resources/Models/WBLoader/LoaderManager.cpp b/Sources/GameEngine/Resources/Models/WBLoader/LoaderManager.cpp
index e836ca28..d724a3c3 100644
--- a/Sources/GameEngine/Resources/Models/WBLoader/LoaderManager.cpp
+++ b/Sources/GameEngine/Resources/Models/WBLoader/LoaderManager.cpp
@@ -30,7 +30,7 @@ std::unique_ptr<Model> LoaderManager::Load(const File& file, const LoadingParame
 
     if (loaderPtr == nullptr)
     {
-        ERROR_LOG("Try parse unkonwn file extension : " + file.GetExtension());
+        /* LOG TO FIX*/  LOG_ERROR << ("Try parse unkonwn file extension : " + file.GetExtension());
         return nullptr;
     }
 
diff --git a/Sources/GameEngine/Resources/Models/WBLoader/Terrain/TerrainMeshLoader.cpp b/Sources/GameEngine/Resources/Models/WBLoader/Terrain/TerrainMeshLoader.cpp
index a56195ab..e6e61906 100644
--- a/Sources/GameEngine/Resources/Models/WBLoader/Terrain/TerrainMeshLoader.cpp
+++ b/Sources/GameEngine/Resources/Models/WBLoader/Terrain/TerrainMeshLoader.cpp
@@ -44,7 +44,7 @@ std::unique_ptr<Model> TerrainMeshLoader::Create()
 {
     if (not model_)
     {
-        ERROR_LOG("Model not created. Please parse file first.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Model not created. Please parse file first.");
         return nullptr;
     }
     return std::move(model_);
@@ -89,7 +89,7 @@ void TerrainMeshLoader::CreatePartial(Model& model, TerrainHeightTools& tools, u
     auto partialSize         = heightMapResolution / partsCount;
     auto rest                = heightMapResolution - (partsCount * partialSize);
 
-    DEBUG_LOG("Rest : " + std::to_string(rest));
+    /* LOG TO FIX*/  LOG_ERROR << ("Rest : " + std::to_string(rest));
 
     vec3 modelBoundingBoxMin(-0.5f, std::numeric_limits<float>::max(), -0.5f);
     vec3 modelBoundingBoxMax(0.5f, -std::numeric_limits<float>::max(), 0.5f);
@@ -162,7 +162,7 @@ void TerrainMeshLoader::CreateTerrainVertexes(TerrainHeightTools& tools, GameEng
             vec3 normal  = tools.GetNormal(j, i);
             vec3 tangnet = tools.GetTangent(normal);
 
-            // DEBUG_LOG("normal : " + std::to_string(normal));
+            // /* LOG TO FIX*/  LOG_ERROR << ("normal : " + std::to_string(normal));
 
             normals.push_back(normal.x);
             normals.push_back(normal.y);
diff --git a/Sources/GameEngine/Resources/ResourceManager.cpp b/Sources/GameEngine/Resources/ResourceManager.cpp
index e61296e7..5eb3eb95 100755
--- a/Sources/GameEngine/Resources/ResourceManager.cpp
+++ b/Sources/GameEngine/Resources/ResourceManager.cpp
@@ -24,7 +24,9 @@ ResourceManager::~ResourceManager()
     std::vector<Model*> toRelease;
     for (auto& model : models_)
         toRelease.push_back(model.second.resource_.get());
-    DEBUG_LOG("Release not deleted models. size :" + std::to_string(toRelease.size()));
+
+    LOG_DEBUG << "Release not deleted models. size :" << toRelease.size();
+
     for (auto model : toRelease)
         ReleaseModel(*model);
 
@@ -46,8 +48,7 @@ Model* ResourceManager::LoadModel(const File& file, const LoadingParameters& loa
         // To do: Can be useful for simplified physics collision mesh shapes.
         // Visual representation of physics shape not needed
 
-        /*   DEBUG_LOG(file.GetBaseName() +
-                     " model already loaded, instances count : " + std::to_string(modelInfo.instances_));*/
+        LOG_DEBUG << file.GetBaseName() << " model already loaded, instances count : " << modelInfo.instances_;
         return modelInfo.resource_.get();
     }
 
@@ -71,7 +72,6 @@ Model* ResourceManager::AddModel(std::unique_ptr<Model> model)
 
     std::lock_guard<std::mutex> lk(modelMutex_);
 
-    //   DEBUG_LOG("add model.");
     auto modelPtr = model.get();
     auto filename = model->GetFile() ? ("UnknowFileModel_" + std::to_string(unknowFileNameResourceId_++))
                                      : model->GetFile().GetAbsolutePath().string();
@@ -80,7 +80,7 @@ Model* ResourceManager::AddModel(std::unique_ptr<Model> model)
 
     if (iter != models_.end())
     {
-        ERROR_LOG("Model \"" + filename + "\" already exist");
+        LOG_DEBUG << "Model \"" << filename << "\" already exist";
         return nullptr;
     }
 
@@ -113,7 +113,6 @@ void ResourceManager::ReleaseModel(Model& model)
 
     gpuResourceLoader_.AddObjectToRelease(std::move(modelInfo.resource_));
     models_.erase(absoultePath);
-    //    DEBUG_LOG("models_ erase , size : " + std::to_string(models_.size()));
 }
 
 void ResourceManager::LockReleaseResources()
diff --git a/Sources/GameEngine/Resources/ResourceUtils.cpp b/Sources/GameEngine/Resources/ResourceUtils.cpp
index 44510482..a63873bd 100644
--- a/Sources/GameEngine/Resources/ResourceUtils.cpp
+++ b/Sources/GameEngine/Resources/ResourceUtils.cpp
@@ -22,7 +22,7 @@ FIBITMAP* convertTo32bppIfDifferent(FIBITMAP* image)
 
     if (bpp != 32)
     {
-        DEBUG_LOG("Convert image from " + std::to_string(bpp) + " bpp to 32 bpp");
+        /* LOG TO FIX*/  LOG_ERROR << ("Convert image from " + std::to_string(bpp) + " bpp to 32 bpp");
 
         FIBITMAP* image32bit = FreeImage_ConvertTo32Bits(image);
         FreeImage_Unload(image);
@@ -60,7 +60,7 @@ FIBITMAP* resizeImageIfisLimited(FIBITMAP* image, SizeLimitPolicy sizeLimitPolic
 
         if (resize_texture)
         {
-            DEBUG_LOG("Resize image from " + std::to_string(vec2ui(w, h)) + " to " + std::to_string(newImageSize));
+            /* LOG TO FIX*/  LOG_ERROR << ("Resize image from " + std::to_string(vec2ui(w, h)) + " to " + std::to_string(newImageSize));
 
             auto resizedImage =
                 FreeImage_Rescale(image, static_cast<int>(newImageSize.x), static_cast<int>(newImageSize.y), FILTER_BSPLINE);
@@ -72,7 +72,7 @@ FIBITMAP* resizeImageIfisLimited(FIBITMAP* image, SizeLimitPolicy sizeLimitPolic
             }
             else
             {
-                ERROR_LOG("Resize error.");
+                /* LOG TO FIX*/  LOG_ERROR << ("Resize error.");
             }
         }
     }
@@ -139,7 +139,7 @@ std::optional<Utils::Image> ReadFile(const File& file, const TextureParameters&
                              Color(pixeles[j * 4 + 2], pixeles[j * 4 + 1], pixeles[j * 4 + 0], pixeles[j * 4 + 3]));
     }
     FreeImage_Unload(image);
-    DEBUG_LOG("File: " + file.GetBaseName() + " is loaded. Size: " + std::to_string(resultImage.width) + "x" +
+    /* LOG TO FIX*/  LOG_ERROR << ("File: " + file.GetBaseName() + " is loaded. Size: " + std::to_string(resultImage.width) + "x" +
               std::to_string(resultImage.height));
     return std::move(resultImage);
 }
@@ -175,7 +175,7 @@ std::optional<Utils::Image> ReadImage(const unsigned char* data, unsigned int le
 
     if (not image)
     {
-        ERROR_LOG("Cant convert to 32 bits memory image.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Cant convert to 32 bits memory image.");
         return {};
     }
 
@@ -193,7 +193,7 @@ std::optional<Utils::Image> ReadImage(const unsigned char* data, unsigned int le
                              Color(pixeles[j * 4 + 2], pixeles[j * 4 + 1], pixeles[j * 4 + 0], pixeles[j * 4 + 3]));
     }
     FreeImage_Unload(image);
-    DEBUG_LOG("Image is loaded. Size: " + std::to_string(resultImage.width) + "x" + std::to_string(resultImage.height));
+    /* LOG TO FIX*/  LOG_ERROR << ("Image is loaded. Size: " + std::to_string(resultImage.width) + "x" + std::to_string(resultImage.height));
     return std::move(resultImage);
 }
 
@@ -241,7 +241,7 @@ void CreateHeightMap(const File& in, const File& out, const vec3& scale)
                            fwrite(&data[0], sizeof(float), size, fp);
                        },
                        [&](const std::vector<float>& data) { fwrite(&data[0], sizeof(float), size, fp); },
-                       [](std::monostate) { ERROR_LOG("Data not set!"); }},
+                       [](std::monostate) { /* LOG TO FIX*/  LOG_ERROR << ("Data not set!"); }},
                image.getImageData());
     fclose(fp);
 }
@@ -275,7 +275,7 @@ void SaveHeightMap(const HeightMap& heightmap, const File& outfile)
     auto& image = heightmap.GetImage();
     if (image.empty())
     {
-        ERROR_LOG("Can not save height map without data!");
+        /* LOG TO FIX*/  LOG_ERROR << ("Can not save height map without data!");
         return;
     }
 
@@ -303,7 +303,7 @@ void SaveHeightMap(const HeightMap& heightmap, const File& outfile)
                            fwrite(&data[0], sizeof(float), size, fp);
                        },
                        [&](const std::vector<float>& data) { fwrite(&data[0], sizeof(float), size, fp); },
-                       [](std::monostate) { ERROR_LOG("Data not set!"); }},
+                       [](std::monostate) { /* LOG TO FIX*/  LOG_ERROR << ("Data not set!"); }},
                image.getImageData());
     fclose(fp);
 
@@ -395,8 +395,8 @@ void GenerateBlendMap(const vec3& terrainScale, const HeightMap& heightMap, cons
                            Utils::SaveImage(data, image.size(), file.GetAbsolutePath().string() + "_alpha1_preview_scaled",
                                             vec2(4));
                        },
-                       [&](const std::vector<float>&) { DEBUG_LOG("GenerateBlendMapImage for floats not implemented"); },
-                       [](std::monostate) { ERROR_LOG("Data not set!"); }},
+                       [&](const std::vector<float>&) { /* LOG TO FIX*/  LOG_ERROR << ("GenerateBlendMapImage for floats not implemented"); },
+                       [](std::monostate) { /* LOG TO FIX*/  LOG_ERROR << ("Data not set!"); }},
                image.getImageData());
 }
 
diff --git a/Sources/GameEngine/Resources/TextureLoader.cpp b/Sources/GameEngine/Resources/TextureLoader.cpp
index c05cacea..23aaaad1 100755
--- a/Sources/GameEngine/Resources/TextureLoader.cpp
+++ b/Sources/GameEngine/Resources/TextureLoader.cpp
@@ -50,7 +50,7 @@ TextureLoader::~TextureLoader()
     std::vector<Texture*> toRelease;
     for (auto& texture : textures_)
         toRelease.push_back(texture.second.resource_.get());
-    DEBUG_LOG("Release not deleted textures. size :" + std::to_string(toRelease.size()));
+    /* LOG TO FIX*/  LOG_ERROR << ("Release not deleted textures. size :" + std::to_string(toRelease.size()));
     for (auto texture : toRelease)
         DeleteTexture(*texture);
 }
@@ -106,12 +106,12 @@ GeneralTexture* TextureLoader::LoadTexture(const File& inputFileName, const Text
     File inputFile = inputFileName;
     if (not inputFileName)
     {
-        // WARNING_LOG("File not exist : " + inputFileName.GetAbsolutePath() + " try find it in data directory");
+        // /* LOG TO FIX*/  LOG_ERROR << ("File not exist : " + inputFileName.GetAbsolutePath() + " try find it in data directory");
         auto filepath = Utils::FindFile(inputFileName.GetFilename(), EngineConf.files.data);
         if (not filepath.empty())
         {
             inputFile = File(filepath);
-            // DEBUG_LOG("Found texture in : " + inputFile.GetAbsolutePath());
+            // /* LOG TO FIX*/  LOG_ERROR << ("Found texture in : " + inputFile.GetAbsolutePath());
         }
         else
         {
@@ -261,11 +261,11 @@ void TextureLoader::DeleteTexture(Texture& texture)
 
         gpuResourceLoader_.AddObjectToRelease(std::move(textureInfo.resource_));
         textures_.erase(iter);
-        // DEBUG_LOG("textures_ erase , size : " + std::to_string(textures_.size()));
+        // /* LOG TO FIX*/  LOG_ERROR << ("textures_ erase , size : " + std::to_string(textures_.size()));
     }
     else
     {
-        ERROR_LOG("Texture not found. GpuObjectId=" + std::to_string(texture.GetGpuObjectId()));
+        /* LOG TO FIX*/  LOG_ERROR << ("Texture not found. GpuObjectId=" + std::to_string(texture.GetGpuObjectId()));
     }
 }
 
@@ -297,8 +297,8 @@ HeightMap* TextureLoader::LoadHeightMapBinary(const File& inputFile, const Textu
         LOG_ERROR << "Read file error." << inputFile;
     }
 
-    DEBUG_LOG("Size : " + std::to_string(header.width) + "x" + std::to_string(header.height));
-    DEBUG_LOG("Height map scale : " + std::to_string(header.scale));
+    /* LOG TO FIX*/  LOG_ERROR << ("Size : " + std::to_string(header.width) + "x" + std::to_string(header.height));
+    /* LOG TO FIX*/  LOG_ERROR << ("Height map scale : " + std::to_string(header.scale));
 
     auto size = header.width * header.height;
     std::vector<float> floatData;
@@ -368,7 +368,7 @@ Texture* TextureLoader::GetTextureIfLoaded(const std::string& name, const Textur
 
 void convertImageToCpp(const Utils::Image& image)
 {
-    DEBUG_LOG("createCppFile...");
+    /* LOG TO FIX*/  LOG_ERROR << ("createCppFile...");
     std::ofstream ofs("/home/bach/Projects/OpenGL_Engine/Data/textureNotFound.h", std::ofstream::out);
     ofs << "#pragma once\n\n";
     // ofs << "#include <array>\n";
diff --git a/Sources/GameEngine/Resources/Textures/CubeMapTexture.cpp b/Sources/GameEngine/Resources/Textures/CubeMapTexture.cpp
index 06662807..978835a0 100755
--- a/Sources/GameEngine/Resources/Textures/CubeMapTexture.cpp
+++ b/Sources/GameEngine/Resources/Textures/CubeMapTexture.cpp
@@ -12,7 +12,7 @@ CubeMapTexture::CubeMapTexture(GraphicsApi::IGraphicsApi& graphicsApi, const Tex
 {
     if (images_.size() != 6)
     {
-        DEBUG_LOG("Cube map texture need 6 texutres : " + name);
+        /* LOG TO FIX*/  LOG_ERROR << ("Cube map texture need 6 texutres : " + name);
     }
 }
 
@@ -20,7 +20,7 @@ void CubeMapTexture::GpuLoadingPass()
 {
     if (graphicsObjectId_ or images_.size() != 6)
     {
-        ERROR_LOG("There was an error loading the texture : " + name_ +
+        /* LOG TO FIX*/  LOG_ERROR << ("There was an error loading the texture : " + name_ +
                   ". data is null or is initialized.");
         return;
     }
@@ -29,11 +29,11 @@ void CubeMapTexture::GpuLoadingPass()
     if (graphicsObjectId)
     {
         graphicsObjectId_ = *graphicsObjectId;
-        DEBUG_LOG("File " + name_ + " is in GPU.");
+        /* LOG TO FIX*/  LOG_ERROR << ("File " + name_ + " is in GPU.");
     }
     else
     {
-        ERROR_LOG("Texutre not created. Filename : " + name_);
+        /* LOG TO FIX*/  LOG_ERROR << ("Texutre not created. Filename : " + name_);
     }
 
     for (auto& i : images_)
diff --git a/Sources/GameEngine/Resources/Textures/GeneralTexture.cpp b/Sources/GameEngine/Resources/Textures/GeneralTexture.cpp
index b327c78b..5596c687 100644
--- a/Sources/GameEngine/Resources/Textures/GeneralTexture.cpp
+++ b/Sources/GameEngine/Resources/Textures/GeneralTexture.cpp
@@ -27,12 +27,12 @@ void GeneralTexture::GpuLoadingPass()
     }
     if (image_.empty() or graphicsObjectId_)
     {
-        ERROR_LOG("There was an error loading the texture : " + debugFileNamePrint +
+        /* LOG TO FIX*/  LOG_ERROR << ("There was an error loading the texture : " + debugFileNamePrint +
                   ". data is null or is initialized.");
         return;
     }
 
-    DEBUG_LOG("Create texutre : " + debugFileNamePrint);
+    /* LOG TO FIX*/  LOG_ERROR << ("Create texutre : " + debugFileNamePrint);
 
     auto graphicsObjectId =
         graphicsApi_.CreateTexture(image_, paramters_.filter, paramters_.mimap);
@@ -40,13 +40,13 @@ void GeneralTexture::GpuLoadingPass()
     if (graphicsObjectId)
     {
         graphicsObjectId_ = *graphicsObjectId;
-        DEBUG_LOG("Texture " + debugFileNamePrint +
+        /* LOG TO FIX*/  LOG_ERROR << ("Texture " + debugFileNamePrint +
                   " is in GPU. GraphicsObjectId :" + std::to_string(*graphicsObjectId));
     }
     else
     {
         image_.clearData();
-        ERROR_LOG("Texutre not created. " + debugFileNamePrint);
+        /* LOG TO FIX*/  LOG_ERROR << ("Texutre not created. " + debugFileNamePrint);
     }
 
     if (paramters_.dataStorePolicy == DataStorePolicy::ToRelease)
diff --git a/Sources/GameEngine/Resources/Textures/HeightMap.cpp b/Sources/GameEngine/Resources/Textures/HeightMap.cpp
index 6e4ffa7f..b3bd8be2 100644
--- a/Sources/GameEngine/Resources/Textures/HeightMap.cpp
+++ b/Sources/GameEngine/Resources/Textures/HeightMap.cpp
@@ -15,7 +15,7 @@ HeightMap::HeightMap(GraphicsApi::IGraphicsApi& graphicsApi, const TextureParame
 {
     if (image_.getChannelsCount() > 1)
     {
-        ERROR_LOG("Height map shouldbe one channel float data, but is : " + std::to_string(image.getChannelsCount()));
+        /* LOG TO FIX*/  LOG_ERROR << ("Height map shouldbe one channel float data, but is : " + std::to_string(image.getChannelsCount()));
     }
 
     UpdateMaximumHeight();
@@ -25,11 +25,11 @@ void HeightMap::GpuLoadingPass()
 {
     if (image_.empty() or graphicsObjectId_)
     {
-        ERROR_LOG("There was an error loading the texture : " + file_->GetBaseName() +
+        /* LOG TO FIX*/  LOG_ERROR << ("There was an error loading the texture : " + file_->GetBaseName() +
                   ". floatData is null or is initialized.");
         return;
     }
-    DEBUG_LOG("Create texutre filneame : " + file_->GetBaseName());
+    /* LOG TO FIX*/  LOG_ERROR << ("Create texutre filneame : " + file_->GetBaseName());
 
     auto graphicsObjectId =
         graphicsApi_.CreateTexture(image_, GraphicsApi::TextureFilter::LINEAR, GraphicsApi::TextureMipmap::NONE);
@@ -37,11 +37,11 @@ void HeightMap::GpuLoadingPass()
     if (graphicsObjectId)
     {
         graphicsObjectId_ = *graphicsObjectId;
-        DEBUG_LOG("File " + file_->GetBaseName() + " is in GPU.");
+        /* LOG TO FIX*/  LOG_ERROR << ("File " + file_->GetBaseName() + " is in GPU.");
     }
     else
     {
-        ERROR_LOG("Texutre not created. Filename : " + file_->GetBaseName());
+        /* LOG TO FIX*/  LOG_ERROR << ("Texutre not created. Filename : " + file_->GetBaseName());
     }
 }
 const Utils::Image& HeightMap::GetImage() const
@@ -74,7 +74,7 @@ bool HeightMap::SetHeight(const vec2ui& cooridnate, float value)
 {
     if (image_.getChannelsCount() > 1)
     {
-        ERROR_LOG("Only one channel in height map is supported");
+        /* LOG TO FIX*/  LOG_ERROR << ("Only one channel in height map is supported");
         return false;
     }
 
@@ -115,7 +115,7 @@ bool HeightMap::UpdateMaximumHeight()
                            maximumHeight = *std::max_element(data.begin(), data.end());
                            minimumHeight = *std::min_element(data.begin(), data.end());
                        },
-                       [](std::monostate) { ERROR_LOG("Image data not set!."); }},
+                       [](std::monostate) { /* LOG TO FIX*/  LOG_ERROR << ("Image data not set!."); }},
                image_.getImageData());
 
     if (not compare(maximumHeight_, maximumHeight) or not compare(minimumHeight_, minimumHeight))
diff --git a/Sources/GameEngine/Resources/Textures/Texture.cpp b/Sources/GameEngine/Resources/Textures/Texture.cpp
index 1ada8be3..dc7e1aeb 100755
--- a/Sources/GameEngine/Resources/Textures/Texture.cpp
+++ b/Sources/GameEngine/Resources/Textures/Texture.cpp
@@ -75,7 +75,7 @@ void Texture::ReleaseGpuPass()
 
     auto filename = file_ ? file_->GetBaseName() : "";
 
-    DEBUG_LOG("Clean gpu resources " + filename + ", graphicsObjectId_=" + std::to_string(*graphicsObjectId_));
+    /* LOG TO FIX*/  LOG_ERROR << ("Clean gpu resources " + filename + ", graphicsObjectId_=" + std::to_string(*graphicsObjectId_));
 
     graphicsApi_.DeleteObject(*graphicsObjectId_);
     GpuObject::ReleaseGpuPass();
diff --git a/Sources/GameEngine/Scene/Scene.cpp b/Sources/GameEngine/Scene/Scene.cpp
index 10c6a2d8..f6ac78ec 100755
--- a/Sources/GameEngine/Scene/Scene.cpp
+++ b/Sources/GameEngine/Scene/Scene.cpp
@@ -44,7 +44,7 @@ Scene::~Scene()
         physicsApi_->DisableSimulation();
     }
 
-    DEBUG_LOG("destructor");
+    /* LOG TO FIX*/  LOG_ERROR << ("destructor");
 
     networkEditorInterface_.reset();
 
@@ -136,7 +136,7 @@ void Scene::PostUpdate()
 
 void Scene::Start()
 {
-    DEBUG_LOG("Start");
+    /* LOG TO FIX*/  LOG_ERROR << ("Start");
     start_.store(true);
     componentController_.OnStart();
 
@@ -146,7 +146,7 @@ void Scene::Start()
 
 void Scene::Stop()
 {
-    DEBUG_LOG("Stop");
+    /* LOG TO FIX*/  LOG_ERROR << ("Stop");
     start_.store(false);
     if (physicsApi_)
         physicsApi_->DisableSimulation();
@@ -212,7 +212,7 @@ void Scene::ChangeParent(GameObject& gameObject, GameObject& newParent)
 
     if (not currentParent)
     {
-        DEBUG_LOG("Root gameObject can not be moved");
+        /* LOG TO FIX*/  LOG_ERROR << ("Root gameObject can not be moved");
         return;
     }
 
@@ -275,7 +275,7 @@ GameObject& Scene::GetRootGameObject()
 {
     if (not rootGameObject_)
     {
-        ERROR_LOG("Something went wrong. Not initilized scene?");
+        /* LOG TO FIX*/  LOG_ERROR << ("Something went wrong. Not initilized scene?");
     }
     return *rootGameObject_;
 }
diff --git a/Sources/GameEngine/Scene/SceneFactoryBase.cpp b/Sources/GameEngine/Scene/SceneFactoryBase.cpp
index 5613676e..b4d1ef16 100644
--- a/Sources/GameEngine/Scene/SceneFactoryBase.cpp
+++ b/Sources/GameEngine/Scene/SceneFactoryBase.cpp
@@ -27,7 +27,7 @@ ScenePtr SceneFactoryBase::Create(const std::string& sceneName)
 {
     if (!IsExist(sceneName))
     {
-        DEBUG_LOG("SceneFactory::Create scene : " + sceneName + " not found.");
+        /* LOG TO FIX*/  LOG_ERROR << ("SceneFactory::Create scene : " + sceneName + " not found.");
         return nullptr;
     }
 
@@ -37,7 +37,7 @@ ScenePtr SceneFactoryBase::Create(uint32 id)
 {
     if (!IsExist(id))
     {
-        DEBUG_LOG("SceneFactory::Create scene id: " + std::to_string(id) + " not found.");
+        /* LOG TO FIX*/  LOG_ERROR << ("SceneFactory::Create scene id: " + std::to_string(id) + " not found.");
         return nullptr;
     }
 
@@ -76,7 +76,7 @@ ScenePtr SceneFactoryBase::CreateSceneBasedOnFile(const File& file)
 #endif
                     if (sceneLib)
                     {
-                        DEBUG_LOG("Scene lib found");
+                        /* LOG TO FIX*/  LOG_ERROR << ("Scene lib found");
 #ifdef USE_GNU
                         auto create = (CreateSceneFromLib)dlsym(sceneLib, "CreateScene");
 #else
@@ -85,12 +85,12 @@ ScenePtr SceneFactoryBase::CreateSceneBasedOnFile(const File& file)
                         if (create)
                         {
                             scene = std::unique_ptr<Scene>(create());
-                            DEBUG_LOG("Scene loaded from lib: " + scene->GetName());
+                            /* LOG TO FIX*/  LOG_ERROR << ("Scene loaded from lib: " + scene->GetName());
                         }
                     }
                     else
                     {
-                        DEBUG_LOG("Scene lib open failed. Using default");
+                        /* LOG TO FIX*/  LOG_ERROR << ("Scene lib open failed. Using default");
                     }
                 }
             }
diff --git a/Sources/GameEngine/Scene/SceneLoader.cpp b/Sources/GameEngine/Scene/SceneLoader.cpp
index 5a4e9699..ea6e4388 100644
--- a/Sources/GameEngine/Scene/SceneLoader.cpp
+++ b/Sources/GameEngine/Scene/SceneLoader.cpp
@@ -53,7 +53,7 @@ std::unique_ptr<Scene> SceneLoader::Load(uint32 id)
     Init();
     IsLoading(true);
 
-    DEBUG_LOG("Load scene :" + std::to_string(id));
+    /* LOG TO FIX*/  LOG_ERROR << ("Load scene :" + std::to_string(id));
 
     std::unique_ptr<Scene> scene;
     std::thread loadingThread([&]() { scene = LoadScene(id); });
@@ -69,10 +69,10 @@ std::unique_ptr<Scene> SceneLoader::Load(const std::string& name)
     Init();
     IsLoading(true);
 
-    DEBUG_LOG("Load scene :" + name);
+    /* LOG TO FIX*/  LOG_ERROR << ("Load scene :" + name);
     std::unique_ptr<Scene> scene;
     std::thread loadingThread([&]() { scene = LoadScene(name); });
-    DEBUG_LOG("loadingThread done: " + name);
+    /* LOG TO FIX*/  LOG_ERROR << ("loadingThread done: " + name);
     ScreenRenderLoop();
     loadingThread.join();
 
@@ -82,11 +82,11 @@ std::unique_ptr<Scene> SceneLoader::Load(const std::string& name)
 template <typename T>
 std::unique_ptr<Scene> SceneLoader::LoadScene(T t)
 {
-    DEBUG_LOG("Load scene thread started.");
+    /* LOG TO FIX*/  LOG_ERROR << ("Load scene thread started.");
     Utils::Timer timer;
     auto scene = sceneFactory_.Create(t);
     scene->Init();
-    DEBUG_LOG("Scene loading time: " + std::to_string(timer.GetTimeMiliSeconds()) + "ms.");
+    /* LOG TO FIX*/  LOG_ERROR << ("Scene loading time: " + std::to_string(timer.GetTimeMiliSeconds()) + "ms.");
     IsLoading(false);
     return scene;
 }
@@ -111,7 +111,7 @@ void SceneLoader::Init()
     }
     else
     {
-        ERROR_LOG("background or circle texure creatrion error.");
+        /* LOG TO FIX*/  LOG_ERROR << ("background or circle texure creatrion error.");
     }
 }
 
diff --git a/Sources/GameEngine/Scene/SceneManager.cpp b/Sources/GameEngine/Scene/SceneManager.cpp
index 0c7c94ef..2c1d8e0d 100644
--- a/Sources/GameEngine/Scene/SceneManager.cpp
+++ b/Sources/GameEngine/Scene/SceneManager.cpp
@@ -39,7 +39,7 @@ SceneManager::~SceneManager()
 {
     SetOnSceneLoadDone(nullptr);
     EngineConf.renderer.fpsLimt.unsubscribe(fpsLimitParamSub_);
-    DEBUG_LOG("destructor");
+    /* LOG TO FIX*/  LOG_ERROR << ("destructor");
     StopThread();
 }
 Scene* SceneManager::GetActiveScene()
@@ -49,7 +49,7 @@ Scene* SceneManager::GetActiveScene()
 
 void SceneManager::SetOnSceneLoadDone(OnSceneLoadDoneCallback callback)
 {
-    DEBUG_LOG("Set new onSceneLoadDoneCallback");
+    /* LOG TO FIX*/  LOG_ERROR << ("Set new onSceneLoadDoneCallback");
     onSceneLoadDoneCallback = callback;
 }
 
@@ -167,7 +167,7 @@ void SceneManager::LoadNextScene()
 {
     if (currentSceneId_ >= sceneFactory_->ScenesSize() - 1)
     {
-        DEBUG_LOG("SceneManager::LoadNextScene() no more scenes found.");
+        /* LOG TO FIX*/  LOG_ERROR << ("SceneManager::LoadNextScene() no more scenes found.");
         return;
     }
     SetSceneToLoad(++currentSceneId_);
@@ -176,7 +176,7 @@ void SceneManager::LoadPreviousScene()
 {
     if (currentSceneId_ == 0)
     {
-        DEBUG_LOG("SceneManager::LoadPreviousScene() no more scenes found.");
+        /* LOG TO FIX*/  LOG_ERROR << ("SceneManager::LoadPreviousScene() no more scenes found.");
         return;
     }
     SetSceneToLoad(--currentSceneId_);
@@ -193,7 +193,7 @@ void SceneManager::SetSceneToLoad(uint32 id)
 {
     if (!sceneFactory_->IsExist(id))
     {
-        DEBUG_LOG("SceneManager::SetSceneToLoad() no more scenes found.");
+        /* LOG TO FIX*/  LOG_ERROR << ("SceneManager::SetSceneToLoad() no more scenes found.");
         return;
     }
     currentSceneId_ = id;
@@ -204,7 +204,7 @@ void SceneManager::SetSceneToLoad(const std::string& name)
 {
     if (!sceneFactory_->IsExist(name))
     {
-        DEBUG_LOG("SceneManager::SetSceneToLoad() " + name + " not found.");
+        /* LOG TO FIX*/  LOG_ERROR << ("SceneManager::SetSceneToLoad() " + name + " not found.");
         return;
     }
 
@@ -220,14 +220,14 @@ void SceneManager::StartUpdateThreadIfNeeded()
 {
     if (not isRunning_)
     {
-        DEBUG_LOG("Starting scene update thread");
+        /* LOG TO FIX*/  LOG_ERROR << ("Starting scene update thread");
         updateSceneThreadId_ = engineContext_.GetThreadSync().Subscribe(
             std::bind(&SceneManager::UpdateScene, this, std::placeholders::_1), "UpdateScene", EngineConf.renderer.fpsLimt);
         isRunning_ = true;
     }
     else
     {
-        ERROR_LOG("Scene is already started!");
+        /* LOG TO FIX*/  LOG_ERROR << ("Scene is already started!");
     }
 }
 
@@ -235,14 +235,14 @@ void SceneManager::StopThread()
 {
     if (isRunning_)
     {
-        DEBUG_LOG("Stopping scene thread");
+        /* LOG TO FIX*/  LOG_ERROR << ("Stopping scene thread");
         if (updateSceneThreadId_)
             engineContext_.GetThreadSync().Unsubscribe(*updateSceneThreadId_);
         isRunning_ = false;
     }
     else
     {
-        WARNING_LOG("Scene thread is not started.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Scene thread is not started.");
     }
 }
 
diff --git a/Sources/GameEngine/Scene/SceneReader.cpp b/Sources/GameEngine/Scene/SceneReader.cpp
index 65817e74..0ecc715e 100644
--- a/Sources/GameEngine/Scene/SceneReader.cpp
+++ b/Sources/GameEngine/Scene/SceneReader.cpp
@@ -199,14 +199,14 @@ void readNode(const TreeNode& node, Scene& scene)
         {
             if (gameObjectNode->name() == CSTR_GAMEOBJECT)
             {
-                DEBUG_LOG("read gameobject");
+                /* LOG TO FIX*/  LOG_ERROR << ("read gameobject");
                 auto gameObject = createGameObject(*gameObjectNode, scene);
                 Read(scene, *gameObjectNode, *gameObject);
                 scene.AddGameObject(std::move(gameObject));
             }
             else if (gameObjectNode->name() == CSTR_PREFAB)
             {
-                DEBUG_LOG("read prefab");
+                /* LOG TO FIX*/  LOG_ERROR << ("read prefab");
                 auto gameObject = createPrefabGameObject(*gameObjectNode, scene);
                 scene.AddGameObject(std::move(gameObject));
             }
diff --git a/Sources/GameEngine/Scene/SceneWrapper.cpp b/Sources/GameEngine/Scene/SceneWrapper.cpp
index a1d9aab5..ada5a1da 100644
--- a/Sources/GameEngine/Scene/SceneWrapper.cpp
+++ b/Sources/GameEngine/Scene/SceneWrapper.cpp
@@ -20,12 +20,12 @@ SceneWrapper::SceneWrapper(ISceneFactory& sceneFactory, GraphicsApi::IGraphicsAp
 
 SceneWrapper::~SceneWrapper()
 {
-    DEBUG_LOG("destructor");
+    /* LOG TO FIX*/  LOG_ERROR << ("destructor");
 }
 
 void SceneWrapper::Set(uint32 id, AddEvent sceneEventCallback)
 {
-    DEBUG_LOG("Set id");
+    /* LOG TO FIX*/  LOG_ERROR << ("Set id");
     Reset();
     sceneToLoad_          = id;
     addSceneEventCallback = sceneEventCallback;
@@ -34,7 +34,7 @@ void SceneWrapper::Set(uint32 id, AddEvent sceneEventCallback)
 
 void SceneWrapper::Set(const std::string& name, AddEvent sceneEventCallback)
 {
-    DEBUG_LOG("Set name");
+    /* LOG TO FIX*/  LOG_ERROR << ("Set name");
     Reset();
     sceneToLoad_          = name;
     addSceneEventCallback = sceneEventCallback;
@@ -47,7 +47,7 @@ void SceneWrapper::Init(std::function<void()> onLoadDone)
 
     if (SafeGetState() != SceneWrapperState::ReadyToInitialized)
     {
-        ERROR_LOG("SceneWrapper::Init() Wrong state.");
+        /* LOG TO FIX*/  LOG_ERROR << ("SceneWrapper::Init() Wrong state.");
         return;
     }
 
@@ -87,7 +87,7 @@ SceneWrapperState SceneWrapper::SafeGetState()
 
 void SceneWrapper::SafeSetState(SceneWrapperState state)
 {
-    DEBUG_LOG("SetState = " + std::to_string(static_cast<int>(state)));
+    /* LOG TO FIX*/  LOG_ERROR << ("SetState = " + std::to_string(static_cast<int>(state)));
     std::lock_guard<std::mutex> lk(stateMutex_);
     state_ = state;
 }
@@ -96,7 +96,7 @@ Scene* SceneWrapper::Get()
 {
     if (SafeGetState() == SceneWrapperState::SceneNotSet)
     {
-        ERROR_LOG("SceneWrapper::Get() scene is nullptr. Probably are not set active scene.");
+        /* LOG TO FIX*/  LOG_ERROR << ("SceneWrapper::Get() scene is nullptr. Probably are not set active scene.");
     }
 
     return activeScene.get();
diff --git a/Sources/GameEngine/Scene/XmlSceneStorage.cpp b/Sources/GameEngine/Scene/XmlSceneStorage.cpp
index cec63baa..5ad5cdc9 100644
--- a/Sources/GameEngine/Scene/XmlSceneStorage.cpp
+++ b/Sources/GameEngine/Scene/XmlSceneStorage.cpp
@@ -21,22 +21,22 @@ XmlSceneStorage::~XmlSceneStorage()
 }
 void XmlSceneStorage::store()
 {
-    DEBUG_LOG("store");
+    /* LOG TO FIX*/  LOG_ERROR << ("store");
     rootNode_ = createTree(scene_);
 }
 void XmlSceneStorage::restore()
 {
     if (rootNode_)
     {
-        DEBUG_LOG("restore");
+        /* LOG TO FIX*/  LOG_ERROR << ("restore");
         scene_.ClearGameObjects();
-        DEBUG_LOG("clear objects completed");
+        /* LOG TO FIX*/  LOG_ERROR << ("clear objects completed");
         SceneReader::readNode(*rootNode_, scene_);
-        DEBUG_LOG("restore completed");
+        /* LOG TO FIX*/  LOG_ERROR << ("restore completed");
     }
     else
     {
-        ERROR_LOG("First store scene before read");
+        /* LOG TO FIX*/  LOG_ERROR << ("First store scene before read");
     }
 }
 }  // namespace GameEngine
diff --git a/Sources/GameEngine/Shaders/ShaderProgram.cpp b/Sources/GameEngine/Shaders/ShaderProgram.cpp
index 66216197..d6e827bd 100755
--- a/Sources/GameEngine/Shaders/ShaderProgram.cpp
+++ b/Sources/GameEngine/Shaders/ShaderProgram.cpp
@@ -23,7 +23,7 @@ void ShaderProgram::Init()
 {
     if (programID_)
     {
-        ERROR_LOG("Shader program is already initialized.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Shader program is already initialized.");
         return;
     }
 
diff --git a/Sources/GameEngine/Time/DayNightCycle.cpp b/Sources/GameEngine/Time/DayNightCycle.cpp
index 5706ded3..7a24a886 100755
--- a/Sources/GameEngine/Time/DayNightCycle.cpp
+++ b/Sources/GameEngine/Time/DayNightCycle.cpp
@@ -46,7 +46,7 @@ void DayNightCycle::UpdateSunColor()
 {
     if (directionalLight == nullptr)
     {
-        DEBUG_LOG("Directional light not set in DayNightCycle but is used.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Directional light not set in DayNightCycle but is used.");
         return;
     }
     if (IsNight())
@@ -95,7 +95,7 @@ void DayNightCycle::UpdateSunPosition()
 {
     if (directionalLight == nullptr)
     {
-        DEBUG_LOG("Directional light not set in DayNightCycle but is used.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Directional light not set in DayNightCycle but is used.");
         return;
     }
     vec3 current_pos = directionalLight->GetPosition();
diff --git a/Sources/Input/InputManager.cpp b/Sources/Input/InputManager.cpp
index 8054aae5..ad1611f0 100644
--- a/Sources/Input/InputManager.cpp
+++ b/Sources/Input/InputManager.cpp
@@ -30,7 +30,7 @@ InputManager::InputManager()
 
 InputManager::~InputManager()
 {
-    DEBUG_LOG("destructor");
+    /* LOG TO FIX*/  LOG_ERROR << ("destructor");
 }
 
 void InputManager::SetDefaultKeys()
@@ -66,7 +66,7 @@ bool InputManager::GetKey(GameAction action)
     }
     // else
     //{
-    //     ERROR_LOG("Action not registered. " + std::to_string(static_cast<int>(action)));
+    //     /* LOG TO FIX*/  LOG_ERROR << ("Action not registered. " + std::to_string(static_cast<int>(action)));
     // }
     return false;
 }
@@ -198,7 +198,7 @@ void InputManager::UnsubscribeOnKeyDown(KeyCodes::Type key)
     auto subscribersKeyIter = subscribers_.keyDownSubscribers_.find(key);
     if (subscribersKeyIter != subscribers_.keyDownSubscribers_.end())
     {
-        ERROR_LOG("Not existing subscribtion : {" + std::to_string(static_cast<int>(key)) + "}");
+        /* LOG TO FIX*/  LOG_ERROR << ("Not existing subscribtion : {" + std::to_string(static_cast<int>(key)) + "}");
         return;
     }
     subscribers_.keyDownSubscribers_.erase(subscribersKeyIter);
@@ -213,7 +213,7 @@ void InputManager::UnsubscribeOnKeyUp(KeyCodes::Type key)
 
     if (subscribers_.keyUpSubscribers_.count(key) == 0)
     {
-        ERROR_LOG("Not existing subscribtion : {" + std::to_string(static_cast<int>(key)) + "}");
+        /* LOG TO FIX*/  LOG_ERROR << ("Not existing subscribtion : {" + std::to_string(static_cast<int>(key)) + "}");
         return;
     }
     subscribers_.keyUpSubscribers_.erase(key);
@@ -230,7 +230,7 @@ void InputManager::UnsubscribeOnKeyDown(KeyCodes::Type key, uint32 id)
 
     if (subscribers_.keyDownSubscribers_.count(key) == 0)
     {
-        ERROR_LOG("Not existing subscribtion : {" + std::to_string(static_cast<int>(key)) + ", " + std::to_string(id) +
+        /* LOG TO FIX*/  LOG_ERROR << ("Not existing subscribtion : {" + std::to_string(static_cast<int>(key)) + ", " + std::to_string(id) +
                   "}");
         return;
     }
@@ -249,7 +249,7 @@ void InputManager::UnsubscribeOnKeyUp(KeyCodes::Type key, uint32 id)
 
     if (subscribers_.keyUpSubscribers_.count(key) == 0)
     {
-        ERROR_LOG("Not existing subscribtion : {" + std::to_string(static_cast<int>(key)) + ", " + std::to_string(id) +
+        /* LOG TO FIX*/  LOG_ERROR << ("Not existing subscribtion : {" + std::to_string(static_cast<int>(key)) + ", " + std::to_string(id) +
                   "}");
         return;
     }
@@ -268,7 +268,7 @@ void InputManager::UnsubscribeAnyKey(uint32 id)
 
     if (subscribers_.keysSubscribers_.count(id) == 0)
     {
-        ERROR_LOG("Not existing subscribtion : {" + std::to_string(id) + "}");
+        /* LOG TO FIX*/  LOG_ERROR << ("Not existing subscribtion : {" + std::to_string(id) + "}");
         return;
     }
     subscribers_.keysSubscribers_.erase(id);
@@ -282,7 +282,7 @@ uint32 InputManager::SubscribeOnKeyDown(GameAction action, KeyPressedFunc func)
     }
     else
     {
-        ERROR_LOG("Action not registered. " + std::to_string(static_cast<int>(action)));
+        /* LOG TO FIX*/  LOG_ERROR << ("Action not registered. " + std::to_string(static_cast<int>(action)));
     }
     return 0;
 }
@@ -295,7 +295,7 @@ uint32 InputManager::SubscribeOnKeyUp(GameAction action, KeyPressedFunc func)
     }
     else
     {
-        ERROR_LOG("Action not registered. " + std::to_string(static_cast<int>(action)));
+        /* LOG TO FIX*/  LOG_ERROR << ("Action not registered. " + std::to_string(static_cast<int>(action)));
     }
     return 0;
 }
@@ -308,7 +308,7 @@ void InputManager::UnsubscribeOnKeyDown(GameAction action, uint32 id)
     }
     else
     {
-        ERROR_LOG("Action not registered. " + std::to_string(static_cast<int>(action)));
+        /* LOG TO FIX*/  LOG_ERROR << ("Action not registered. " + std::to_string(static_cast<int>(action)));
     }
 }
 
@@ -320,7 +320,7 @@ void InputManager::UnsubscribeOnKeyUp(GameAction action, uint32 id)
     }
     else
     {
-        ERROR_LOG("Action not registered. " + std::to_string(static_cast<int>(action)));
+        /* LOG TO FIX*/  LOG_ERROR << ("Action not registered. " + std::to_string(static_cast<int>(action)));
     }
 }
 
@@ -332,7 +332,7 @@ void InputManager::UnsubscribeOnKeyDown(GameAction action)
     }
     else
     {
-        ERROR_LOG("Action not registered. " + std::to_string(static_cast<int>(action)));
+        /* LOG TO FIX*/  LOG_ERROR << ("Action not registered. " + std::to_string(static_cast<int>(action)));
     }
 }
 
@@ -344,7 +344,7 @@ void InputManager::UnsubscribeOnKeyUp(GameAction action)
     }
     else
     {
-        ERROR_LOG("Action not registered. " + std::to_string(static_cast<int>(action)));
+        /* LOG TO FIX*/  LOG_ERROR << ("Action not registered. " + std::to_string(static_cast<int>(action)));
     }
 }
 
@@ -352,7 +352,7 @@ void InputManager::StashSubscribers()
 {
     if (stashedSubsribtions_)
     {
-        DEBUG_LOG("Multiple stash subscribtions, losing last one");
+        /* LOG TO FIX*/  LOG_ERROR << ("Multiple stash subscribtions, losing last one");
     }
 
     stashedSubsribtions_ = true;
diff --git a/Sources/OpenGLApi/GlFrameBuffer.cpp b/Sources/OpenGLApi/GlFrameBuffer.cpp
index bd597e9c..3c3d0a00 100644
--- a/Sources/OpenGLApi/GlFrameBuffer.cpp
+++ b/Sources/OpenGLApi/GlFrameBuffer.cpp
@@ -73,7 +73,7 @@ FrameBuffer::FrameBuffer(IdPool& idPool, const std::vector<GraphicsApi::FrameBuf
 
 FrameBuffer::~FrameBuffer()
 {
-    DEBUG_LOG(std::to_string(GetId()));
+    /* LOG TO FIX*/  LOG_ERROR << (std::to_string(GetId()));
 }
 
 bool FrameBuffer::Init()
@@ -82,7 +82,7 @@ bool FrameBuffer::Init()
     auto errorString = GetGlError();
     if (not errorString.empty())
     {
-        ERROR_LOG(errorString);
+        /* LOG TO FIX*/  LOG_ERROR << (errorString);
         return false;
     }
     Bind();
@@ -91,11 +91,11 @@ bool FrameBuffer::Init()
     GLenum status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
     if (status != GL_FRAMEBUFFER_COMPLETE)
     {
-        ERROR_LOG("Framebuffer error, status: " + std::to_string(status));
+        /* LOG TO FIX*/  LOG_ERROR << ("Framebuffer error, status: " + std::to_string(status));
         UnBind();
         return false;
     }
-    DEBUG_LOG("Succesful create framebuffer. " + std::to_string(GetId()) + ", glId :" + std::to_string(glId_));
+    /* LOG TO FIX*/  LOG_ERROR << ("Succesful create framebuffer. " + std::to_string(GetId()) + ", glId :" + std::to_string(glId_));
     UnBind();
     return true;
 }
@@ -131,7 +131,7 @@ void FrameBuffer::UnBind()
     auto errorString = GetGlError();
     if (not errorString.empty())
     {
-        ERROR_LOG(errorString + ", framebuffer id " + std::to_string(GetId()));
+        /* LOG TO FIX*/  LOG_ERROR << (errorString + ", framebuffer id " + std::to_string(GetId()));
     }
 }
 
@@ -195,7 +195,7 @@ void FrameBuffer::TakeSnapshot(const std::string& path)
                     format = GL_RGBA;
                     break;
                 default:
-                    ERROR_LOG("Undef format.");
+                    /* LOG TO FIX*/  LOG_ERROR << ("Undef format.");
                     continue;
             }
         }
@@ -255,7 +255,7 @@ void FrameBuffer::CreateGlAttachments(const std::vector<GraphicsApi::FrameBuffer
         auto errorString = GetGlError();
         if (not errorString.empty())
         {
-            ERROR_LOG(errorString);
+            /* LOG TO FIX*/  LOG_ERROR << (errorString);
             continue;
         }
 
diff --git a/Sources/OpenGLApi/OpenGLApi.cpp b/Sources/OpenGLApi/OpenGLApi.cpp
index 7b4002c0..8d87bd33 100644
--- a/Sources/OpenGLApi/OpenGLApi.cpp
+++ b/Sources/OpenGLApi/OpenGLApi.cpp
@@ -179,19 +179,19 @@ void GetInfoAndPrint(const std::string& str, GLenum i)
 {
     int info{0};
     glGetIntegerv(i, &info);
-    INFO_LOG(str + " : " + std::to_string(info));
+    /* LOG TO FIX*/  LOG_ERROR << (str + " : " + std::to_string(info));
 }
 
 void OpenGLApi::Init()
 {
-    DEBUG_LOG("Init openGLApi");
+    /* LOG TO FIX*/  LOG_ERROR << ("Init openGLApi");
 
     auto glew_init_result = glewInit();
 
     if (glew_init_result != GLEW_OK)
     {
         std::string err(reinterpret_cast<char const*>(glewGetErrorString(glew_init_result)));
-        ERROR_LOG("Glew init error : " + err);
+        /* LOG TO FIX*/  LOG_ERROR << ("Glew init error : " + err);
         return;
     }
 
@@ -209,7 +209,7 @@ void OpenGLApi::Init()
 
     glPolygonOffset(1, 1);
 
-    DEBUG_LOG("Init done.");
+    /* LOG TO FIX*/  LOG_ERROR << ("Init done.");
 }
 void OpenGLApi::SetShadersFilesLocations(const std::string& path)
 {
@@ -231,15 +231,15 @@ void OpenGLApi::DeleteContext()
 void OpenGLApi::PrintVersion()
 {
     std::string ver(reinterpret_cast<char const*>(glGetString(GL_VERSION)));
-    INFO_LOG("GL version: " + ver);
+    /* LOG TO FIX*/  LOG_ERROR << ("GL version: " + ver);
 
     std::string glslver(reinterpret_cast<char const*>(glGetString(GL_SHADING_LANGUAGE_VERSION)));
-    INFO_LOG("GLSL version: " + glslver);
+    /* LOG TO FIX*/  LOG_ERROR << ("GLSL version: " + glslver);
 
     if (not useLowGLversion_)
     {
         glGetIntegerv(GL_MAX_PATCH_VERTICES, &impl_->maxPatchVertices_);
-        INFO_LOG("Max supported patch vertices :" + std::to_string(impl_->maxPatchVertices_));
+        /* LOG TO FIX*/  LOG_ERROR << ("Max supported patch vertices :" + std::to_string(impl_->maxPatchVertices_));
 
         if (impl_->maxPatchVertices_)
         {
@@ -283,7 +283,7 @@ void OpenGLApi::PrepareFrame()
 
     if (not errorString.empty())
     {
-        ERROR_LOG(errorString);
+        /* LOG TO FIX*/  LOG_ERROR << (errorString);
     }
 }
 void OpenGLApi::SetDefaultTarget()
@@ -455,7 +455,7 @@ void OpenGLApi::TakeSnapshoot(const std::string& path) const
             {
                 if (impl_->textureInfos_.count(object.first) == 0)
                 {
-                    DEBUG_LOG("Texture info not found. Id : " + std::to_string(object.first));
+                    /* LOG TO FIX*/  LOG_ERROR << ("Texture info not found. Id : " + std::to_string(object.first));
                     break;
                 }
                 const auto& textureInfo    = GetTextureInfo(object.first);
@@ -466,7 +466,7 @@ void OpenGLApi::TakeSnapshoot(const std::string& path) const
             }
             break;
             default:
-                DEBUG_LOG("not imeplmented");
+                /* LOG TO FIX*/  LOG_ERROR << ("not imeplmented");
                 break;
         }
     }
@@ -486,7 +486,7 @@ void OpenGLApi::TakeSnapshoot(const std::string& path) const
             }
             break;
             default:
-                DEBUG_LOG("not imeplmented");
+                /* LOG TO FIX*/  LOG_ERROR << ("not imeplmented");
                 break;
         }
     }
@@ -501,14 +501,14 @@ OpenGLApi::IFrameBuffer& OpenGLApi::CreateFrameBuffer(
     const std::vector<GraphicsApi::FrameBuffer::Attachment>& attachments)
 {
     impl_->frameBuffers_.push_back(std::make_unique<FrameBuffer>(impl_->idPool_, attachments));
-    DEBUG_LOG(std::to_string(impl_->frameBuffers_.back()->GetId()));
+    /* LOG TO FIX*/  LOG_ERROR << (std::to_string(impl_->frameBuffers_.back()->GetId()));
     impl_->createdGraphicsObjects_.insert({impl_->frameBuffers_.back()->GetId(), ObjectType::FRAME_BUFFER});
     return *impl_->frameBuffers_.back();
 }
 
 void OpenGLApi::DeleteFrameBuffer(OpenGLApi::IFrameBuffer& framebuffer)
 {
-    DEBUG_LOG(std::to_string(framebuffer.GetId()));
+    /* LOG TO FIX*/  LOG_ERROR << (std::to_string(framebuffer.GetId()));
     framebuffer.CleanUp();
 
     auto& v   = impl_->frameBuffers_;
@@ -608,7 +608,7 @@ void OpenGLApi::CreateDebugNormalMesh(uint32 rid, const GraphicsApi::MeshRawData
 
 void OpenGLApi::DeleteMesh(uint32 id)
 {
-    // DEBUG_LOG("openGlMeshes_ size  " + std::to_string(openGlMeshes_.size()));
+    // /* LOG TO FIX*/  LOG_ERROR << ("openGlMeshes_ size  " + std::to_string(openGlMeshes_.size()));
 
     auto iter = openGlMeshes_.find(id);
     if (iter == openGlMeshes_.end())
@@ -627,7 +627,7 @@ void OpenGLApi::DeleteMesh(uint32 id)
 
     openGlMeshes_.erase(id);
     DeleteDebugNormalMesh(id);
-    // DEBUG_LOG("erase openGlMeshes_ size  " + std::to_string(openGlMeshes_.size()));
+    // /* LOG TO FIX*/  LOG_ERROR << ("erase openGlMeshes_ size  " + std::to_string(openGlMeshes_.size()));
 }
 
 void OpenGLApi::DeleteDebugNormalMesh(uint32 id)
@@ -727,7 +727,7 @@ GraphicsApi::ID OpenGLApi::CreateTexture(const Utils::Image& image, GraphicsApi:
     auto errorString = GetGlError();
     if (not errorString.empty())
     {
-        ERROR_LOG(errorString);
+        /* LOG TO FIX*/  LOG_ERROR << (errorString);
         return {};
     }
     GraphicsApi::TextureType type{GraphicsApi::TextureType ::U8_RGBA};
@@ -744,7 +744,7 @@ GraphicsApi::ID OpenGLApi::CreateTexture(const Utils::Image& image, GraphicsApi:
                         dataTypeSize = sizeof(uint8) * 4;
                         break;
                     default:
-                        DEBUG_LOG("Not implmented.");
+                        /* LOG TO FIX*/  LOG_ERROR << ("Not implmented.");
                 }
             },
             [&](const std::vector<float>&)
@@ -768,11 +768,11 @@ GraphicsApi::ID OpenGLApi::CreateTexture(const Utils::Image& image, GraphicsApi:
                         dataTypeSize = sizeof(float) * 4;
                         break;
                     default:
-                        DEBUG_LOG("Not implmented.");
+                        /* LOG TO FIX*/  LOG_ERROR << ("Not implmented.");
                 }
                 dataTypeSize = sizeof(float);
             },
-            [](std::monostate) { ERROR_LOG("Image data not set!"); },
+            [](std::monostate) { /* LOG TO FIX*/  LOG_ERROR << ("Image data not set!"); },
         },
         image.getImageData());
 
@@ -805,7 +805,7 @@ GraphicsApi::ID OpenGLApi::CreateTextureStorage(GraphicsApi::TextureType, Graphi
     auto errorString = GetGlError();
     if (not errorString.empty())
     {
-        ERROR_LOG(errorString);
+        /* LOG TO FIX*/  LOG_ERROR << (errorString);
         return {};
     }
 
@@ -867,7 +867,7 @@ void OpenGLApi::UpdateTexture(uint32 id, const vec2ui& offset, const Utils::Imag
 {
     if (image.empty())
     {
-        ERROR_LOG("Update image without data");
+        /* LOG TO FIX*/  LOG_ERROR << ("Update image without data");
         return;
     }
     auto iter = impl_->textureInfos_.find(id);
@@ -889,7 +889,7 @@ void OpenGLApi::UpdateTexture(uint32 id, const Utils::Image& image)
     auto iter = impl_->textureInfos_.find(id);
     if (iter == impl_->textureInfos_.end())
     {
-        ERROR_LOG("Texture not found id : " + std::to_string(id));
+        /* LOG TO FIX*/  LOG_ERROR << ("Texture not found id : " + std::to_string(id));
         return;
     }
 
@@ -935,7 +935,7 @@ void OpenGLApi::ActiveTexture(uint32 nr, uint32 id)
 {
     // if (id == 0 or not createdObjectIds.count(id))
     //{
-    //    ERROR_LOG("Wrong image id : " + std::to_string(id));
+    //    /* LOG TO FIX*/  LOG_ERROR << ("Wrong image id : " + std::to_string(id));
     //    return;
     //}
 
@@ -958,7 +958,7 @@ void OpenGLApi::DeleteObject(uint32 id)
 
     if (createdObjectIds.count(id) == 0)
     {
-        ERROR_LOG("Delete object error. Object with id : " + std::to_string(id) + " not created?");
+        /* LOG TO FIX*/  LOG_ERROR << ("Delete object error. Object with id : " + std::to_string(id) + " not created?");
         return;
     }
 
@@ -1000,7 +1000,7 @@ void OpenGLApi::DeleteObject(uint32 id)
             break;
     }
 
-    // DEBUG_LOG("Delete object :" + std::to_string(id));
+    // /* LOG TO FIX*/  LOG_ERROR << ("Delete object :" + std::to_string(id));
     createdObjectIds.erase(id);
 }
 
@@ -1017,7 +1017,7 @@ std::string OpenGLApi::GetBufferStatus()
 
     if (status != GL_FRAMEBUFFER_COMPLETE)
     {
-        ERROR_LOG("FB error, status: " + std::to_string(status));
+        /* LOG TO FIX*/  LOG_ERROR << ("FB error, status: " + std::to_string(status));
         return std::to_string(status);
     }
 
@@ -1237,7 +1237,7 @@ void OpenGLApi::UpdateMesh(uint32 objectId, const GraphicsApi::MeshRawData& data
                 UpdateVBO(obj, buffer, data.tangents_);
                 break;
             default:
-                DEBUG_LOG("Update not implemented.");
+                /* LOG TO FIX*/  LOG_ERROR << ("Update not implemented.");
         }
     }
 
@@ -1477,7 +1477,7 @@ void OpenGLApi::SetBlendFunction(GraphicsApi::BlendFunctionType type)
 void OpenGLApi::allocatedBytes(int64 bytes)
 {
     allocatedBytes_ += bytes;
-    // DEBUG_LOG("Textures + meshes, allocatedBytes = " + std::to_string(allocatedBytes_) + " (" +
+    // /* LOG TO FIX*/  LOG_ERROR << ("Textures + meshes, allocatedBytes = " + std::to_string(allocatedBytes_) + " (" +
     //         std::to_string(allocatedBytes_ / 1024 / 1024) + "MB)");
 }
 }  // namespace OpenGLApi
diff --git a/Sources/OpenGLApi/OpenGLUtils.cpp b/Sources/OpenGLApi/OpenGLUtils.cpp
index 1b0e844e..cad5bddc 100644
--- a/Sources/OpenGLApi/OpenGLUtils.cpp
+++ b/Sources/OpenGLApi/OpenGLUtils.cpp
@@ -102,7 +102,7 @@ void VaoCreator::AddStaticAttribute(VertexBufferObjects type, uint32 coordinateS
     int vsize     = data.size() / 3;
     if (type == VertexBufferObjects::POSITION and vsize > maxNumber)
     {
-       ERROR_LOG("To many vertices in model.");
+       /* LOG TO FIX*/  LOG_ERROR << ("To many vertices in model.");
     }
 }
 
diff --git a/Sources/OpenGLApi/SDL2/SDLOpenGL.cpp b/Sources/OpenGLApi/SDL2/SDLOpenGL.cpp
index 10648ad6..14e61e9e 100644
--- a/Sources/OpenGLApi/SDL2/SDLOpenGL.cpp
+++ b/Sources/OpenGLApi/SDL2/SDLOpenGL.cpp
@@ -62,7 +62,7 @@ SdlOpenGlApi::SdlOpenGlApi()
 
 SdlOpenGlApi::~SdlOpenGlApi()
 {
-    DEBUG_LOG("destructor");
+    LOG_DEBUG << "destructor";
     if (impl_->window)
     {
         SDL_DestroyWindow(impl_->window);
@@ -110,12 +110,12 @@ void SdlOpenGlApi::CreateContext()
     if (impl_->glContext)
         return;
 
-    ERROR_LOG("SDL_GL_CreateContext error.");
+    LOG_ERROR << "SDL_GL_CreateContext error.";
 }
 
 void SdlOpenGlApi::DeleteContext()
 {
-    DEBUG_LOG("DeleteContext");
+    LOG_ERROR << "DeleteContext";
     SDL_GL_DeleteContext(impl_->glContext);
 }
 
@@ -194,7 +194,7 @@ void SdlOpenGlApi::ShowMessageBox(const std::string& title, const std::string& m
     int buttonid;
     if (SDL_ShowMessageBox(&messageboxdata, &buttonid) < 0)
     {
-        ERROR_LOG("error displaying message box");
+        LOG_ERROR << "error displaying message box";
         return;
     }
 
@@ -217,7 +217,7 @@ void SdlOpenGlApi::FillDisplayModes()
         {
             if (SDL_GetDisplayMode(displayIndex, modeIndex, &mode) != 0)
             {
-                ERROR_LOG("SDL_GetDisplayMode failed: " + SDL_GetError());
+                LOG_ERROR << "SDL_GetDisplayMode failed: " << SDL_GetError();
                 continue;
             }
             displayModes_.push_back({mode.w, mode.h, mode.refresh_rate, displayIndex});
@@ -251,7 +251,7 @@ void SdlOpenGlApi::CreateSDLWindow(const std::string& window_name, const int& wi
     if (impl_->window)
         return;
 
-    ERROR_LOG("SDL_CreateWindow error. " + SDL_GetError());
+    LOG_ERROR << "SDL_CreateWindow error. " << SDL_GetError();
     exit(-1);
 }
 
@@ -314,7 +314,7 @@ void SdlOpenGlApi::ProcessSdlEvent()
             {
                 subscriber(GraphicsApi::DropFileEvent{impl_->event.drop.file});
             }
-            DEBUG_LOG("Drop file : " + impl_->event.drop.file);
+            LOG_ERROR << "Drop file : " << impl_->event.drop.file;
         }
         break;
     }
diff --git a/Sources/OpenGLApi/Shaders/ShaderManager.cpp b/Sources/OpenGLApi/Shaders/ShaderManager.cpp
index 20a7e6b9..bb767138 100644
--- a/Sources/OpenGLApi/Shaders/ShaderManager.cpp
+++ b/Sources/OpenGLApi/Shaders/ShaderManager.cpp
@@ -58,7 +58,7 @@ std::optional<GLuint> ShaderManager::CreateShaderProgram()
     auto id = glCreateProgram();
     if (id == 0)
     {
-        ERROR_LOG("Error creating shader program.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Error creating shader program.");
         return std::optional<GLuint>();
     }
     return id;
@@ -66,12 +66,12 @@ std::optional<GLuint> ShaderManager::CreateShaderProgram()
 
 GraphicsApi::ID ShaderManager::Create(GraphicsApi::ShaderProgramType shaderType)
 {
-    DEBUG_LOG("Create shader, type : " + std::to_string(static_cast<int>(shaderType)));
+    /* LOG TO FIX*/  LOG_ERROR << ("Create shader, type : " + std::to_string(static_cast<int>(shaderType)));
 
     auto files = GetShaderFiles(shaderType);
     if (not files)
     {
-        ERROR_LOG("Expected files not found for shader type " + std::to_string(static_cast<int>(shaderType)));
+        /* LOG TO FIX*/  LOG_ERROR << ("Expected files not found for shader type " + std::to_string(static_cast<int>(shaderType)));
         return std::nullopt;
     }
 
@@ -80,7 +80,7 @@ GraphicsApi::ID ShaderManager::Create(GraphicsApi::ShaderProgramType shaderType)
     {
         logFilesString += " " + f.second;
     }
-    DEBUG_LOG("Shader files :" + logFilesString);
+    /* LOG TO FIX*/  LOG_ERROR << ("Shader files :" + logFilesString);
 
     auto program = CreateShaderProgram();
 
@@ -102,7 +102,7 @@ GraphicsApi::ID ShaderManager::Create(GraphicsApi::ShaderProgramType shaderType)
     if (not FinalizeShader(shaderPrograms_.at(uId)))
         return {};
 
-    DEBUG_LOG("Shader succesful created. Id : " + std::to_string(uId));
+    /* LOG TO FIX*/  LOG_ERROR << ("Shader succesful created. Id : " + std::to_string(uId));
 
     return uId;
 }
@@ -124,7 +124,7 @@ bool ShaderManager::AddShader(OpenGLShaderProgram& shaderProgram, const std::str
     if (id == 0)
     {
         CheckAndPrintGLError(shaderProgram);
-        ERROR_LOG("Error creating shader type " + std::to_string(static_cast<int>(shaderTypeMap.at(mode))));
+        /* LOG TO FIX*/  LOG_ERROR << ("Error creating shader type " + std::to_string(static_cast<int>(shaderTypeMap.at(mode))));
         return false;
     }
 
@@ -144,7 +144,7 @@ bool ShaderManager::AddShader(OpenGLShaderProgram& shaderProgram, const std::str
         char err[1000];
         int length = 0;
         glGetShaderInfoLog(id, 1000, &length, err);
-        ERROR_LOG("ERRORS in Shader! \nFile name:\t" + filename + "\nCompile status: \n\n" + err);
+        /* LOG TO FIX*/  LOG_ERROR << ("ERRORS in Shader! \nFile name:\t" + filename + "\nCompile status: \n\n" + err);
         CheckAndPrintGLError(shaderProgram);
         return false;
     }
@@ -168,7 +168,7 @@ bool ShaderManager::FinalizeShader(OpenGLShaderProgram& shaderProgram)
     {
         CheckAndPrintGLError(shaderProgram);
         glGetProgramInfoLog(shaderProgram.id, sizeof(ErrorLog), nullptr, ErrorLog);
-        ERROR_LOG("Error linking shader program: " + shaderProgram.name + " : " + std::string(ErrorLog));
+        /* LOG TO FIX*/  LOG_ERROR << ("Error linking shader program: " + shaderProgram.name + " : " + std::string(ErrorLog));
         return false;
     }
 
@@ -181,7 +181,7 @@ bool ShaderManager::FinalizeShader(OpenGLShaderProgram& shaderProgram)
     {
         CheckAndPrintGLError(shaderProgram);
         glGetProgramInfoLog(shaderProgram.id, sizeof(ErrorLog), nullptr, ErrorLog);
-        ERROR_LOG("Invalid shader program : " + shaderProgram.name + " : " + std::string(ErrorLog));
+        /* LOG TO FIX*/  LOG_ERROR << ("Invalid shader program : " + shaderProgram.name + " : " + std::string(ErrorLog));
         return false;
     }
 
@@ -225,7 +225,7 @@ void ShaderManager::CheckAndPrintGLError(OpenGLShaderProgram& shaderProgram)
 
     if (not errorString.empty())
     {
-        ERROR_LOG("GlError : " + errorString + ", Shaderprogram : " + shaderProgram.name + " (" +
+        /* LOG TO FIX*/  LOG_ERROR << ("GlError : " + errorString + ", Shaderprogram : " + shaderProgram.name + " (" +
                   std::to_string(shaderProgram.id) + ")");
     }
 }
diff --git a/Sources/RpgGameServer/GameServer/Context.cpp b/Sources/RpgGameServer/GameServer/Context.cpp
index 011387d7..68ca0b0e 100644
--- a/Sources/RpgGameServer/GameServer/Context.cpp
+++ b/Sources/RpgGameServer/GameServer/Context.cpp
@@ -12,7 +12,7 @@ void Context::NewUser(const std::string& name, uint32 id)
 
 void Context::DeleteUser(uint32 id)
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
 
     std::lock_guard<std::mutex> lk(usersMutex);
     auto usageCharacter = users_[id].GetUsageCharacterId();
diff --git a/Sources/RpgGameServer/GameServer/Handlers/CharacterController/CharacterControllerHandler.cpp b/Sources/RpgGameServer/GameServer/Handlers/CharacterController/CharacterControllerHandler.cpp
index dfe21afd..f9b11180 100644
--- a/Sources/RpgGameServer/GameServer/Handlers/CharacterController/CharacterControllerHandler.cpp
+++ b/Sources/RpgGameServer/GameServer/Handlers/CharacterController/CharacterControllerHandler.cpp
@@ -27,7 +27,7 @@ void CharacterControllerHandler::ProcessMessage(uint32 userId, const Network::IM
 
     if (!characterId)
     {
-        ERROR_LOG("CharacterControllerHandler::ProcessMessage receive message for not user who didnt select character yet.");
+        /* LOG TO FIX*/  LOG_ERROR << ("CharacterControllerHandler::ProcessMessage receive message for not user who didnt select character yet.");
         return;
     }
 
@@ -35,7 +35,7 @@ void CharacterControllerHandler::ProcessMessage(uint32 userId, const Network::IM
 
     if (hero == nullptr)
     {
-        ERROR_LOG("CharacterControllerHandler::ProcessMessage cant get character by id.");
+        /* LOG TO FIX*/  LOG_ERROR << ("CharacterControllerHandler::ProcessMessage cant get character by id.");
         return;
     }
 
@@ -43,7 +43,7 @@ void CharacterControllerHandler::ProcessMessage(uint32 userId, const Network::IM
 
     if (controller == nullptr)
     {
-        ERROR_LOG("CharacterControllerHandler::ProcessMessage character controller not found in character.");
+        /* LOG TO FIX*/  LOG_ERROR << ("CharacterControllerHandler::ProcessMessage character controller not found in character.");
         return;
     }
 
diff --git a/Sources/RpgGameServer/GameServer/Handlers/GetCharacters/GetCharactersHandler.cpp b/Sources/RpgGameServer/GameServer/Handlers/GetCharacters/GetCharactersHandler.cpp
index 34051fcb..e2b346d8 100644
--- a/Sources/RpgGameServer/GameServer/Handlers/GetCharacters/GetCharactersHandler.cpp
+++ b/Sources/RpgGameServer/GameServer/Handlers/GetCharacters/GetCharactersHandler.cpp
@@ -23,7 +23,7 @@ void GetCharactersHandler::ProcessMessage(Network::UserId userId, const Network:
 
         if (!c)
         {
-            DEBUG_LOG("GetCharactersHandler::ProcessMessage character not found " + std::to_string(characterId));
+            /* LOG TO FIX*/  LOG_ERROR << ("GetCharactersHandler::ProcessMessage character not found " + std::to_string(characterId));
             continue;
         }
 
diff --git a/Sources/RpgGameServer/GameServer/Handlers/SelectCharacter/SelectCharacterHandler.cpp b/Sources/RpgGameServer/GameServer/Handlers/SelectCharacter/SelectCharacterHandler.cpp
index cafc891f..4cc7723d 100644
--- a/Sources/RpgGameServer/GameServer/Handlers/SelectCharacter/SelectCharacterHandler.cpp
+++ b/Sources/RpgGameServer/GameServer/Handlers/SelectCharacter/SelectCharacterHandler.cpp
@@ -29,7 +29,7 @@ void SelectCharacterHandler::ProcessMessage(Network::UserId userId, const Networ
 
     if (not hasChar)
     {
-        DEBUG_LOG("SelectCharacterHandler::ProcessMessage user " + std::to_string(userId) + " dont have character : " + std::to_string(characterId));
+        /* LOG TO FIX*/  LOG_ERROR << ("SelectCharacterHandler::ProcessMessage user " + std::to_string(userId) + " dont have character : " + std::to_string(characterId));
         return;
     }
 
diff --git a/Sources/RpgGameServer/GameServer/Manager.cpp b/Sources/RpgGameServer/GameServer/Manager.cpp
index 10056b25..4958377b 100644
--- a/Sources/RpgGameServer/GameServer/Manager.cpp
+++ b/Sources/RpgGameServer/GameServer/Manager.cpp
@@ -40,7 +40,7 @@ void Manager::AddHero(uint32 id)
 }
 void Manager::RemoveHero(uint32 id)
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
     for (auto& m : maps_)
     {
         auto character = m.GetCharacter(id);
@@ -60,7 +60,7 @@ const CharactersMap& Manager::GetAllCharactersInMap(uint32 mapId) const
 {
     if (mapId >= maps_.size())
     {
-        DEBUG_LOG("anager::GetAllCharactersInMap: map id : " + std::to_string(mapId) + " not found.");
+        /* LOG TO FIX*/  LOG_ERROR << ("anager::GetAllCharactersInMap: map id : " + std::to_string(mapId) + " not found.");
         return emptyCharactersMap_;
     }
     return maps_[mapId].GetAllCharacters();
diff --git a/Sources/RpgGameServer/GameServer/Map.cpp b/Sources/RpgGameServer/GameServer/Map.cpp
index 9fd9df85..9c1daaa8 100644
--- a/Sources/RpgGameServer/GameServer/Map.cpp
+++ b/Sources/RpgGameServer/GameServer/Map.cpp
@@ -15,11 +15,11 @@ void Map::AddCharacter(uint32 characterId, Hero::BaseHeroPtr hero)
 }
 void Map::RemoveCharacter(uint32 id)
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
     if (characters_.count(id) == 0)
         return;
 
-    DEBUG_LOG("Removing...");
+    /* LOG TO FIX*/  LOG_ERROR << ("Removing...");
     characters_.erase(id);
 }
 void Map::UpdateAllControllers(float dt)
diff --git a/Sources/RpgGameServer/main.cpp b/Sources/RpgGameServer/main.cpp
index b6a25c72..7a952a9a 100644
--- a/Sources/RpgGameServer/main.cpp
+++ b/Sources/RpgGameServer/main.cpp
@@ -4,7 +4,7 @@ int main(int argc, char** argv)
 {
     // CLogger::Instance().EnableLogs();
 
-    DEBUG_LOG("RPG GameServer v 0.1");
+    /* LOG TO FIX*/  LOG_ERROR << ("RPG GameServer v 0.1");
 
     SDL_Init(SDL_INIT_EVERYTHING);
     SDL_CreateWindow("My Game Window", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 640, 480, SDL_WINDOW_OPENGL);
diff --git a/Sources/Tests/UT/Camera/CameraFrustrumTests.cpp b/Sources/Tests/UT/Camera/CameraFrustrumTests.cpp
index 7178d5f0..0bf1bf53 100755
--- a/Sources/Tests/UT/Camera/CameraFrustrumTests.cpp
+++ b/Sources/Tests/UT/Camera/CameraFrustrumTests.cpp
@@ -1,12 +1,13 @@
-#include <GameEngine/Camera/Frustrum.h>
 #include <GameEngine/Camera/Camera.h>
+#include <GameEngine/Camera/Frustrum.h>
 #include <GameEngine/Renderers/GUI/Text/GuiTextElement.h>
 #include <GameEngine/Renderers/Projection.h>
-#include <Utils/GLM/GLMUtils.h>
 #include <Types.h>
+#include <Utils/GLM/GLMUtils.h>
 #include <gtest/gtest.h>
-#include <Utils/math.hpp>
+
 #include <GameEngine/Scene/Scene.hpp>
+#include <Utils/math.hpp>
 
 namespace GameEngine
 {
@@ -115,9 +116,9 @@ TEST_F(CameraFrustrumShould, PointBorderOutside)
 
         if (is)
         {
-            DEBUG_LOG("Z: " + std::to_string(z));
-            DEBUG_LOG("Point border : " + std::to_string(point - OFFSET));
-            DEBUG_LOG("Point border changed : " + std::to_string(point));
+            LOG_DEBUG << "Z: " << z;
+            LOG_DEBUG << "Point border : " << (point - OFFSET);
+            LOG_DEBUG << "Point border changed : " << point;
             break;
         }
     }
@@ -137,9 +138,9 @@ TEST_F(CameraFrustrumShould, DISABLED_PointBorderInside)
 
         if (not is)
         {
-            DEBUG_LOG("Z: " + std::to_string(z));
-            DEBUG_LOG("Point border : " + std::to_string(point - OFFSET));
-            DEBUG_LOG("Point border changed : " + std::to_string(point));
+            LOG_DEBUG << "Z: " << z;
+            LOG_DEBUG << "Point border : " << (point - OFFSET);
+            LOG_DEBUG << "Point border changed : " << point;
             break;
         }
     }
@@ -213,7 +214,7 @@ TEST_F(CameraFrustrumShould, SphereRightBorderOutside)
     EXPECT_FALSE(sut_.intersection(sphereCenter, radius));
 }
 
-TEST_F(CameraFrustrumShould,  DISABLED_SphereRightBorderInside)
+TEST_F(CameraFrustrumShould, DISABLED_SphereRightBorderInside)
 {
     auto distanceSphreToPlane = 1.0f - OFFSET;
     auto v3                   = CalculateSpherePositionInDistanceToSidePlane(distanceSphreToPlane);
diff --git a/Sources/Tests/UT/Components/Animations/AnimatorTests.cpp b/Sources/Tests/UT/Components/Animations/AnimatorTests.cpp
index 7948d864..6dcd582d 100644
--- a/Sources/Tests/UT/Components/Animations/AnimatorTests.cpp
+++ b/Sources/Tests/UT/Components/Animations/AnimatorTests.cpp
@@ -3,6 +3,7 @@
 
 #include "../BaseComponent.h"
 #include "GameEngine/Components/Animation/Animator.h"
+#include "Logger/Log.h"
 
 using namespace GameEngine;
 using namespace GameEngine::Animation;
@@ -81,18 +82,18 @@ struct AnimatorTestSchould : public BaseComponentTestSchould
             clip.AddFrame(frame);
         }
 
-//        frame.timeStamp              = 0;
-//        frame.transforms[0].position = vec3(0.0f, 0.f, 0.f);
-//        clip.AddFrame(frame);
-//        frame.timeStamp              = 0.33f;
-//        frame.transforms[0].position = vec3(1.0f, 0.f, 0.f);
-//        clip.AddFrame(frame);
-//        frame.timeStamp              = 0.6f;
-//        frame.transforms[0].position = vec3(2.0f, 0.f, 0.f);
-//        clip.AddFrame(frame);
-//        frame.timeStamp              = 0.99f;
-//        frame.transforms[0].position = vec3(3.0f, 0.f, 0.f);
-//        clip.AddFrame(frame);
+        //        frame.timeStamp              = 0;
+        //        frame.transforms[0].position = vec3(0.0f, 0.f, 0.f);
+        //        clip.AddFrame(frame);
+        //        frame.timeStamp              = 0.33f;
+        //        frame.transforms[0].position = vec3(1.0f, 0.f, 0.f);
+        //        clip.AddFrame(frame);
+        //        frame.timeStamp              = 0.6f;
+        //        frame.transforms[0].position = vec3(2.0f, 0.f, 0.f);
+        //        clip.AddFrame(frame);
+        //        frame.timeStamp              = 0.99f;
+        //        frame.transforms[0].position = vec3(3.0f, 0.f, 0.f);
+        //        clip.AddFrame(frame);
 
         sut_.AddAnimationClip(clipName, clip, AnimationClipInfo::PlayType::loop, rootMontion);
     }
@@ -123,10 +124,10 @@ TEST_F(AnimatorTestSchould, FullUpdateOneCycle)
                                         run       = false;
                                         auto time = timer.GetTimeNanoseconds();
                                         avarageTime += time;
-                                        DEBUG_LOG("Execute time : " + std::to_string(time));
+                                        LOG_DEBUG << "Execute time : " << time;
                                     });
 
-    DEBUG_LOG("Start timer...");
+    LOG_DEBUG << "Start timer...";
 
     int repeatCount{30};
     int frameCounter{0};
@@ -143,19 +144,18 @@ TEST_F(AnimatorTestSchould, FullUpdateOneCycle)
             ++frameCounter;
         }
     }
-    DEBUG_LOG("Avarage frame time : " +
-              std::to_string(static_cast<double>(avarageFrameTime) / static_cast<double>(frameCounter)));
-    DEBUG_LOG("Avarage animation time : " + std::to_string(static_cast<double>(avarageTime) / static_cast<double>(repeatCount)));
+    LOG_DEBUG << "Avarage frame time : " << static_cast<double>(avarageFrameTime) / static_cast<double>(frameCounter);
+    LOG_DEBUG << "Avarage animation time : " << static_cast<double>(avarageTime) / static_cast<double>(repeatCount);
 }
 
 TEST_F(AnimatorTestSchould, DISABLED_rootMontion)
 {
     auto rootJoint = sut_.GetRootJoint();
     EXPECT_TRUE(rootJoint);
-    DEBUG_LOG("RootJointName: " + rootJoint->name);
+    LOG_DEBUG << "RootJointName: " + rootJoint->name;
     sut_.SetAnimation(ROOT_MONTION_CLIP);
 
-    DEBUG_LOG("Update deltaTime: " + std::to_string(DEFAULT_ANIMATION_TRANSITION_TIME));
+    LOG_DEBUG << "Update deltaTime: " << DEFAULT_ANIMATION_TRANSITION_TIME;
     context_.time_.deltaTime = DEFAULT_ANIMATION_TRANSITION_TIME;
     // componentController_.CallFunctions(FunctionType::Update);
     sut_.Update();
@@ -164,6 +164,6 @@ TEST_F(AnimatorTestSchould, DISABLED_rootMontion)
     {
         context_.time_.deltaTime = FRAMES_DELTA;
         sut_.Update();
-        DEBUG_LOG(std::to_string(obj_.GetWorldTransform().GetPosition()));
+        LOG_DEBUG << obj_.GetWorldTransform().GetPosition();
     }
 }
diff --git a/Sources/Tests/UT/Components/CharacterController/CharacterControllerTests.cpp b/Sources/Tests/UT/Components/CharacterController/CharacterControllerTests.cpp
index abfccd28..556d14a8 100644
--- a/Sources/Tests/UT/Components/CharacterController/CharacterControllerTests.cpp
+++ b/Sources/Tests/UT/Components/CharacterController/CharacterControllerTests.cpp
@@ -1,6 +1,7 @@
 #include "CharacterControllerTests.h"
 
 #include "GameEngine/Physics/IPhysicsApi.h"
+#include "Logger/Log.h"
 
 MATCHER_P(CollisionDetectionActionMatcher, action, "Action matcher for CollisionDetection")
 {
@@ -12,9 +13,9 @@ CharacterControllerTests::CharacterControllerTests()
     , sut_(context_, obj_)
 {
     CLogger::Instance().EnableLogs();
-    CLogger::Instance().ImmeditalyLog();
+    CLogger::Instance().UseAsyncLogging(false);
 
-    DEBUG_LOG("CharacterControllerTests::CharacterControllerTests");
+    LOG_DEBUG << "CharacterControllerTests::CharacterControllerTests";
 
     EXPECT_CALL(physicsApiMock_, SetAngularFactor(_, Matcher<float>(_))).Times(AtLeast(1));
     EXPECT_CALL(physicsApiMock_, CreateSphereColider(_, _, _)).WillOnce(Return(shapeId));
@@ -289,15 +290,15 @@ void CharacterControllerTests::addDummyClip(const std::string& name)
     Animation::AnimationClip clip(name);
     for (int i = 0; i <= DUMMY_FRAMES; ++i)
     {
-        clip.AddFrame(Animation::KeyFrame{DUMMY_FRAME_TIME_DELTA * (float)i, {{0, Animation::JointTransform{}}}});
+        clip.AddFrame(Animation::KeyFrame{{DUMMY_FRAME_TIME_DELTA * (float)i}, {{0, Animation::JointTransform{}}}});
     }
-    DEBUG_LOG("addDummyClip : " + name + " Length : " + std::to_string(clip.GetLength()));
+    LOG_DEBUG << "addDummyClip : " << name << " Length : " << clip.GetLength();
     animator_->AddAnimationClip(name, clip);
 }
 
 void CharacterControllerTests::Update(float time)
 {
-    DEBUG_LOG("Update deltaTime: " + std::to_string(time));
+    LOG_DEBUG << "Update deltaTime: " << time;
     context_.time_.deltaTime = time;
     componentController_.CallFunctions(FunctionType::Update);
 }
@@ -313,12 +314,12 @@ void CharacterControllerTests::expectAnimsToBeSet(const std::vector<std::string>
 
     for (const auto& name : names)
     {
-        DEBUG_LOG("Expected : " + name);
+        LOG_DEBUG << "Expected : " << name;
     }
 
     for (const auto& name : animator_->getCurrentAnimationName())
     {
-        DEBUG_LOG("Current  : " + name);
+        LOG_DEBUG << "Current  : " << name;
         auto iter = std::find(names.begin(), names.end(), name);
         EXPECT_TRUE(iter != names.end());
     }
@@ -338,9 +339,9 @@ void CharacterControllerTests::expectVelocity(const vec3& dir, const vec3& moveS
 {
     auto normalizedDir = glm::normalize(dir);
     auto velocity      = normalizedDir * glm::length(moveSpeed * normalizedDir);
-    DEBUG_LOG("Expected dir : " + std::to_string(dir));
-    DEBUG_LOG("Expected speed : " + std::to_string(moveSpeed));
-    DEBUG_LOG("Expected velocity : " + std::to_string(velocity));
+    LOG_DEBUG << "Expected dir : " << dir;
+    LOG_DEBUG << "Expected speed : " << moveSpeed;
+    LOG_DEBUG << "Expected velocity : " << velocity;
     EXPECT_CALL(physicsApiMock_, GetRotation(rigidbodyid)).WillRepeatedly(Return(Rotation().value_));
     EXPECT_CALL(physicsApiMock_, GetVelocity(rigidbodyid)).WillRepeatedly(Return(currentVelocity));
     EXPECT_CALL(physicsApiMock_, SetVelocityRigidbody(rigidbodyid, velocity))
@@ -350,7 +351,7 @@ void CharacterControllerTests::expectVelocity(const vec3& dir, const vec3& moveS
 
 void CharacterControllerTests::expectForwardVelocity(float speed)
 {
-    DEBUG_LOG("Expected speed : " + std::to_string(speed));
+    LOG_DEBUG << "Expected speed : " << speed;
     EXPECT_CALL(physicsApiMock_, GetRotation(rigidbodyid)).WillRepeatedly(Return(Rotation().value_));
     EXPECT_CALL(physicsApiMock_, GetVelocity(rigidbodyid)).WillRepeatedly(Return(vec3(0)));
     EXPECT_CALL(physicsApiMock_, SetVelocityRigidbody(rigidbodyid, vec3(0.0, 0.0, speed)))
@@ -376,7 +377,7 @@ void CharacterControllerTests::expectRotatation(float deltaTime, float rotateSpe
 {
     auto rotation = createRotaion(rotateSpeed, deltaTime);
 
-    DEBUG_LOG("Expected rotation : " + std::to_string(rotation.value_));
+    /* LOG TO FIX*/ LOG_ERROR << ("Expected rotation : " + std::to_string(rotation.value_));
     EXPECT_CALL(physicsApiMock_, GetRotation(rigidbodyid)).WillRepeatedly(Return(Rotation().value_));
     EXPECT_CALL(physicsApiMock_, SetRotation(rigidbodyid, Matcher<const Quaternion&>(rotation.value_))).Times(AtLeast(1));
 }
@@ -403,8 +404,8 @@ void CharacterControllerTests::expectRootboneRotation(const vec3& dir)
     EXPECT_NEAR(currentBoneRotation.z, expectedBoneRotation.z, std::numeric_limits<float>::epsilon());
     EXPECT_NEAR(currentBoneRotation.w, expectedBoneRotation.w, std::numeric_limits<float>::epsilon());
 
-    DEBUG_LOG("Expected bone rotation : " + std::to_string(expectedBoneRotation) + ", eurler " +
-              std::to_string(Rotation(expectedBoneRotation).GetEulerDegrees().value));
-    DEBUG_LOG("Current bone rotation : " + std::to_string(currentBoneRotation) + ", eurler " +
-              std::to_string(Rotation(currentBoneRotation).GetEulerDegrees().value));
+    /* LOG TO FIX*/ LOG_ERROR << ("Expected bone rotation : " + std::to_string(expectedBoneRotation) + ", eurler " +
+                                  std::to_string(Rotation(expectedBoneRotation).GetEulerDegrees().value));
+    /* LOG TO FIX*/ LOG_ERROR << ("Current bone rotation : " + std::to_string(currentBoneRotation) + ", eurler " +
+                                  std::to_string(Rotation(currentBoneRotation).GetEulerDegrees().value));
 }
diff --git a/Sources/Tests/UT/Components/CharacterController/States/DisarmedIdleStateTests.cpp b/Sources/Tests/UT/Components/CharacterController/States/DisarmedIdleStateTests.cpp
index 4e96989f..ec444f3e 100644
--- a/Sources/Tests/UT/Components/CharacterController/States/DisarmedIdleStateTests.cpp
+++ b/Sources/Tests/UT/Components/CharacterController/States/DisarmedIdleStateTests.cpp
@@ -111,7 +111,7 @@ TEST_F(CharacterControllerTests, DisarmedIdleState_JumpEvent)
 
     for (int i = 0; i < 3; i++)
     {
-        DEBUG_LOG("Iteration i=" + std::to_string(i));
+        /* LOG TO FIX*/  LOG_ERROR << ("Iteration i=" + std::to_string(i));
         EXPECT_CALL(physicsApiMock_, GetVelocity(rigidbodyid)).WillRepeatedly(Return(vec3(0)));
         EXPECT_CALL(physicsApiMock_, SetVelocityRigidbody(rigidbodyid, vec3(0.f, DEFAULT_JUMP_POWER, 0.f)));
 
diff --git a/Sources/Tests/UT/Components/CharacterController/States/DisarmedRotateStateTests.cpp b/Sources/Tests/UT/Components/CharacterController/States/DisarmedRotateStateTests.cpp
index 41463e97..ebb6f61e 100644
--- a/Sources/Tests/UT/Components/CharacterController/States/DisarmedRotateStateTests.cpp
+++ b/Sources/Tests/UT/Components/CharacterController/States/DisarmedRotateStateTests.cpp
@@ -156,8 +156,8 @@ TEST_F(CharacterControllerTests, DisarmedRotateState_XXX)
         auto rotation = caclulateTargetRotation(target - position);
 
         auto d = glm::dot(rotation, rotationRef);
-        DEBUG_LOG(std::to_string(d));
-        DEBUG_LOG(std::to_string(ToDegrees(acosf(d))));
+        /* LOG TO FIX*/  LOG_ERROR << (std::to_string(d));
+        /* LOG TO FIX*/  LOG_ERROR << (std::to_string(ToDegrees(acosf(d))));
 
         target.x += 0.1f;
     }
@@ -168,8 +168,8 @@ TEST_F(CharacterControllerTests, DisarmedRotateState_XXX)
         auto rotation = caclulateTargetRotation(target - position);
 
         auto d = glm::dot(rotation, rotationRef);
-        DEBUG_LOG(std::to_string(d));
-        DEBUG_LOG(std::to_string(ToDegrees(acosf(d))));
+        /* LOG TO FIX*/  LOG_ERROR << (std::to_string(d));
+        /* LOG TO FIX*/  LOG_ERROR << (std::to_string(ToDegrees(acosf(d))));
         target.x -= 0.1f;
     }
 }
diff --git a/Sources/Tests/UT/Components/CharacterController/States/DisarmedRunStateTests.cpp b/Sources/Tests/UT/Components/CharacterController/States/DisarmedRunStateTests.cpp
index b3f9e579..1132c9dc 100644
--- a/Sources/Tests/UT/Components/CharacterController/States/DisarmedRunStateTests.cpp
+++ b/Sources/Tests/UT/Components/CharacterController/States/DisarmedRunStateTests.cpp
@@ -207,7 +207,7 @@ TEST_F(CharacterControllerTests, DISABLED_DisarmedRunState_JumpEvent)
 {
     prepareState(*this);
     const float jumpPower{1.f};
-    DEBUG_LOG("lastSetVelocity=" + std::to_string(lastSetVelocity));
+    /* LOG TO FIX*/  LOG_ERROR << ("lastSetVelocity=" + std::to_string(lastSetVelocity));
 
     // expectVelocity(VECTOR_FORWARD + VECTOR_UP, vec3(0, jumpPower, DEFAULT_RUN_SPEED), lastSetVelocity);
     EXPECT_CALL(physicsApiMock_, GetRotation(rigidbodyid)).WillRepeatedly(Return(Rotation().value_));
diff --git a/Sources/Tests/UT/Resources/AssimpLoaderTests.cpp b/Sources/Tests/UT/Resources/AssimpLoaderTests.cpp
index da7daae3..50d29c17 100644
--- a/Sources/Tests/UT/Resources/AssimpLoaderTests.cpp
+++ b/Sources/Tests/UT/Resources/AssimpLoaderTests.cpp
@@ -16,8 +16,8 @@ struct AssimpLoaderShould : public ::testing::Test
     AssimpLoaderShould()
     {
         EngineConf.useBinaryLoading = false;
-        CLogger::Instance().EnableLogs(LogginLvl::ErrorWarningInfoDebug);
-        CLogger::Instance().ImmeditalyLog();
+        CLogger::Instance().EnableLogs(LoggingLvl::ErrorWarningInfoDebug);
+        CLogger::Instance().UseAsyncLogging(false);
     }
 
     void SetUp() override
@@ -29,7 +29,7 @@ struct AssimpLoaderShould : public ::testing::Test
 
     void PrintJoints(const GameEngine::Animation::Joint& joint, const std::string& of = "")
     {
-        DEBUG_LOG(of + joint.name + " (size : " + std::to_string(joint.size) + ")");
+        /* LOG TO FIX*/  LOG_ERROR << (of + joint.name + " (size : " + std::to_string(joint.size) + ")");
 
         for (const auto& child : joint.children)
         {
@@ -39,9 +39,9 @@ struct AssimpLoaderShould : public ::testing::Test
 
     void PrintJointsWithMatrix(const GameEngine::Animation::Joint& joint, const std::string& of = "")
     {
-        DEBUG_LOG(of + joint.name);
-        DEBUG_LOG(of + std::to_string(joint.id));
-        DEBUG_LOG(of + std::to_string(joint.transform));
+        /* LOG TO FIX*/  LOG_ERROR << (of + joint.name);
+        /* LOG TO FIX*/  LOG_ERROR << (of + std::to_string(joint.id));
+        /* LOG TO FIX*/  LOG_ERROR << (of + std::to_string(joint.transform));
 
         for (const auto& child : joint.children)
         {
@@ -97,9 +97,9 @@ TEST_F(AssimpLoaderShould, DISABLED_ReadGarenAnimations)
     auto data  = model->GetMeshes().front().GetCMeshDataRef();
     // EXPECT_EQ( model->skeleton_.children.size(), 1);
 
-    DEBUG_LOG("Print skeleton");
+    /* LOG TO FIX*/  LOG_ERROR << ("Print skeleton");
     //PrintJointsWithMatrix(model->skeleton_);
-    DEBUG_LOG("end print skeleton");
+    /* LOG TO FIX*/  LOG_ERROR << ("end print skeleton");
 }
 }  // namespace UT
 }  // namespace GameEngine
diff --git a/Sources/Tests/UT/Resources/ColladaLoaderTests.cpp b/Sources/Tests/UT/Resources/ColladaLoaderTests.cpp
index ce98b49a..13e9fe21 100644
--- a/Sources/Tests/UT/Resources/ColladaLoaderTests.cpp
+++ b/Sources/Tests/UT/Resources/ColladaLoaderTests.cpp
@@ -25,7 +25,7 @@ struct ColladaLoaderShould : public ::testing::Test
 
     void PrintJoints(const GameEngine::Animation::Joint& joint, const std::string& of = "")
     {
-        DEBUG_LOG(of + joint.name + " (size : " + std::to_string(joint.size) + ")");
+        /* LOG TO FIX*/  LOG_ERROR << (of + joint.name + " (size : " + std::to_string(joint.size) + ")");
 
         for (const auto& child : joint.children)
         {
@@ -35,9 +35,9 @@ struct ColladaLoaderShould : public ::testing::Test
 
     void PrintJointsWithMatrix(const GameEngine::Animation::Joint& joint, const std::string& of = "")
     {
-        DEBUG_LOG(of + joint.name);
-        DEBUG_LOG(of + std::to_string(joint.id));
-        DEBUG_LOG(of + std::to_string(joint.transform));
+        /* LOG TO FIX*/  LOG_ERROR << (of + joint.name);
+        /* LOG TO FIX*/  LOG_ERROR << (of + std::to_string(joint.id));
+        /* LOG TO FIX*/  LOG_ERROR << (of + std::to_string(joint.transform));
 
         for (const auto& child : joint.children)
         {
@@ -108,9 +108,9 @@ TEST_F(ColladaLoaderShould, DISABLED_ReadAnimations)
     auto model = sut_->Create();
     auto data = model->GetMeshes().front().GetCMeshDataRef();
 
-    DEBUG_LOG("Print skeleton");
+    /* LOG TO FIX*/  LOG_ERROR << ("Print skeleton");
   //  PrintJointsWithMatrix(model->skeleton_);
-    DEBUG_LOG("end print skeleton");
+    /* LOG TO FIX*/  LOG_ERROR << ("end print skeleton");
 }
 }  // namespace WBLoader
 }  // namespace GameEngine
diff --git a/Sources/Tests/UT/Resources/TextureLoaderTests.cpp b/Sources/Tests/UT/Resources/TextureLoaderTests.cpp
index 8d39e1d8..1c0266a8 100644
--- a/Sources/Tests/UT/Resources/TextureLoaderTests.cpp
+++ b/Sources/Tests/UT/Resources/TextureLoaderTests.cpp
@@ -19,7 +19,7 @@ struct TextureLoaderTest : public ::testing::Test
         const std::string configFile = "./Conf.xml";
         GameEngine::ReadFromFile(configFile);
         CLogger::Instance().EnableLogs();
-        CLogger::Instance().ImmeditalyLog();
+        CLogger::Instance().UseAsyncLogging(false);
     }
 
     virtual void SetUp() override
@@ -40,7 +40,7 @@ TEST_F(TextureLoaderTest, DISABLED_FreeImageForValgrind)
     File textureFile{"Textures/textureNotFound.png"};
     EXPECT_TRUE(std::filesystem::exists(textureFile.GetAbsolutePath()));
     GameEngine::ReadFile(textureFile, TextureParameters());
-    DEBUG_LOG("Time : " + std::to_string(timer.GetTimeNanoseconds()));
+    /* LOG TO FIX*/  LOG_ERROR << ("Time : " + std::to_string(timer.GetTimeNanoseconds()));
 }
 // Disabled because of data needed
 TEST_F(TextureLoaderTest, DISABLED_FreeImageResizedForValgrind)
@@ -50,6 +50,6 @@ TEST_F(TextureLoaderTest, DISABLED_FreeImageResizedForValgrind)
     File textureFile{"Textures/textureNotFound.png"};
     EXPECT_TRUE(std::filesystem::exists(textureFile.GetAbsolutePath()));
     GameEngine::ReadFile(textureFile, TextureParameters());
-    DEBUG_LOG("Time : " + std::to_string(timer.GetTimeNanoseconds()));
+    /* LOG TO FIX*/  LOG_ERROR << ("Time : " + std::to_string(timer.GetTimeNanoseconds()));
 }
 }  // namespace GameEngine
diff --git a/Sources/Tests/UT/Scene/Scene.cpp b/Sources/Tests/UT/Scene/Scene.cpp
index c8021a57..822337cb 100644
--- a/Sources/Tests/UT/Scene/Scene.cpp
+++ b/Sources/Tests/UT/Scene/Scene.cpp
@@ -26,7 +26,7 @@ struct SceneTest : public Scene
 
     ~SceneTest()
     {
-        DEBUG_LOG("");
+        /* LOG TO FIX*/  LOG_ERROR << ("");
     }
 
     GraphicsApi::WindowApiMock windowApiMock_;
@@ -42,7 +42,7 @@ struct SceneShould : public ::testing::Test
 
     ~SceneShould()
     {
-        DEBUG_LOG("");
+        /* LOG TO FIX*/  LOG_ERROR << ("");
     }
 
     GraphicsApi::WindowApiMock windowApiMock_;
diff --git a/Sources/Tests/UT/TerrainToolsTests.cpp b/Sources/Tests/UT/TerrainToolsTests.cpp
index 77ecbd57..217ab926 100644
--- a/Sources/Tests/UT/TerrainToolsTests.cpp
+++ b/Sources/Tests/UT/TerrainToolsTests.cpp
@@ -16,7 +16,7 @@ struct TerrainToolsShould : public ::testing::Test
     TerrainToolsShould()
     {
         CLogger::Instance().EnableLogs();
-        CLogger::Instance().ImmeditalyLog();
+        CLogger::Instance().UseAsyncLogging(false);
     }
 
     void SetUp() override
@@ -53,7 +53,7 @@ TEST_F(TerrainToolsShould, vauleInRangeInZeroPos)
     init(terrainScale, image);
 
     auto normal = sut_->GetNormal(0, 0);
-    DEBUG_LOG(std::to_string(normal));
+    LOG_DEBUG << normal;
 
     EXPECT_FLOAT_EQ(normal.x, 0.f);
     EXPECT_FLOAT_EQ(normal.y, 1.f);
@@ -62,7 +62,7 @@ TEST_F(TerrainToolsShould, vauleInRangeInZeroPos)
     auto transformMatrix = Utils::CreateTransformationMatrix(vec3(0), Quaternion(), vec3(1, 2, 1));
 
     auto transformedNormal = glm::normalize(vec3(transformMatrix * vec4(sut_->GetNormal(0, 0), 0.0f)));
-    DEBUG_LOG(std::to_string(transformedNormal));
+    LOG_DEBUG << transformedNormal;
 
     EXPECT_FLOAT_EQ(transformedNormal.x, 0.f);
     EXPECT_FLOAT_EQ(transformedNormal.y, 1.f);
diff --git a/Sources/Tests/UT/TerrainTransitionTests.cpp b/Sources/Tests/UT/TerrainTransitionTests.cpp
index 506cbfc5..ae565802 100644
--- a/Sources/Tests/UT/TerrainTransitionTests.cpp
+++ b/Sources/Tests/UT/TerrainTransitionTests.cpp
@@ -25,7 +25,7 @@ struct TerrainTransitionTests : public BaseComponentTestSchould
         , go2("go2", componentController_, componentFactory_, gameObjectIdPool)
     {
         CLogger::Instance().EnableLogs();
-        CLogger::Instance().ImmeditalyLog();
+        CLogger::Instance().UseAsyncLogging(false);
 
         // auto& terrainComponent1 = go1.AddComponent<Components::TerrainRendererComponent>();
         // auto& terrainComponent2 = go2.AddComponent<Components::TerrainRendererComponent>();
diff --git a/Sources/Tests/main.cpp b/Sources/Tests/main.cpp
index fcd9e0b1..a9a53b0f 100644
--- a/Sources/Tests/main.cpp
+++ b/Sources/Tests/main.cpp
@@ -6,7 +6,7 @@
 int main(int argc, char** argv)
 {
     CLogger::Instance().EnableLogs();
-    CLogger::Instance().ImmeditalyLog();
+    CLogger::Instance().UseAsyncLogging(false);
     ::testing::InitGoogleTest(&argc, argv);
     ::testing::InitGoogleMock(&argc, argv);
     auto result = RUN_ALL_TESTS();
diff --git a/Sources/Utils/FileSystem/FileSystemUtils.cpp b/Sources/Utils/FileSystem/FileSystemUtils.cpp
index 90a8905d..d04ae379 100644
--- a/Sources/Utils/FileSystem/FileSystemUtils.cpp
+++ b/Sources/Utils/FileSystem/FileSystemUtils.cpp
@@ -94,7 +94,7 @@ std::vector<std::string> FindFilesWithExtension(const std::string& dir, const st
     }
     catch (...)
     {
-        ERROR_LOG("Find files error. searching files with extension : " + extension + " in dir : " + dir);
+        /* LOG TO FIX*/  LOG_ERROR << ("Find files error. searching files with extension : " + extension + " in dir : " + dir);
     }
 
     return result;
@@ -206,12 +206,12 @@ std::string GetAbsolutePath(const std::string& file)
     }
     catch (const std::filesystem::filesystem_error& e)
     {
-        ERROR_LOG(e.what());
+        /* LOG TO FIX*/  LOG_ERROR << (e.what());
         return file;
     }
     catch (...)
     {
-        ERROR_LOG("error " + file);
+        /* LOG TO FIX*/  LOG_ERROR << ("error " + file);
         return file;
     }
 }
@@ -224,12 +224,12 @@ std::string GetAbsoluteParentPath(const std::string& file)
     }
     catch (const std::filesystem::filesystem_error& e)
     {
-        ERROR_LOG(e.what());
+        /* LOG TO FIX*/  LOG_ERROR << (e.what());
         return file;
     }
     catch (...)
     {
-        ERROR_LOG("error " + file);
+        /* LOG TO FIX*/  LOG_ERROR << ("error " + file);
         return file;
     }
 }
@@ -278,12 +278,12 @@ std::string GetRelativePath(const std::string& absoultePath, const std::string&
     }
     catch (const std::filesystem::filesystem_error& e)
     {
-        ERROR_LOG(e.what());
+        /* LOG TO FIX*/  LOG_ERROR << (e.what());
         return absoultePath;
     }
     catch (...)
     {
-        ERROR_LOG("error " + absoultePath);
+        /* LOG TO FIX*/  LOG_ERROR << ("error " + absoultePath);
         return absoultePath;
     }
 }
@@ -297,17 +297,17 @@ std::string CreateBackupFile(const std::string& output)
             auto backupFile = output + ".backup";
             if (std::filesystem::exists(backupFile))
             {
-                DEBUG_LOG("Remove old backup file " + backupFile);
+                /* LOG TO FIX*/  LOG_ERROR << ("Remove old backup file " + backupFile);
                 std::filesystem::remove(backupFile);
             }
 
             std::filesystem::copy(output, backupFile);
-            DEBUG_LOG("Backup created. " + backupFile);
+            /* LOG TO FIX*/  LOG_ERROR << ("Backup created. " + backupFile);
             return backupFile;
         }
         catch (...)
         {
-            ERROR_LOG("Create backup error. " + output);
+            /* LOG TO FIX*/  LOG_ERROR << ("Create backup error. " + output);
         }
     }
 
@@ -331,7 +331,7 @@ void ReadFilesWithIncludesImpl(const std::string& fullPath, std::stringstream& o
 
             if (startFileNamePos >= endNamePos)
             {
-                ERROR_LOG(fullPath + " : inncorect include line : " + line);
+                /* LOG TO FIX*/  LOG_ERROR << (fullPath + " : inncorect include line : " + line);
                 continue;
             }
 
@@ -365,7 +365,7 @@ std::string ReadFilesWithIncludes(const std::string& filename)
     }
     catch (...)
     {
-        ERROR_LOG(filename + " including error");
+        /* LOG TO FIX*/  LOG_ERROR << (filename + " including error");
     }
     return sourceCode.str();
 }
@@ -379,7 +379,7 @@ void CreateEmptyFile(const std::string& filename)
     }
     catch (...)
     {
-        ERROR_LOG("Create file error : " + filename);
+        /* LOG TO FIX*/  LOG_ERROR << ("Create file error : " + filename);
     }
 }
 void RenameFile(const std::string& path, const std::string& newName)
@@ -390,7 +390,7 @@ void RenameFile(const std::string& path, const std::string& newName)
     }
     catch (...)
     {
-        DEBUG_LOG("rename error");
+        /* LOG TO FIX*/  LOG_ERROR << ("rename error");
     }
 }
 void CopyFileOrFolder(const std::filesystem::path& src, const std::filesystem::path& destFolder)
diff --git a/Sources/Utils/Fsm/Fsm.h b/Sources/Utils/Fsm/Fsm.h
index e883841c..15f3c138 100644
--- a/Sources/Utils/Fsm/Fsm.h
+++ b/Sources/Utils/Fsm/Fsm.h
@@ -47,7 +47,7 @@ public:
         }
         else
         {
-            DEBUG_LOG("No previous state!");
+            /* LOG TO FIX*/  LOG_ERROR << ("No previous state!");
         }
     }
 
@@ -61,7 +61,7 @@ public:
     void handleBy(const Event& event, Machine& machine)
     {
         //#ifdef NOREALTIME_LOG_ENABLED
-        DEBUG_LOG("Handle event : " + typeName<Event>());
+        /* LOG TO FIX*/  LOG_ERROR << ("Handle event : " + typeName<Event>());
         //#endif
         auto passEventToState = [&machine, &event](auto statePtr)
         {
diff --git a/Sources/Utils/Fsm/actions/BackToPreviousState.h b/Sources/Utils/Fsm/actions/BackToPreviousState.h
index 96aaaabd..58eea786 100644
--- a/Sources/Utils/Fsm/actions/BackToPreviousState.h
+++ b/Sources/Utils/Fsm/actions/BackToPreviousState.h
@@ -15,10 +15,10 @@ public:
     void execute(Machine& machine, State& prevState, const Event& event)
     {
 #ifdef NOREALTIME_LOG_ENABLED
-        DEBUG_LOG("PrevState : " + typeName<State>());
+        LOG_DEBUG << "PrevState : " << typeName<State>();
         if (not machine.previousState.empty())
         {
-            std::visit([](const auto& state) { DEBUG_LOG("Entering : " + typeName(state)); }, machine.previousState.back());
+            std::visit([](const auto& state) { LOG_DEBUG << "Entering : " << typeName(state); }, machine.previousState.back());
         }
 #endif
 
diff --git a/Sources/Utils/Fsm/actions/TransitionTo.h b/Sources/Utils/Fsm/actions/TransitionTo.h
index 179565d0..2184188f 100644
--- a/Sources/Utils/Fsm/actions/TransitionTo.h
+++ b/Sources/Utils/Fsm/actions/TransitionTo.h
@@ -17,15 +17,15 @@ public:
         if (not transitionCondition(prevState, event))
         {
 //#ifdef NOREALTIME_LOG_ENABLED
-            DEBUG_LOG("transitionConditions from " + typeName<State>() + " to " + typeName<TargetState>() +
-                      " are not met, return");
+             LOG_DEBUG << "transitionConditions from " << typeName<State>() + " to " << typeName<TargetState>() +
+                      " are not met, return";
 //#endif
             return;
         }
 
 //#ifdef NOREALTIME_LOG_ENABLED
-        DEBUG_LOG("PrevState : " + typeName<State>());
-        DEBUG_LOG("Entering : " + typeName<TargetState>());
+        LOG_DEBUG << "PrevState : " << typeName<State>();
+        LOG_DEBUG << "Entering : " << typeName<TargetState>();
 //#endif
 
         leave(prevState);
diff --git a/Sources/Utils/Fsm/actions/Update.h b/Sources/Utils/Fsm/actions/Update.h
index b3584535..ddd2eaa9 100644
--- a/Sources/Utils/Fsm/actions/Update.h
+++ b/Sources/Utils/Fsm/actions/Update.h
@@ -25,7 +25,7 @@ private:
     auto update(State& state, const Event& event) -> decltype(state.update(event))
     {
 #ifdef NOREALTIME_LOG_ENABLED
-        DEBUG_LOG("Update state: " + typeName<State>() + ", event: " + typeName<Event>());
+        /* LOG TO FIX*/  LOG_ERROR << ("Update state: " + typeName<State>() + ", event: " + typeName<Event>());
 #endif
         return state.update(event);
     }
@@ -39,7 +39,7 @@ private:
     auto post(State& state) -> decltype(state.postUpdate())
     {
 #ifdef NOREALTIME_LOG_ENABLED
-        DEBUG_LOG("Post update state: " + typeName<State>());
+        /* LOG TO FIX*/  LOG_ERROR << ("Post update state: " + typeName<State>());
 #endif
         return state.postUpdate();
     }
diff --git a/Sources/Utils/IdPool.cpp b/Sources/Utils/IdPool.cpp
index f9d7aead..07c1e59a 100644
--- a/Sources/Utils/IdPool.cpp
+++ b/Sources/Utils/IdPool.cpp
@@ -37,7 +37,7 @@ IdType IdPool::getId(const std::optional<IdType>& requestedId)
             else
             {
                 auto toReturn = getNextId();
-                WARNING_LOG("Can not allocate id : " + std::to_string(*requestedId) +
+                /* LOG TO FIX*/  LOG_ERROR << ("Can not allocate id : " + std::to_string(*requestedId) +
                             " assign new one : " + std::to_string(toReturn));
                 return toReturn;
             }
diff --git a/Sources/Utils/Image/Image.cpp b/Sources/Utils/Image/Image.cpp
index 194fb20e..d0a167f2 100644
--- a/Sources/Utils/Image/Image.cpp
+++ b/Sources/Utils/Image/Image.cpp
@@ -235,7 +235,7 @@ void Image::setChannels(uint8 channels)
     }
     else
     {
-        ERROR_LOG("Unsupported channels count :" + std::to_string(channels) +
+        /* LOG TO FIX*/  LOG_ERROR << ("Unsupported channels count :" + std::to_string(channels) +
                   ", current value : " + std::to_string(channels_));
     }
 }
@@ -254,10 +254,10 @@ void Image::applyFilter(const ImageFilter& imageFilter)
 
     if (size.x % 2 == 0 or size.y % 2 == 0)
     {
-        DEBUG_LOG("Wrong filter size. Filter not applied");
+        /* LOG TO FIX*/  LOG_ERROR << ("Wrong filter size. Filter not applied");
         return;
     }
-    DEBUG_LOG("Applying filter");
+    /* LOG TO FIX*/  LOG_ERROR << ("Applying filter");
     uint32 halfsizeY = size.y / 2;
     uint32 halfsizeX = size.x / 2;
 
diff --git a/Sources/Utils/Image/ImageUtils.cpp b/Sources/Utils/Image/ImageUtils.cpp
index dddab7a0..1a2461c1 100644
--- a/Sources/Utils/Image/ImageUtils.cpp
+++ b/Sources/Utils/Image/ImageUtils.cpp
@@ -4,7 +4,6 @@
 #include <Logger/Log.h>
 #include <Utils/Variant.h>
 
-#include <algorithm>
 #include <filesystem>
 
 namespace Utils
@@ -14,12 +13,11 @@ void SaveImage(const std::vector<uint8> &data, const vec2ui &size, const std::st
     auto minSize = size.x * size.y * 4;
     if (data.size() < minSize)
     {
-        DEBUG_LOG("Data image not complete : " + filename + " size : " + std::to_string(data.size()) + "/" +
-                  std::to_string(minSize));
+        LOG_ERROR << "Data image not complete : " << filename << " size : " << data.size() << "/" << std::to_string(minSize);
         return;
     }
 
-    DEBUG_LOG("Save image : " + filename + ", size=" + std::to_string(size.x) + "x" + std::to_string(size.y) + ":4");
+    LOG_DEBUG << "Save image : " << filename << ", size=" << size.x << "x" << size.y << ":4";
     FIBITMAP *bitmap = FreeImage_Allocate(static_cast<int>(size.x), static_cast<int>(size.y), 32, 8, 8, 8);
 
     auto width  = FreeImage_GetWidth(bitmap);
@@ -58,7 +56,7 @@ void SaveImage(const Image &image, const std::string &outputFilePath, const std:
                        {
                            if (image.getChannelsCount() == 1)
                            {
-                               DEBUG_LOG("SaveImage for floats, converting to uint8 image");
+                               LOG_DEBUG << "SaveImage for floats, converting to uint8 image";
 
                                float min = data.front();
                                float max = data.front();
@@ -87,10 +85,12 @@ void SaveImage(const Image &image, const std::string &outputFilePath, const std:
                            }
                            else
                            {
-                               DEBUG_LOG("SaveImage for floats for more than 1 channel not implemented");
+                               LOG_DEBUG << "SaveImage for floats for more than 1 channel not implemented";
                            }
                        },
-                       [](std::monostate) { ERROR_LOG("Data not set!"); }},
+                       [](std::monostate) { /* LOG TO FIX*/
+                                            LOG_ERROR << ("Data not set!");
+                       }},
                image.getImageData());
 }
 }  // namespace Utils
diff --git a/Sources/Utils/Json/JsonReader.cpp b/Sources/Utils/Json/JsonReader.cpp
index fddf3feb..17a100e2 100644
--- a/Sources/Utils/Json/JsonReader.cpp
+++ b/Sources/Utils/Json/JsonReader.cpp
@@ -118,7 +118,7 @@ bool JsonReader::Read(const std::string& filename)
     }
     catch (...)
     {
-        WARNING_LOG("Json read error! filename=" + filename);
+        /* LOG TO FIX*/  LOG_ERROR << ("Json read error! filename=" + filename);
     }
     return false;
 }
@@ -130,9 +130,9 @@ bool JsonReader::ReadJson(const std::string& fileContent)
 
     if (!ok)
     {
-        ERROR_LOG("JSON parse error: " + std::string(GetParseError_En(ok.Code())) + " (offset " + std::to_string(ok.Offset()) +
+        /* LOG TO FIX*/  LOG_ERROR << ("JSON parse error: " + std::string(GetParseError_En(ok.Code())) + " (offset " + std::to_string(ok.Offset()) +
                   ")");
-        ERROR_LOG(fileContent);
+        /* LOG TO FIX*/  LOG_ERROR << (fileContent);
         return false;
     }
 
diff --git a/Sources/Utils/Json/JsonWriter.cpp b/Sources/Utils/Json/JsonWriter.cpp
index b55d06a5..91fc95e8 100644
--- a/Sources/Utils/Json/JsonWriter.cpp
+++ b/Sources/Utils/Json/JsonWriter.cpp
@@ -75,7 +75,7 @@ void Json::Write(const std::string& filename, const TreeNode& root)
     std::ofstream file(filename);
     if (!file.is_open())
     {
-        ERROR_LOG("cannot open file " + filename);
+        /* LOG TO FIX*/  LOG_ERROR << ("cannot open file " + filename);
         return;
     }
 
diff --git a/Sources/Utils/ThreadSubscriber.cpp b/Sources/Utils/ThreadSubscriber.cpp
index b6116928..21605705 100644
--- a/Sources/Utils/ThreadSubscriber.cpp
+++ b/Sources/Utils/ThreadSubscriber.cpp
@@ -20,13 +20,13 @@ ThreadSubscriber::ThreadSubscriber(const std::string& label, frameFunc func, Mea
 
 ThreadSubscriber::~ThreadSubscriber()
 {
-    DEBUG_LOG("destructor " + label_);
+    /* LOG TO FIX*/  LOG_ERROR << ("destructor " + label_);
     Stop();
 }
 
 void ThreadSubscriber::Start()
 {
-    DEBUG_LOG("Start \"" + label_ + "\",  thread.");
+    /* LOG TO FIX*/  LOG_ERROR << ("Start \"" + label_ + "\",  thread.");
     isRunning.store(true);
     thread = std::thread(std::bind(&ThreadSubscriber::Update, this));
     timeMeasurer.AddOnTickCallback(std::bind(&ThreadSubscriber::PrintFps, this));
@@ -53,7 +53,7 @@ void ThreadSubscriber::Update()
         timeMeasurer.EndFrame();
     }
 
-    DEBUG_LOG("End \"" + label_ + "\",  thread.");
+    /* LOG TO FIX*/  LOG_ERROR << ("End \"" + label_ + "\",  thread.");
 }
 
 void ThreadSubscriber::PrintFps()
diff --git a/Sources/Utils/ThreadSync.cpp b/Sources/Utils/ThreadSync.cpp
index 4510a3f8..9be1b448 100644
--- a/Sources/Utils/ThreadSync.cpp
+++ b/Sources/Utils/ThreadSync.cpp
@@ -13,7 +13,7 @@ ThreadSync::ThreadSync(MeasurementHandler & measurementHandler)
     measurementValue_ = "1";
 
     processorCount_ = std::thread::hardware_concurrency();
-    DEBUG_LOG("System procesors count : " + std::to_string(processorCount_));
+    /* LOG TO FIX*/  LOG_ERROR << ("System procesors count : " + std::to_string(processorCount_));
 }
 
 ThreadSync::~ThreadSync()
@@ -49,7 +49,7 @@ void ThreadSync::Unsubscribe(uint32 id)
     }
     else
     {
-        ERROR_LOG("Unsubscribe error, " + std::to_string(id));
+        /* LOG TO FIX*/  LOG_ERROR << ("Unsubscribe error, " + std::to_string(id));
     }
 }
 
diff --git a/Sources/Utils/ThreadSync.h b/Sources/Utils/ThreadSync.h
index f7325f72..fb550a6d 100644
--- a/Sources/Utils/ThreadSync.h
+++ b/Sources/Utils/ThreadSync.h
@@ -1,6 +1,7 @@
 #pragma once
 #include <atomic>
 #include <iostream>
+#include <list>
 #include <unordered_map>
 #include "Logger/Log.h"
 #include "Mutex.hpp"
diff --git a/Sources/Utils/Time/TimerService.cpp b/Sources/Utils/Time/TimerService.cpp
index 07c129ed..3bb4a8f3 100644
--- a/Sources/Utils/Time/TimerService.cpp
+++ b/Sources/Utils/Time/TimerService.cpp
@@ -16,7 +16,7 @@ TimerService::~TimerService()
     {
         isUpdate_.store(false);
         thread_.join();
-        DEBUG_LOG("Thread end");
+        /* LOG TO FIX*/  LOG_ERROR << ("Thread end");
     }
 }
 IdType TimerService::timer(const std::chrono::milliseconds& time, std::function<void()> callback)
@@ -66,7 +66,7 @@ void TimerService::update()
 }
 void TimerService::startThread()
 {
-    DEBUG_LOG("Thread started");
+    /* LOG TO FIX*/  LOG_ERROR << ("Thread started");
     isUpdate_.store(true);
     thread_ = std::thread([&]() {
         while (isUpdate_.load())
@@ -84,7 +84,7 @@ void TimerService::cancelWithoutLock(IdType id)
     {
         isUpdate_.store(false);
         thread_.join();
-        DEBUG_LOG("Thread end");
+        /* LOG TO FIX*/  LOG_ERROR << ("Thread end");
     }
 }
 }  // namespace Time
diff --git a/Sources/Utils/TreeNode.cpp b/Sources/Utils/TreeNode.cpp
index 0beb8fb7..4c420178 100644
--- a/Sources/Utils/TreeNode.cpp
+++ b/Sources/Utils/TreeNode.cpp
@@ -105,7 +105,7 @@ void Read(const TreeNode& node, float& v)
     }
     catch (...)
     {
-        ERROR_LOG("read error " + node.value_);
+        /* LOG TO FIX*/  LOG_ERROR << ("read error " + node.value_);
     }
 }
 
@@ -147,7 +147,7 @@ void Read(const TreeNode& node, vec3& v)
     }
     catch (...)
     {
-        ERROR_LOG("Read error");
+        /* LOG TO FIX*/  LOG_ERROR << ("Read error");
     }
 }
 void Read(const TreeNode& node, vec4& v)
@@ -161,7 +161,7 @@ void Read(const TreeNode& node, vec4& v)
     }
     catch (...)
     {
-        ERROR_LOG("Read error");
+        /* LOG TO FIX*/  LOG_ERROR << ("Read error");
     }
 }
 
@@ -176,7 +176,7 @@ void Read(const TreeNode& node, Quaternion& v)
     }
     catch (...)
     {
-        ERROR_LOG("Read error");
+        /* LOG TO FIX*/  LOG_ERROR << ("Read error");
     }
 }
 
diff --git a/Sources/Utils/Utils.cpp b/Sources/Utils/Utils.cpp
index b40cbaee..23c5c1bc 100644
--- a/Sources/Utils/Utils.cpp
+++ b/Sources/Utils/Utils.cpp
@@ -59,7 +59,7 @@ std::string ReadFileBinary(const std::string& file_name)
     std::ifstream t(file_name, std::ios::binary);
     if (!t.is_open())
     {
-        ERROR_LOG("Cannot open file : " + file_name);
+        /* LOG TO FIX*/  LOG_ERROR << ("Cannot open file : " + file_name);
         return std::string();
     }
     std::string out = std::string((std::istreambuf_iterator<char>(t)), std::istreambuf_iterator<char>());
@@ -72,7 +72,7 @@ std::string ReadFile(const std::string& file_name)
     std::ifstream t(file_name);
     if (!t.is_open())
     {
-        ERROR_LOG("Cannot open file : " + file_name);
+        /* LOG TO FIX*/  LOG_ERROR << ("Cannot open file : " + file_name);
         return std::string();
     }
     std::string out = std::string((std::istreambuf_iterator<char>(t)), std::istreambuf_iterator<char>());
@@ -86,7 +86,7 @@ std::vector<std::string> ReadFileLines(const std::string& file_name)
     std::ifstream f(file_name);
     if (!f.is_open())
     {
-        ERROR_LOG("Cannot open file : " + file_name);
+        /* LOG TO FIX*/  LOG_ERROR << ("Cannot open file : " + file_name);
         return output;
     }
 
@@ -104,7 +104,7 @@ void WrtieToFile(const std::string& filename, const std::string& content)
     std::ofstream file(filename.c_str());
     if (!file.is_open())
     {
-        ERROR_LOG("cannot open file " + filename);
+        /* LOG TO FIX*/  LOG_ERROR << ("cannot open file " + filename);
         return;
     }
     file << content;
@@ -235,12 +235,12 @@ float StringToFloat(const std::string& str)
     catch (const std::invalid_argument& e)
     {
         std::string s = e.what();
-        ERROR_LOG("StringToFloat invalid_argument. : " + s);
+        /* LOG TO FIX*/  LOG_ERROR << ("StringToFloat invalid_argument. : " + s);
     }
     catch (const std::out_of_range& e)
     {
         std::string s = e.what();
-        ERROR_LOG("StringToFloat out_of_range. : " + s);
+        /* LOG TO FIX*/  LOG_ERROR << ("StringToFloat out_of_range. : " + s);
     }
     return f;
 }
@@ -255,12 +255,12 @@ int StringToInt(const std::string& str)
     catch (const std::invalid_argument& e)
     {
         std::string s = e.what();
-        ERROR_LOG("StringToInt invalid_argument. : " + s);
+        /* LOG TO FIX*/  LOG_ERROR << ("StringToInt invalid_argument. : " + s);
     }
     catch (const std::out_of_range& e)
     {
         std::string s = e.what();
-        ERROR_LOG("StringToInt out_of_range. : " + s);
+        /* LOG TO FIX*/  LOG_ERROR << ("StringToInt out_of_range. : " + s);
     }
     return i;
 }
diff --git a/Sources/Utils/XML/XmlReader.cpp b/Sources/Utils/XML/XmlReader.cpp
index bec2af12..746685dc 100644
--- a/Sources/Utils/XML/XmlReader.cpp
+++ b/Sources/Utils/XML/XmlReader.cpp
@@ -54,7 +54,7 @@ bool XmlReader::Read(const std::string& filename)
     }
     catch (...)
     {
-        WARNING_LOG("Xml read error! filename=" + filename);
+        /* LOG TO FIX*/  LOG_ERROR << ("Xml read error! filename=" + filename);
     }
     return false;
 }
@@ -70,8 +70,8 @@ bool XmlReader::ReadXml(std::string fileContent)
     catch (const rapidxml::parse_error& p)
     {
         std::string out = p.what();
-        ERROR_LOG(out);
-        ERROR_LOG(fileContent);
+        /* LOG TO FIX*/  LOG_ERROR << (out);
+        /* LOG TO FIX*/  LOG_ERROR << (fileContent);
         return false;
     }
     root_ = std::make_unique<TreeNode>(document.first_node()->name());
diff --git a/Sources/Utils/XML/XmlWriter.cpp b/Sources/Utils/XML/XmlWriter.cpp
index f22fbe05..84e5a1d6 100644
--- a/Sources/Utils/XML/XmlWriter.cpp
+++ b/Sources/Utils/XML/XmlWriter.cpp
@@ -2,6 +2,7 @@
 
 #include <filesystem>
 #include <fstream>
+#include <list>
 
 #include "Logger/Log.h"
 #include "rapidxml.hpp"
@@ -84,10 +85,10 @@ public:
         std::ofstream file(filename.c_str());
         if (!file.is_open())
         {
-            ERROR_LOG("cannot open file " + filename);
+            /* LOG TO FIX*/  LOG_ERROR << ("cannot open file " + filename);
             return;
         }
-        DEBUG_LOG("Xml save : " + filename);
+        /* LOG TO FIX*/  LOG_ERROR << ("Xml save : " + filename);
         file << document_;
         file.close();
     }
diff --git a/Sources/UtilsNetwork/ClientCreator.cpp b/Sources/UtilsNetwork/ClientCreator.cpp
index dd828df4..2b7209f5 100644
--- a/Sources/UtilsNetwork/ClientCreator.cpp
+++ b/Sources/UtilsNetwork/ClientCreator.cpp
@@ -55,14 +55,14 @@ ClientCreator::ConnectionState ClientCreator::WaitForAcceptConnection()
 
     if (connectingMsg->connectionStatus == ConnectionStatus::CONNECTED)
     {
-        DEBUG_LOG("Connected to server.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Connected to server.");
         return ClientCreator::CONNECTED;
     }
 
     if (connectingMsg->connectionStatus != ConnectionStatus::WAIT_FOR_AUTHENTICATION)
         return ClientCreator::NOT_CONNECTED;
 
-    DEBUG_LOG("Wait for authentication...");
+    /* LOG TO FIX*/  LOG_ERROR << ("Wait for authentication...");
     return ClientCreator::WAIT_FOR_AUTHENTICATION;
 }
 
@@ -72,7 +72,7 @@ bool ClientCreator::WaitForAuthentication(const std::string& username, const std
 
     sender_.SendTcp(context_.socket, msg);
 
-    DEBUG_LOG("Sent authenticationMessage");
+    /* LOG TO FIX*/  LOG_ERROR << ("Sent authenticationMessage");
 
     sdlNetWrapper_.CheckSockets(context_.socketSet, 5000);
 
@@ -87,11 +87,11 @@ bool ClientCreator::WaitForAuthentication(const std::string& username, const std
 
     if (connectingMsg->connectionStatus == ConnectionStatus::CONNECTED)
     {
-        DEBUG_LOG("Joining server now...");
+        /* LOG TO FIX*/  LOG_ERROR << ("Joining server now...");
         return true;
     }
 
-    DEBUG_LOG("Authentication failed. Wrong username or password.");
+    /* LOG TO FIX*/  LOG_ERROR << ("Authentication failed. Wrong username or password.");
     return false;
 }
 
@@ -99,13 +99,13 @@ ConnectionMessage* ClientCreator::GetAndValidateConnectionMessage(IMessage* msg)
 {
     if (msg == nullptr)
     {
-        ERROR_LOG("[ClientCreator::GetAndValidateConnectionMessage] Recv nullptr msg.");
+        /* LOG TO FIX*/  LOG_ERROR << ("[ClientCreator::GetAndValidateConnectionMessage] Recv nullptr msg.");
         return nullptr;
     }
 
     if (msg->GetType() != MessageTypes::ConnectionMsg)
     {
-        ERROR_LOG("[ClientCreator::GetAndValidateConnectionMessage] Unsupported msg recv.");
+        /* LOG TO FIX*/  LOG_ERROR << ("[ClientCreator::GetAndValidateConnectionMessage] Unsupported msg recv.");
         return nullptr;
     }
 
@@ -113,7 +113,7 @@ ConnectionMessage* ClientCreator::GetAndValidateConnectionMessage(IMessage* msg)
 
     if (connectingMsg == nullptr)
     {
-        ERROR_LOG(
+        /* LOG TO FIX*/  LOG_ERROR << (
             "[ClientCreator::GetAndValidateConnectionMessage] Something went wrong. Couldn't cast to "
             "ConnectionMessage*.");
         return nullptr;
@@ -121,7 +121,7 @@ ConnectionMessage* ClientCreator::GetAndValidateConnectionMessage(IMessage* msg)
 
     if (connectingMsg->connectionStatus == ConnectionStatus::ERROR_FULL)
     {
-        ERROR_LOG("Not connected. Server is full.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Not connected. Server is full.");
         return nullptr;
     }
 
diff --git a/Sources/UtilsNetwork/ConnectionManager.cpp b/Sources/UtilsNetwork/ConnectionManager.cpp
index 853d3a53..5e27a7c3 100644
--- a/Sources/UtilsNetwork/ConnectionManager.cpp
+++ b/Sources/UtilsNetwork/ConnectionManager.cpp
@@ -64,7 +64,7 @@ bool ConnectionManager::ProccessAuthentication(Users::iterator& userIter)
     {
         --clientsCount_;
         userIter = notAuthenticatedUsers.erase(userIter);
-        DEBUG_LOG("Disconnected. There are now " + std::to_string(clientsCount_) + " client(s) connected.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Disconnected. There are now " + std::to_string(clientsCount_) + " client(s) connected.");
         return true;
     }
 
@@ -114,14 +114,14 @@ bool ConnectionManager::ProccessAuthentication(Users::iterator& userIter)
         for (auto s : newUserSubscribes_)
             s(name, connectedUserId);
 
-        DEBUG_LOG(name + " connected. There are now " + std::to_string(clientsCount_) + " client(s) connected.");
+        /* LOG TO FIX*/  LOG_ERROR << (name + " connected. There are now " + std::to_string(clientsCount_) + " client(s) connected.");
     }
     else
     {
         ConnectionMessage conMsg(errorConnectionStatus);
         sender_.SendTcp(user->socket, conMsg);
         --clientsCount_;
-        DEBUG_LOG(errorString + name + ". Disconnected. There are now " + std::to_string(clientsCount_) + " client(s) connected.");
+        /* LOG TO FIX*/  LOG_ERROR << (errorString + name + ". Disconnected. There are now " + std::to_string(clientsCount_) + " client(s) connected.");
     }
 
     userIter = notAuthenticatedUsers.erase(userIter);
@@ -147,7 +147,7 @@ void ConnectionManager::CreateClientSocketIfAvailable()
     ConnectionMessage conMsg(ConnectionStatus::WAIT_FOR_AUTHENTICATION);
     sender_.SendTcp(usr->socket, conMsg);
 
-    DEBUG_LOG("Client connected. Wait for authentication. There are now " + std::to_string(clientsCount_) + " client(s) connected.");
+    /* LOG TO FIX*/  LOG_ERROR << ("Client connected. Wait for authentication. There are now " + std::to_string(clientsCount_) + " client(s) connected.");
 }
 
 bool ConnectionManager::CheckSocketsActivity()
@@ -168,7 +168,7 @@ void ConnectionManager::DisconectUser(uint32 id)
 {
     sdlNetWrapper_.TCPCloseAndDeleteSocket(context_.socketSet, context_.users[id]->socket);
     --clientsCount_;
-    DEBUG_LOG("User disconnected. There are now " + std::to_string(clientsCount_) + " client(s) connected.");
+    /* LOG TO FIX*/  LOG_ERROR << ("User disconnected. There are now " + std::to_string(clientsCount_) + " client(s) connected.");
 }
 
 void ConnectionManager::DissmissConection()
@@ -176,7 +176,7 @@ void ConnectionManager::DissmissConection()
     if (IsSpace())
         return;
 
-    DEBUG_LOG("*** Maximum client count reached - rejecting client connection ***");
+    /* LOG TO FIX*/  LOG_ERROR << ("*** Maximum client count reached - rejecting client connection ***");
 
     TCPsocket tempSock = sdlNetWrapper_.TCPAccept(context_.socket);
 
diff --git a/Sources/UtilsNetwork/Gateway.cpp b/Sources/UtilsNetwork/Gateway.cpp
index bbee8eb0..618150e4 100644
--- a/Sources/UtilsNetwork/Gateway.cpp
+++ b/Sources/UtilsNetwork/Gateway.cpp
@@ -38,19 +38,19 @@ Gateway::Gateway(Utils::Time::CTimeMeasurer timeMeasurer)
 
 Gateway::~Gateway()
 {
-    DEBUG_LOG("Disconnecting users");
+    /* LOG TO FIX*/  LOG_ERROR << ("Disconnecting users");
     for (auto& user : context_.users)
         DisconnectUser(user.second->id);
 }
 
 bool Gateway::StartServer(uint32 maxClients, uint32 port)
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
     auto context = serverCreator_.Create(maxClients, port);
 
     if (not context)
     {
-        DEBUG_LOG("Server creation failed.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Server creation failed.");
         return false;
     }
 
@@ -63,7 +63,7 @@ bool Gateway::StartServer(uint32 maxClients, uint32 port)
 bool Gateway::ConnectToServer(const std::string& username, const std::string& password, const std::string& host,
                               uint32 port)
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
 
     auto op_context = clientCreator_.ConnectToServer(username, password, host, port);
 
@@ -99,7 +99,7 @@ void Gateway::Update()
 
         if (status == RecvStatus::Disconnect)
         {
-            DEBUG_LOG("Disconnect : " + std::to_string(user.second->id));
+            /* LOG TO FIX*/  LOG_ERROR << ("Disconnect : " + std::to_string(user.second->id));
             DisconnectUser(user.second->id);
             iter = context_.users.erase(iter);
             continue;
@@ -138,7 +138,7 @@ bool Gateway::Send(uint32 userId, const IMessage& message)
 {
     if (context_.users.count(userId) == 0)
     {
-        DEBUG_LOG("User not found: Id : " + std::to_string(userId));
+        /* LOG TO FIX*/  LOG_ERROR << ("User not found: Id : " + std::to_string(userId));
         return false;
     }
 
diff --git a/Sources/UtilsNetwork/IMessage.h b/Sources/UtilsNetwork/IMessage.h
index 53939327..25adc37b 100644
--- a/Sources/UtilsNetwork/IMessage.h
+++ b/Sources/UtilsNetwork/IMessage.h
@@ -52,7 +52,7 @@ std::unique_ptr<T> castMessageAs(std::unique_ptr<IMessage> ptr)
     auto msg = std::static_pointer_cast<T>(ptr);
     if (msg == nullptr)
     {
-        ERROR_LOG("Cant cast type : " + std::to_string(ptr->GetType()));
+        /* LOG TO FIX*/  LOG_ERROR << ("Cant cast type : " + std::to_string(ptr->GetType()));
         return nullptr;
     }
     return msg;
@@ -63,7 +63,7 @@ T* castMessageAs(IMessage* ptr)
     auto msg = static_cast<T*>(ptr);
     if (msg == nullptr)
     {
-        ERROR_LOG("Cant cast type : " + std::to_string(ptr->GetType()));
+        /* LOG TO FIX*/  LOG_ERROR << ("Cant cast type : " + std::to_string(ptr->GetType()));
         return nullptr;
     }
     return msg;
@@ -74,7 +74,7 @@ const T* const castMessageAs(const IMessage& ptr)
     auto msg = &static_cast<const T&>(ptr);
     if (msg == nullptr)
     {
-        ERROR_LOG("Cant cast type : " + std::to_string(ptr.GetType()));
+        /* LOG TO FIX*/  LOG_ERROR << ("Cant cast type : " + std::to_string(ptr.GetType()));
         return nullptr;
     }
     return msg;
diff --git a/Sources/UtilsNetwork/Messages/BinaryConnectionMessageConverter.cpp b/Sources/UtilsNetwork/Messages/BinaryConnectionMessageConverter.cpp
index 931051ce..4371f56f 100644
--- a/Sources/UtilsNetwork/Messages/BinaryConnectionMessageConverter.cpp
+++ b/Sources/UtilsNetwork/Messages/BinaryConnectionMessageConverter.cpp
@@ -14,7 +14,7 @@ namespace Network
 {
 BinaryConnectionMessageConverter::BinaryConnectionMessageConverter()
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
 }
 
 bool BinaryConnectionMessageConverter::IsValid(IMessageFormat format, IMessageType type) const
@@ -33,7 +33,7 @@ std::unique_ptr<IMessage> BinaryConnectionMessageConverter::Convert(IMessageType
         case Network::MessageTypes::Text:
             return ConvertMessage<Network::TextMessage>(message);
         default:
-            DEBUG_LOG("Convert to IMessage. Unsuporrted message.");
+            /* LOG TO FIX*/  LOG_ERROR << ("Convert to IMessage. Unsuporrted message.");
     }
 
     return nullptr;
@@ -51,7 +51,7 @@ IMessageData BinaryConnectionMessageConverter::Convert(const IMessage& message)
             return ConvertMessage<Network::TextMessage>(message);
     }
 
-    DEBUG_LOG("Convert to binary. Unsuporrted message.");
+    /* LOG TO FIX*/  LOG_ERROR << ("Convert to binary. Unsuporrted message.");
     return {};
 }
 }  // namespace Network
diff --git a/Sources/UtilsNetwork/Messages/XmlConnectionMessageConverter.cpp b/Sources/UtilsNetwork/Messages/XmlConnectionMessageConverter.cpp
index 10a3aa3e..ec2b22f9 100755
--- a/Sources/UtilsNetwork/Messages/XmlConnectionMessageConverter.cpp
+++ b/Sources/UtilsNetwork/Messages/XmlConnectionMessageConverter.cpp
@@ -18,7 +18,7 @@ namespace Network
 {
 XmlConnectionMessageConverter::XmlConnectionMessageConverter()
 {
-    DEBUG_LOG("");
+    /* LOG TO FIX*/  LOG_ERROR << ("");
 }
 
 bool XmlConnectionMessageConverter::IsValid(IMessageFormat format, IMessageType type) const
@@ -29,7 +29,7 @@ bool XmlConnectionMessageConverter::IsValid(IMessageFormat format, IMessageType
 
 std::unique_ptr<IMessage> XmlConnectionMessageConverter::Convert(IMessageType type, const IMessageData& message)
 {
-    DEBUG_LOG(Network::Convert(message));
+    /* LOG TO FIX*/  LOG_ERROR << (Network::Convert(message));
 
     Utils::XmlReader reader;
     std::string a = Network::Convert(message);
@@ -77,7 +77,7 @@ std::unique_ptr<IMessage> XmlConnectionMessageConverter::Convert(IMessageType ty
             break;
         }
         default:
-            DEBUG_LOG("Convert to IMessage. Unsuporrted message.");
+            /* LOG TO FIX*/  LOG_ERROR << ("Convert to IMessage. Unsuporrted message.");
     }
 
     return nullptr;
@@ -94,7 +94,7 @@ IMessageData XmlConnectionMessageConverter::Convert(const IMessage& message)
             return ConvertTextMessage(message);
     }
     //  XML
-    DEBUG_LOG("Convert to xml. Unsuporrted message.");
+    /* LOG TO FIX*/  LOG_ERROR << ("Convert to xml. Unsuporrted message.");
     return {};
 }
 
@@ -106,7 +106,7 @@ IMessageData XmlConnectionMessageConverter::ConvertConnectionMessage(const IMess
     root.attributes_.insert({"connectionStatus", std::to_string(connectionMessage->connectionStatus)});
 
     auto v = CreatePayload(root);
-    DEBUG_LOG(Network::Convert(v));
+    /* LOG TO FIX*/  LOG_ERROR << (Network::Convert(v));
     return v;
 }
 
@@ -119,7 +119,7 @@ IMessageData XmlConnectionMessageConverter::ConvertAuthenticationMessage(const I
     root.attributes_.insert({"password", msg->GetPassword()});
 
     auto v = CreatePayload(root);
-    DEBUG_LOG(Network::Convert(v));
+    /* LOG TO FIX*/  LOG_ERROR << (Network::Convert(v));
     return v;
 }
 
@@ -127,13 +127,13 @@ IMessageData XmlConnectionMessageConverter::ConvertTextMessage(const IMessage& m
 {
     auto msg = castMessageAs<TextMessage>(message);
 
-    DEBUG_LOG("testShortMessage_ : " + msg->GetText());
+    /* LOG TO FIX*/  LOG_ERROR << ("testShortMessage_ : " + msg->GetText());
 
     TreeNode root("TextMessage");
     root.attributes_.insert({"text", msg->GetText()});
 
     auto v = CreatePayload(root);
-    DEBUG_LOG(Network::Convert(v));
+    /* LOG TO FIX*/  LOG_ERROR << (Network::Convert(v));
     return v;
 }
 
diff --git a/Sources/UtilsNetwork/NetworkCreator.cpp b/Sources/UtilsNetwork/NetworkCreator.cpp
index b0c5b13b..49f8cb8f 100644
--- a/Sources/UtilsNetwork/NetworkCreator.cpp
+++ b/Sources/UtilsNetwork/NetworkCreator.cpp
@@ -15,7 +15,7 @@ NetworkCreator::~NetworkCreator()
     if (!isCreated)
         return;
 
-    DEBUG_LOG("Closing TCP");
+    /* LOG TO FIX*/  LOG_ERROR << ("Closing TCP");
     SDLNet_TCP_Close(context_.socket);
     SDLNet_FreeSocketSet(context_.socketSet);
     SDLNet_Quit();
@@ -26,7 +26,7 @@ bool NetworkCreator::Init()
     if (sdlNetWrapper_.Init() != -1)
         return true;
 
-    ERROR_LOG("Failed to intialise SDL_net: " + std::string(sdlNetWrapper_.GetError()));
+    /* LOG TO FIX*/  LOG_ERROR << ("Failed to intialise SDL_net: " + std::string(sdlNetWrapper_.GetError()));
     return false;
 }
 
@@ -36,12 +36,12 @@ bool NetworkCreator::AllocSocketSet(int count)
 
     if (context_.socketSet == nullptr)
     {
-        ERROR_LOG("Failed to allocate the socket set:: " + std::string(sdlNetWrapper_.GetError()));
+        /* LOG TO FIX*/  LOG_ERROR << ("Failed to allocate the socket set:: " + std::string(sdlNetWrapper_.GetError()));
         return false;
     }
 
     std::string str = "Allocated socket set with size:  " + std::to_string(context_.maxClients + 1) + ", of which " + std::to_string(context_.maxClients) + " are availble for use by clients.";
-    DEBUG_LOG(str);
+    /* LOG TO FIX*/  LOG_ERROR << (str);
     return true;
 }
 
@@ -51,11 +51,11 @@ bool NetworkCreator::ResolveHost(const char* hostName)
 
     if (hostResolved == -1)
     {
-        ERROR_LOG("Failed to resolve the server host: " + std::string(sdlNetWrapper_.GetError()));
+        /* LOG TO FIX*/  LOG_ERROR << ("Failed to resolve the server host: " + std::string(sdlNetWrapper_.GetError()));
         return false;
     }
 
-    DEBUG_LOG("Successfully resolved server host to IP: " + UtilsNetwork::IpAddressToString(context_.serverIP));
+    /* LOG TO FIX*/  LOG_ERROR << ("Successfully resolved server host to IP: " + UtilsNetwork::IpAddressToString(context_.serverIP));
     return true;
 }
 
@@ -65,11 +65,11 @@ bool NetworkCreator::ResolveIp()
 
     if (ipResolved == nullptr)
     {
-        ERROR_LOG("Failed to resolve ip: " + std::string(sdlNetWrapper_.GetError()));
+        /* LOG TO FIX*/  LOG_ERROR << ("Failed to resolve ip: " + std::string(sdlNetWrapper_.GetError()));
         return false;
     }
 
-    DEBUG_LOG("Ip resolved : " + std::string(ipResolved));
+    /* LOG TO FIX*/  LOG_ERROR << ("Ip resolved : " + std::string(ipResolved));
     return true;
 }
 
@@ -80,11 +80,11 @@ bool NetworkCreator::OpenTcp()
 
     if (!context_.socket)
     {
-        ERROR_LOG("Failed to open the server socket: " + std::string(sdlNetWrapper_.GetError()));
+        /* LOG TO FIX*/  LOG_ERROR << ("Failed to open the server socket: " + std::string(sdlNetWrapper_.GetError()));
         return false;
     }
 
-    DEBUG_LOG("Sucessfully created server socket.");
+    /* LOG TO FIX*/  LOG_ERROR << ("Sucessfully created server socket.");
     return true;
 }
 
diff --git a/Sources/UtilsNetwork/NetworkUtils.cpp b/Sources/UtilsNetwork/NetworkUtils.cpp
index 66eeffcc..665240dc 100644
--- a/Sources/UtilsNetwork/NetworkUtils.cpp
+++ b/Sources/UtilsNetwork/NetworkUtils.cpp
@@ -43,10 +43,10 @@ bool CheckComplexMessage(std::list<std::string>& incoming_messages)
 
     if (!tmp_msg.empty())
     {
-        DEBUG_LOG("###################################################");
-        DEBUG_LOG("Add complex messaeg  : " + tmp_msg);
+        /* LOG TO FIX*/  LOG_ERROR << ("###################################################");
+        /* LOG TO FIX*/  LOG_ERROR << ("Add complex messaeg  : " + tmp_msg);
         incoming_messages.push_back(tmp_msg);
-        DEBUG_LOG("###################################################");
+        /* LOG TO FIX*/  LOG_ERROR << ("###################################################");
     }
     return true;
 }
@@ -55,7 +55,7 @@ void SendSingleMessage(TCPsocket socket, const std::string& message)
 {
     if (message.empty())
     {
-        DEBUG_LOG("Try sent empty message");
+        /* LOG TO FIX*/  LOG_ERROR << ("Try sent empty message");
         return;
     }
     char buffer[BUFFER_SIZE];
@@ -65,10 +65,10 @@ void SendSingleMessage(TCPsocket socket, const std::string& message)
         buffer[x] = message[x];
 
     auto sended_bytes = SDLNet_TCP_Send(socket, buffer, BUFFER_SIZE);
-    DEBUG_LOG("Sended message, size : " + std::to_string(message.size()) + " " + std::to_string(sended_bytes) + "/" +
+    /* LOG TO FIX*/  LOG_ERROR << ("Sended message, size : " + std::to_string(message.size()) + " " + std::to_string(sended_bytes) + "/" +
               std::to_string(BUFFER_SIZE) + " (" +
               std::to_string((int)(((float)sended_bytes / (float)(BUFFER_SIZE)) * 100.f)) + "%)");
-    DEBUG_LOG("Sended : \n" + message);
+    /* LOG TO FIX*/  LOG_ERROR << ("Sended : \n" + message);
 }
 
 void SendMessage(TCPsocket socket, const std::string& message)
diff --git a/Sources/UtilsNetwork/PayloadUtils.h b/Sources/UtilsNetwork/PayloadUtils.h
index c48b0721..bfd01ee0 100755
--- a/Sources/UtilsNetwork/PayloadUtils.h
+++ b/Sources/UtilsNetwork/PayloadUtils.h
@@ -19,7 +19,7 @@ Network::IMessageData ConvertMessage(const Network::IMessage& message)
     std::vector<int8> result;
     result.resize(sizeof(T));
     memcpy(&result[0], (void*)&message, sizeof(T));
-    DEBUG_LOG("Sizeof <T> : " + std::to_string(sizeof(T)));
+    /* LOG TO FIX*/  LOG_ERROR << ("Sizeof <T> : " + std::to_string(sizeof(T)));
     return result;
 }
 }  // namespace Network
diff --git a/Sources/UtilsNetwork/Reciever.cpp b/Sources/UtilsNetwork/Reciever.cpp
index aba72cb0..a9401724 100755
--- a/Sources/UtilsNetwork/Reciever.cpp
+++ b/Sources/UtilsNetwork/Reciever.cpp
@@ -24,7 +24,7 @@ std::tuple<RecvStatus, std::unique_ptr<IMessage>> Receiver::Receive(TCPsocket so
 
     if (not format)
     {
-        DEBUG_LOG("Recevie unknown message incoming format");
+        /* LOG TO FIX*/  LOG_ERROR << ("Recevie unknown message incoming format");
         return std::make_tuple(RecvStatus::Disconnect, nullptr);
     }
 
@@ -32,7 +32,7 @@ std::tuple<RecvStatus, std::unique_ptr<IMessage>> Receiver::Receive(TCPsocket so
 
     if (not type)
     {
-        DEBUG_LOG("Recevie unknown message incoming type");
+        /* LOG TO FIX*/  LOG_ERROR << ("Recevie unknown message incoming type");
         return std::make_tuple(RecvStatus::Disconnect, nullptr);
     }
 
@@ -40,7 +40,7 @@ std::tuple<RecvStatus, std::unique_ptr<IMessage>> Receiver::Receive(TCPsocket so
 
     if (not messageSize)
     {
-        DEBUG_LOG("Recevie messageSize error");
+        /* LOG TO FIX*/  LOG_ERROR << ("Recevie messageSize error");
         return std::make_tuple(RecvStatus::Disconnect, nullptr);
     }
 
@@ -48,10 +48,10 @@ std::tuple<RecvStatus, std::unique_ptr<IMessage>> Receiver::Receive(TCPsocket so
 
     if (message.empty())
     {
-        DEBUG_LOG("Recevie incoming unknown message");
+        /* LOG TO FIX*/  LOG_ERROR << ("Recevie incoming unknown message");
         return std::make_tuple(RecvStatus::Disconnect, nullptr);
     }
-    DEBUG_LOG("Recevie incoming message :" + std::to_string(*type));
+    /* LOG TO FIX*/  LOG_ERROR << ("Recevie incoming message :" + std::to_string(*type));
 
     for (auto& messageConverter : messageConverters_)
     {
@@ -74,7 +74,7 @@ std::optional<uint8> Receiver::ReceiveFormat(TCPsocket socket)
     uint8 messageFormat = 0;
     if (sdlNetWrapper_.RecvTcp(socket, &messageFormat, sizeof(uint8)))
     {
-        DEBUG_LOG(std::string("Receive header, msg format : ") + std::to_string(ConvertFormat(messageFormat)));
+        /* LOG TO FIX*/  LOG_ERROR << (std::string("Receive header, msg format : ") + std::to_string(ConvertFormat(messageFormat)));
         return messageFormat;
     }
 
@@ -86,7 +86,7 @@ std::optional<uint8> Receiver::ReceiveType(TCPsocket socket)
     uint8 messageType = 0;
     if (sdlNetWrapper_.RecvTcp(socket, &messageType, sizeof(uint8)))
     {
-        DEBUG_LOG(std::string("Receive header, msg type : ") + std::to_string(messageType));
+        /* LOG TO FIX*/  LOG_ERROR << (std::string("Receive header, msg type : ") + std::to_string(messageType));
         return messageType;
     }
     return {};
@@ -97,7 +97,7 @@ std::optional<uint32> Receiver::ReceiveMessageSize(TCPsocket socket)
     uint32 messageSize = 0;
     if (sdlNetWrapper_.RecvTcp(socket, &messageSize, sizeof(uint32)))
     {
-        DEBUG_LOG(std::string("Receive header, msg size : ") + std::to_string(messageSize));
+        /* LOG TO FIX*/  LOG_ERROR << (std::string("Receive header, msg size : ") + std::to_string(messageSize));
         return messageSize;
     }
     return {};
@@ -106,10 +106,10 @@ std::optional<uint32> Receiver::ReceiveMessageSize(TCPsocket socket)
 std::vector<int8> Receiver::ReceiveMessage(TCPsocket socket, uint32 messageSize)
 {
     const int BUFF_SIZE = 1024;
-    
+
     if (messageSize >= BUFF_SIZE)
     {
-        DEBUG_LOG("Buffer overflow");
+        /* LOG TO FIX*/  LOG_ERROR << ("Buffer overflow");
         return {};
     }
     std::vector<int8> result;
diff --git a/Sources/UtilsNetwork/Sender.cpp b/Sources/UtilsNetwork/Sender.cpp
index 7bcd5897..e7673d6a 100755
--- a/Sources/UtilsNetwork/Sender.cpp
+++ b/Sources/UtilsNetwork/Sender.cpp
@@ -30,7 +30,7 @@ SentStatus Sender::SendTcp(TCPsocket socket, const IMessage& msg)
 
     if (not converter)
     {
-        DEBUG_LOG("Converter for message not found.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Converter for message not found.");
         return SentStatus::UNDEFINED_ERROR;
     }
 
@@ -56,7 +56,7 @@ bool Sender::sendMessageFormat(TCPsocket socket)
     if (not sentStatus)
         return false;
 
-    DEBUG_LOG("formatValue sent : " + std::to_string(formatValue));
+    /* LOG TO FIX*/  LOG_ERROR << ("formatValue sent : " + std::to_string(formatValue));
     return true;
 }
 
@@ -70,7 +70,7 @@ bool Sender::sendMessageType(TCPsocket socket, const IMessage& msg)
     if (not sentStatus)
         return false;
 
-    DEBUG_LOG("Msssage type sent : " + std::to_string(type));
+    /* LOG TO FIX*/  LOG_ERROR << ("Msssage type sent : " + std::to_string(type));
 
     return true;
 }
@@ -79,8 +79,8 @@ bool Sender::sendMessage(TCPsocket socket, const IMessage& msg, IMessageConverte
 {
     auto convertedMsg = converter.Convert(msg);
     uint32 length       = static_cast<int>(sizeof(uint8) * convertedMsg.size());
-    DEBUG_LOG("Message size : " + std::to_string(length));
-    DEBUG_LOG(Convert(convertedMsg));
+    /* LOG TO FIX*/  LOG_ERROR << ("Message size : " + std::to_string(length));
+    /* LOG TO FIX*/  LOG_ERROR << (Convert(convertedMsg));
 
     if (sdlNetWrapper_.SendTcp(socket, &length, sizeof(uint32)))
     {
@@ -94,7 +94,7 @@ SentStatus Sender::SendIMessage(TCPsocket socket, IMessage* msg)
     auto final_msg = castMessageAs<T>(msg);
     if (final_msg == nullptr)
     {
-        ERROR_LOG("Something went wrong. Couldn't cast to : " + std::to_string(msg->GetType()));
+        /* LOG TO FIX*/  LOG_ERROR << ("Something went wrong. Couldn't cast to : " + std::to_string(msg->GetType()));
         return SentStatus::CAST_ERROR;
     }
 
diff --git a/Sources/UtilsNetwork/ServerCreator.cpp b/Sources/UtilsNetwork/ServerCreator.cpp
index f671ca24..2c4f831b 100644
--- a/Sources/UtilsNetwork/ServerCreator.cpp
+++ b/Sources/UtilsNetwork/ServerCreator.cpp
@@ -25,7 +25,7 @@ std::optional<ConectContext> ServerCreator::Create(uint32 maxClients, uint32 por
     if (not AddSocketTcp())
         return {};
 
-    DEBUG_LOG("Connection is open.");
+    /* LOG TO FIX*/  LOG_ERROR << ("Connection is open.");
     isCreated = true;
 
     return context_;
diff --git a/Sources/UtilsNetworkTests/MT/Tests/ClientServerTests.cpp b/Sources/UtilsNetworkTests/MT/Tests/ClientServerTests.cpp
index 0fe41c31..28e7428c 100644
--- a/Sources/UtilsNetworkTests/MT/Tests/ClientServerTests.cpp
+++ b/Sources/UtilsNetworkTests/MT/Tests/ClientServerTests.cpp
@@ -1,9 +1,9 @@
 #include <gtest/gtest.h>
 #include "../UtilsNetwork/Gateway.h"
+#include "Logger/Log.h"
 
 #include <UtilsNetwork/Messages/TextMessage.h>
-#include <condition_variable>
-#include <mutex>
+
 
 namespace Network
 {
@@ -15,7 +15,7 @@ public:
         , testShortMessage_{"test text message. Hello World!"}
         , textMessagesCount_{10}
     {
-        CLogger::Instance().ImmeditalyLog();
+        CLogger::Instance().UseAsyncLogging(false);
 
         testShortMessage_.clear();
         for (uint32 x = 0; x < TEXT_MSG_ARRAY_SIZE - 1; ++x)
@@ -27,8 +27,8 @@ public:
             }
             testShortMessage_.push_back(c);
         }
-        DEBUG_LOG("testShortMessage_ : " +  testShortMessage_);
-        DEBUG_LOG("testShortMessage_ size : " + std::to_string(testShortMessage_.size()));
+        LOG_DEBUG << "testShortMessage_ : " << testShortMessage_;
+        LOG_DEBUG << "testShortMessage_ size : " << testShortMessage_.size();
     }
 
     void ClientMain()
@@ -44,7 +44,7 @@ public:
         for (uint32 i = 0; i < textMessagesCount_; ++i)
         {
             TextMessage textMessage(testShortMessage_);
-            DEBUG_LOG("TextMessage textMessage size : " + std::to_string(textMessage.GetText().size()));
+            LOG_DEBUG << "TextMessage textMessage size : " << textMessage.GetText().size();
             clientGateway_.Send(textMessage);
         }
     }
@@ -61,15 +61,15 @@ public:
         serverGateway_.SubscribeOnMessageArrived(MessageTypes::Text, [&](auto, std::unique_ptr<IMessage> imessage) {
             auto textMessage = castMessageAs<TextMessage>(imessage.get());
             auto t           = textMessage->GetText();
-            DEBUG_LOG("Server recevied message : " + t + " size : " + std::to_string(t.size()));
+            /* LOG TO FIX*/  LOG_ERROR << ("Server recevied message : " + t + " size : " + std::to_string(t.size()));
             receviedMessage_ = textMessage->GetText();
 
             if (testShortMessage_ == receviedMessage_)
             {
-                DEBUG_LOG("==");
+                /* LOG TO FIX*/  LOG_ERROR << ("==");
             }
             else {
-                DEBUG_LOG("!=");
+                /* LOG TO FIX*/  LOG_ERROR << ("!=");
             }
             ++textMessagesRecvCount_;
             if (textMessagesRecvCount_ >= textMessagesCount_)
@@ -86,7 +86,7 @@ public:
             serverGateway_.Update();
         }
 
-        DEBUG_LOG("Server closed.");
+        /* LOG TO FIX*/  LOG_ERROR << ("Server closed.");
     }
 
     void SetUp() override
diff --git a/Sources/WxEditor/AnimationViewerFrame.cpp b/Sources/WxEditor/AnimationViewerFrame.cpp
index 41d8783a..b5f367c8 100644
--- a/Sources/WxEditor/AnimationViewerFrame.cpp
+++ b/Sources/WxEditor/AnimationViewerFrame.cpp
@@ -632,7 +632,7 @@ void AnimationViewerFrame::SearchAndAddClipsFromDir(const std::string& path)
     {
         for (const auto& file : files)
         {
-            DEBUG_LOG("Found animation file in subfolders add clip : " + file);
+            /* LOG TO FIX*/  LOG_ERROR << ("Found animation file in subfolders add clip : " + file);
             if (auto animationName = GameEngine::Animation::IsAnimationClip(file))
             {
                 currentGameObject->animator.AddAnimationClip(*animationName, GameEngine::File(file));
diff --git a/Sources/WxEditor/GLCanvas.cpp b/Sources/WxEditor/GLCanvas.cpp
index 3d5ab62f..9cb94130 100644
--- a/Sources/WxEditor/GLCanvas.cpp
+++ b/Sources/WxEditor/GLCanvas.cpp
@@ -185,7 +185,7 @@ void GLCanvas::OnKeyDown(wxKeyEvent& event)
 {
     if (event.GetKeyCode() == 27)  // ESC
     {
-        DEBUG_LOG("Escape");
+        /* LOG TO FIX*/  LOG_ERROR << ("Escape");
         GetParent()->SetFocus();
     }
     wxWindowApi->GetWxInputManager().SetKeyToBuffer(Input::KeyInteger{event.GetKeyCode()}, true);
@@ -338,7 +338,7 @@ void GLCanvas::SetupCamera()
 GameObject& GLCanvas::GetRootObject()
 {
     if (not engine->GetSceneManager().GetActiveScene())
-        ERROR_LOG("No scene is set");
+        /* LOG TO FIX*/  LOG_ERROR << ("No scene is set");
 
     return engine->GetSceneManager().GetActiveScene()->GetRootGameObject();
 }
diff --git a/Sources/WxEditor/MainFrame.cpp b/Sources/WxEditor/MainFrame.cpp
index 2a3e72ab..bb62e1fd 100644
--- a/Sources/WxEditor/MainFrame.cpp
+++ b/Sources/WxEditor/MainFrame.cpp
@@ -385,7 +385,7 @@ void MainFrame::ClearScene()
 
 void MainFrame::OnClose(wxCloseEvent& event)
 {
-    DEBUG_LOG("OnClose");
+    /* LOG TO FIX*/  LOG_ERROR << ("OnClose");
     isRunning = false;
     if (loadSceneThread.joinable())
     {
@@ -529,7 +529,7 @@ GameEngine::GameObject* MainFrame::AddGameObject(const std::string& name, IdType
         auto worldPosition = gameObject->GetWorldTransform().GetPosition();
         auto worldRotation = gameObject->GetWorldTransform().GetRotation();
         auto worldScale    = gameObject->GetWorldTransform().GetScale();
-        DEBUG_LOG("NewGameObj add");
+        /* LOG TO FIX*/  LOG_ERROR << ("NewGameObj add");
         parentGameObject->AddChild(std::move(gameObject));
         go->SetWorldPosition(worldPosition);
         go->SetWorldRotation(worldRotation);
@@ -537,7 +537,7 @@ GameEngine::GameObject* MainFrame::AddGameObject(const std::string& name, IdType
     }
     else
     {
-        DEBUG_LOG("NewGameObj add");
+        /* LOG TO FIX*/  LOG_ERROR << ("NewGameObj add");
         canvas->GetScene().AddGameObject(std::move(gameObject));
     }
 
@@ -981,7 +981,7 @@ void MainFrame::UpdateTimeOnToolbar()
     auto [hour, minute, _] = canvas->GetScene().GetDayNightCycle().GetHourMinuteSecond();
     int totalMinutes       = hour * 60 + minute;
 
-    DEBUG_LOG("hour: " + std::to_string(hour) + " minute: " + std::to_string(minute));
+    /* LOG TO FIX*/  LOG_ERROR << ("hour: " + std::to_string(hour) + " minute: " + std::to_string(minute));
     timeSlider->SetValue(totalMinutes);
     hourCtrl->SetValue(hour);
     minuteCtrl->SetValue(minute);
@@ -1275,7 +1275,7 @@ void MainFrame::OnPageChanged(wxBookCtrlEvent& event)
     int selection = event.GetSelection();  // indeks nowej aktywnej strony
     if (transfromSubController)
     {
-        DEBUG_LOG("selection = " + std::to_string(selection));
+        /* LOG TO FIX*/  LOG_ERROR << ("selection = " + std::to_string(selection));
         transfromSubController->ChangeState(static_cast<TransfromSubController::State>(selection));
     }
     // ... twoja logika ...
@@ -1488,7 +1488,7 @@ TransfromSubController::TransfromSubController(GLCanvas& canvas, TransformPanel*
     , gameObjectId{goId}
     , state{State::world}
 {
-    DEBUG_LOG("SubscribeCurrent");
+    /* LOG TO FIX*/  LOG_ERROR << ("SubscribeCurrent");
     SubscribeCurrent();
     for (auto& panel : transformPanels)
     {
@@ -1545,7 +1545,7 @@ void TransfromSubController::ChangeGameObject(GameObjectId goId)
 {
     if (gameObjectId != goId)
     {
-        DEBUG_LOG("ChangeGameObject " + std::to_string(goId));
+        /* LOG TO FIX*/  LOG_ERROR << ("ChangeGameObject " + std::to_string(goId));
         UnsubscribeCurrent();
         gameObjectId = goId;
         SubscribeCurrent();
@@ -1556,7 +1556,7 @@ void TransfromSubController::ChangeState(State s)
 {
     if (state != s)
     {
-        DEBUG_LOG("State " + std::to_string(static_cast<int>(s)));
+        /* LOG TO FIX*/  LOG_ERROR << ("State " + std::to_string(static_cast<int>(s)));
         UnsubscribeCurrent();
         state = s;
         SubscribeCurrent();
@@ -1572,13 +1572,13 @@ void TransfromSubController::SubscribeCurrent()
 
         if (state == State::world)
         {
-            DEBUG_LOG("Sub world, " + go->GetName());
+            /* LOG TO FIX*/  LOG_ERROR << ("Sub world, " + go->GetName());
             subId = go->SubscribeOnWorldTransfomChange(updatePanel);
             transformPanels[state]->set(go->GetWorldTransform());
         }
         else
         {
-            DEBUG_LOG("Sub local, " + go->GetName());
+            /* LOG TO FIX*/  LOG_ERROR << ("Sub local, " + go->GetName());
             subId = go->GetTransform().SubscribeOnChange(updatePanel);
             transformPanels[state]->set(go->GetTransform());
         }
@@ -1594,12 +1594,12 @@ void TransfromSubController::UnsubscribeCurrent()
         {
             if (state == State::world)
             {
-                DEBUG_LOG("Unsub worl, " + go->GetName());
+                /* LOG TO FIX*/  LOG_ERROR << ("Unsub worl, " + go->GetName());
                 go->UnsubscribeOnWorldTransfromChange(*subId);
             }
             else
             {
-                DEBUG_LOG("Uub local, " + go->GetName());
+                /* LOG TO FIX*/  LOG_ERROR << ("Uub local, " + go->GetName());
                 go->GetTransform().UnsubscribeOnChange(*subId);
             }
         }
diff --git a/Sources/WxEditor/TransformPanel.cpp b/Sources/WxEditor/TransformPanel.cpp
index e5f2c93e..4d227066 100644
--- a/Sources/WxEditor/TransformPanel.cpp
+++ b/Sources/WxEditor/TransformPanel.cpp
@@ -146,7 +146,7 @@ void TransformPanel::Vector3Controls::onChanged(wxCommandEvent& event)
     }
     catch (...)
     {
-        ERROR_LOG("Parse error");
+        /* LOG TO FIX*/  LOG_ERROR << ("Parse error");
     }
 }
 
diff --git a/Sources/WxEditor/WxEditorSceneDll.cpp b/Sources/WxEditor/WxEditorSceneDll.cpp
index 347e907e..243464ea 100644
--- a/Sources/WxEditor/WxEditorSceneDll.cpp
+++ b/Sources/WxEditor/WxEditorSceneDll.cpp
@@ -16,7 +16,7 @@ public:
         camera.UpdateMatrix();
         renderersManager_->GetDebugRenderer().Enable();
 
-        DEBUG_LOG("Hello from WxEditorSceneDll");
+        /* LOG TO FIX*/  LOG_ERROR << ("Hello from WxEditorSceneDll");
 
         return 0;
     }
diff --git a/Sources/WxEditor/WxInputManager.cpp b/Sources/WxEditor/WxInputManager.cpp
index 8d93f4ae..cc83cb65 100644
--- a/Sources/WxEditor/WxInputManager.cpp
+++ b/Sources/WxEditor/WxInputManager.cpp
@@ -102,7 +102,7 @@ KeysMap KeyConverter::keys = KeysMap({
 
 KeyCodes::Type KeyConverter::Convert(uint32 type)
 {
-    DEBUG_LOG("Input: " + std::to_string(type) + " /" + std::to_string(uint32('Z')));
+    /* LOG TO FIX*/  LOG_ERROR << ("Input: " + std::to_string(type) + " /" + std::to_string(uint32('Z')));
     if (keys.Count(type) <= 0)
         return KeyCodes::Type::None;
 
diff --git a/Sources/WxEditor/WxOpenGLApiWrapper.cpp b/Sources/WxEditor/WxOpenGLApiWrapper.cpp
index 1f807378..0553896b 100644
--- a/Sources/WxEditor/WxOpenGLApiWrapper.cpp
+++ b/Sources/WxEditor/WxOpenGLApiWrapper.cpp
@@ -14,6 +14,6 @@ WxOpenGLApiWrapper::WxOpenGLApiWrapper(std::unique_ptr<GraphicsApi::IWindowApi>
 }
 void WxOpenGLApiWrapper::CreateContext()
 {
-    DEBUG_LOG("Skip createContext, should already be created");
+    /* LOG TO FIX*/  LOG_ERROR << ("Skip createContext, should already be created");
 }
 }  // namespace WxEditor
diff --git a/Sources/WxEditor/WxWindowApi.cpp b/Sources/WxEditor/WxWindowApi.cpp
index 72661d25..f009095d 100644
--- a/Sources/WxEditor/WxWindowApi.cpp
+++ b/Sources/WxEditor/WxWindowApi.cpp
@@ -8,7 +8,7 @@ WxWindowApi::WxWindowApi(const vec2i renderSize, WxInputManager::WrapPointerFunc
     : inputManager{std::make_unique<WxInputManager>(renderSize, func)}
     , windowSize(renderSize.x, renderSize.y)
 {
-    DEBUG_LOG("Add display mode: " + std::to_string(renderSize));
+    /* LOG TO FIX*/  LOG_ERROR << ("Add display mode: " + std::to_string(renderSize));
     displayModes.push_back(GraphicsApi::DisplayMode{.w = renderSize.x, .h = renderSize.y, .refreshRate = 60, .displayIndex = 0});
 }
 
@@ -27,7 +27,7 @@ void WxWindowApi::Init()
 
 void WxWindowApi::CreateGameWindow(const std::string &, uint32, uint32, GraphicsApi::WindowType)
 {
-    DEBUG_LOG("CreateGameWindow not needed");
+    /* LOG TO FIX*/  LOG_ERROR << ("CreateGameWindow not needed");
 }
 
 void WxWindowApi::SetWindowSize(const vec2ui &)
